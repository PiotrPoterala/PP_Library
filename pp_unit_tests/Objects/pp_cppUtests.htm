<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\pp_cppUtests.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\pp_cppUtests.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060750: Last Updated: Sun Feb 20 23:40:48 2022
<BR><P>
<H3>Maximum Stack Usage =       1048 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; CommandLineTestRunner::RunAllTests(int, const char*const *) &rArr; CommandLineTestRunner::runAllTestsMain() &rArr; CommandLineTestRunner::parseArguments(TestPlugin*) &rArr; CommandLineArguments::parse(TestPlugin*) &rArr; CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&) &rArr; SimpleString::split(const SimpleString&, SimpleStringCollection&) const &rArr; SimpleStringCollection::allocate(unsigned) &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[26e]">__user_initial_stackheap</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[3e]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3e]">NMI_Handler</a><BR>
 <LI><a href="#[3f]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[3f]">HardFault_Handler</a><BR>
 <LI><a href="#[40]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[40]">MemManage_Handler</a><BR>
 <LI><a href="#[41]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[41]">BusFault_Handler</a><BR>
 <LI><a href="#[42]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[42]">UsageFault_Handler</a><BR>
 <LI><a href="#[43]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[43]">SVC_Handler</a><BR>
 <LI><a href="#[44]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[44]">DebugMon_Handler</a><BR>
 <LI><a href="#[45]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[45]">PendSV_Handler</a><BR>
 <LI><a href="#[46]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[46]">SysTick_Handler</a><BR>
 <LI><a href="#[59]">ADC1_2_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[59]">ADC1_2_IRQHandler</a><BR>
 <LI><a href="#[305]">SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[305]">SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)</a><BR>
 <LI><a href="#[2d3]">TestPlugin::getPluginByName(const SimpleString&)</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2d3]">TestPlugin::getPluginByName(const SimpleString&)</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[94]">&lang;Func64&rang;</a> from simplestring.o(i.<Func64>) referenced from simplestring.o(i._ZN22SimpleStringCollection8allocateEj)
 <LI><a href="#[59]">ADC1_2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[76]">ADC3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[41]">BusFault_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5c]">CAN1_RX1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5d]">CAN1_SCE_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[52]">DMA1_Channel1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[53]">DMA1_Channel2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[54]">DMA1_Channel3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[55]">DMA1_Channel4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[56]">DMA1_Channel5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[57]">DMA1_Channel6_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[58]">DMA1_Channel7_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[7f]">DMA2_Channel1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[80]">DMA2_Channel2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[81]">DMA2_Channel3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[82]">DMA2_Channel4_5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[44]">DebugMon_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4d]">EXTI0_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6f]">EXTI15_10_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4e]">EXTI1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4f]">EXTI2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[50]">EXTI3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[51]">EXTI4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5e]">EXTI9_5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4b]">FLASH_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[77]">FSMC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3f]">HardFault_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[67]">I2C1_ER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[66]">I2C1_EV_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[69]">I2C2_ER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[68]">I2C2_EV_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[40]">MemManage_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3e]">NMI_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[48]">PVD_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[45]">PendSV_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4c]">RCC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[70]">RTCAlarm_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[4a]">RTC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[3d]">Reset_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[78]">SDIO_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6a]">SPI1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6b]">SPI2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[7a]">SPI3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[43]">SVC_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[46]">SysTick_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[83]">SystemInit</a> from system_stm32f10x.o(i.SystemInit) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[49]">TAMPER_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5f]">TIM1_BRK_TIM9_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[62]">TIM1_CC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[61]">TIM1_TRG_COM_TIM11_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[60]">TIM1_UP_TIM10_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[63]">TIM2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[64]">TIM3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[65]">TIM4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[79]">TIM5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[7d]">TIM6_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[7e]">TIM7_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[72]">TIM8_BRK_TIM12_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[75]">TIM8_CC_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[74]">TIM8_TRG_COM_TIM14_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[73]">TIM8_UP_TIM13_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[7b]">UART4_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[7c]">UART5_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6c]">USART1_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6d]">USART2_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[6e]">USART3_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[71]">USBWakeUp_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5a]">USB_HP_CAN1_TX_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[5b]">USB_LP_CAN1_RX0_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[42]">UsageFault_Handler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[47]">WWDG_IRQHandler</a> from startup_stm32f10x_xl.o(.text) referenced from startup_stm32f10x_xl.o(RESET)
 <LI><a href="#[a0]">normal_free(void*, const char*, unsigned)</a> from memoryleakwarningplugin.o(i._Z11normal_freePvPKcj) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[15]">mem_leak_free(void*, const char*, unsigned)</a> from memoryleakwarningplugin.o(i._Z13mem_leak_freePvPKcj) referenced 4 times from memoryleakwarningplugin.o(.data)
 <LI><a href="#[9e]">normal_malloc(unsigned, const char*, unsigned)</a> from memoryleakwarningplugin.o(i._Z13normal_mallocjPKcj) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[38]">DummyMutexLock(void*)</a> from utestplatform.o(i._Z14DummyMutexLockPv) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[9f]">normal_realloc(void*, unsigned, const char*, unsigned)</a> from memoryleakwarningplugin.o(i._Z14normal_reallocPvjPKcj) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[14]">mem_leak_malloc(unsigned, const char*, unsigned)</a> from memoryleakwarningplugin.o(i._Z15mem_leak_mallocjPKcj) referenced 4 times from memoryleakwarningplugin.o(.data)
 <LI><a href="#[37]">DummyMutexCreate()</a> from utestplatform.o(i._Z16DummyMutexCreatev) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[39]">DummyMutexUnlock(void*)</a> from utestplatform.o(i._Z16DummyMutexUnlockPv) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[a2]">helperDoTestBody(void*)</a> from utest.o(i._Z16helperDoTestBodyPv) referenced from utest.o(i._ZN5Utest3runEv)
 <LI><a href="#[16]">mem_leak_realloc(void*, unsigned, const char*, unsigned)</a> from memoryleakwarningplugin.o(i._Z16mem_leak_reallocPvjPKcj) referenced 4 times from memoryleakwarningplugin.o(.data)
 <LI><a href="#[3a]">DummyMutexDestroy(void*)</a> from utestplatform.o(i._Z17DummyMutexDestroyPv) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[a1]">helperDoTestSetup(void*)</a> from utest.o(i._Z17helperDoTestSetupPv) referenced from utest.o(i._ZN5Utest3runEv)
 <LI><a href="#[1f]">defaultCrashMethod()</a> from utest.o(i._Z18defaultCrashMethodv) referenced 2 times from utest.o(.data)
 <LI><a href="#[35]">IsInfImplementation(double)</a> from utestplatform.o(i._Z19IsInfImplementationd) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[34]">IsNanImplementation(double)</a> from utestplatform.o(i._Z19IsNanImplementationd) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[96]">normal_operator_new(unsigned)</a> from memoryleakwarningplugin.o(i._Z19normal_operator_newj) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[a3]">helperDoTestTeardown(void*)</a> from utest.o(i._Z20helperDoTestTeardownPv) referenced from utest.o(i._ZN5Utest3runEv)
 <LI><a href="#[17]">mem_leak_operator_new(unsigned)</a> from memoryleakwarningplugin.o(i._Z21mem_leak_operator_newj) referenced 4 times from memoryleakwarningplugin.o(.data)
 <LI><a href="#[17]">mem_leak_operator_new(unsigned)</a> from memoryleakwarningplugin.o(i._Z21mem_leak_operator_newj) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv)
 <LI><a href="#[9c]">normal_operator_delete(void*)</a> from memoryleakwarningplugin.o(i._Z22normal_operator_deletePv) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[27]">TimeStringImplementation()</a> from utestplatform.o(i._Z24TimeStringImplementationv) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[1d]">mem_leak_operator_delete(void*)</a> from memoryleakwarningplugin.o(i._Z24mem_leak_operator_deletePv) referenced 4 times from memoryleakwarningplugin.o(.data)
 <LI><a href="#[21]">DummyPlatformSpecificFork()</a> from utestplatform.o(i._Z25DummyPlatformSpecificForkv) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[99]">normal_operator_new_array(unsigned)</a> from memoryleakwarningplugin.o(i._Z25normal_operator_new_arrayj) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[98]">normal_operator_new_debug(unsigned, const char*, unsigned)</a> from memoryleakwarningplugin.o(i._Z25normal_operator_new_debugjPKcj) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[26]">TimeInMillisImplementation()</a> from utestplatform.o(i._Z26TimeInMillisImplementationv) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[1a]">mem_leak_operator_new_array(unsigned)</a> from memoryleakwarningplugin.o(i._Z27mem_leak_operator_new_arrayj) referenced 4 times from memoryleakwarningplugin.o(.data)
 <LI><a href="#[19]">mem_leak_operator_new_debug(unsigned, const char*, unsigned)</a> from memoryleakwarningplugin.o(i._Z27mem_leak_operator_new_debugjPKcj) referenced 4 times from memoryleakwarningplugin.o(.data)
 <LI><a href="#[97]">normal_operator_new_nothrow(unsigned)</a> from memoryleakwarningplugin.o(i._Z27normal_operator_new_nothrowj) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[22]">DummyPlatformSpecificWaitPid(int, int*, int)</a> from utestplatform.o(i._Z28DummyPlatformSpecificWaitPidiPii) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[9d]">normal_operator_delete_array(void*)</a> from memoryleakwarningplugin.o(i._Z28normal_operator_delete_arrayPv) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[18]">mem_leak_operator_new_nothrow(unsigned)</a> from memoryleakwarningplugin.o(i._Z29mem_leak_operator_new_nothrowj) referenced 4 times from memoryleakwarningplugin.o(.data)
 <LI><a href="#[1e]">mem_leak_operator_delete_array(void*)</a> from memoryleakwarningplugin.o(i._Z30mem_leak_operator_delete_arrayPv) referenced 4 times from memoryleakwarningplugin.o(.data)
 <LI><a href="#[9b]">normal_operator_new_array_debug(unsigned, const char*, unsigned)</a> from memoryleakwarningplugin.o(i._Z31normal_operator_new_array_debugjPKcj) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[95]">threadsafe_mem_leak_operator_new(unsigned)</a> from memoryleakwarningplugin.o(i._Z32threadsafe_mem_leak_operator_newj) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv)
 <LI><a href="#[8c]">helperDoRunOneTestSeperateProcess(void*)</a> from utest.o(i._Z33helperDoRunOneTestSeperateProcessPv) referenced from utest.o(i._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult)
 <LI><a href="#[1c]">mem_leak_operator_new_array_debug(unsigned, const char*, unsigned)</a> from memoryleakwarningplugin.o(i._Z33mem_leak_operator_new_array_debugjPKcj) referenced 4 times from memoryleakwarningplugin.o(.data)
 <LI><a href="#[9a]">normal_operator_new_array_nothrow(unsigned)</a> from memoryleakwarningplugin.o(i._Z33normal_operator_new_array_nothrowj) referenced from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
 <LI><a href="#[8d]">helperDoRunOneTestInCurrentProcess(void*)</a> from utest.o(i._Z34helperDoRunOneTestInCurrentProcessPv) referenced from utest.o(i._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult)
 <LI><a href="#[29]">PlatformSpecificFOpenImplementation(const char*, const char*)</a> from utestplatform.o(i._Z35PlatformSpecificFOpenImplementationPKcS0_) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[2a]">PlatformSpecificFPutsImplementation(const char*, void*)</a> from utestplatform.o(i._Z35PlatformSpecificFPutsImplementationPKcPv) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[2d]">PlatformSpecificFlushImplementation()</a> from utestplatform.o(i._Z35PlatformSpecificFlushImplementationv) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[1b]">mem_leak_operator_new_array_nothrow(unsigned)</a> from memoryleakwarningplugin.o(i._Z35mem_leak_operator_new_array_nothrowj) referenced 4 times from memoryleakwarningplugin.o(.data)
 <LI><a href="#[2b]">PlatformSpecificFCloseImplementation(void*)</a> from utestplatform.o(i._Z36PlatformSpecificFCloseImplementationPv) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[24]">PlatformSpecificSetJmpImplementation(void(*)(void*), void*)</a> from utestplatform.o(i._Z36PlatformSpecificSetJmpImplementationPFYvPvES_) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[23]">PlatformSpecificLongJmpImplementation()</a> from utestplatform.o(i._Z37PlatformSpecificLongJmpImplementationv) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[20]">DummyPlatformSpecificRunTestInASeperateProcess(UtestShell*, TestPlugin*, TestResult*)</a> from utestplatform.o(i._Z46DummyPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[25]">PlatformSpecificRestoreJumpBufferImplementation()</a> from utestplatform.o(i._Z47PlatformSpecificRestoreJumpBufferImplementationv) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[b6]">TestOutput::printDouble(double)</a> from testoutput.o(i._ZN10TestOutput11printDoubleEd) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[b6]">TestOutput::printDouble(double)</a> from testoutput.o(i._ZN10TestOutput11printDoubleEd) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[b6]">TestOutput::printDouble(double)</a> from testoutput.o(i._ZN10TestOutput11printDoubleEd) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[b6]">TestOutput::printDouble(double)</a> from testoutput.o(i._ZN10TestOutput11printDoubleEd) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[b7]">TestOutput::printFailure(const TestFailure&)</a> from testoutput.o(i._ZN10TestOutput12printFailureERK11TestFailure) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[b7]">TestOutput::printFailure(const TestFailure&)</a> from testoutput.o(i._ZN10TestOutput12printFailureERK11TestFailure) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[b8]">TestOutput::printTestRun(unsigned, unsigned)</a> from testoutput.o(i._ZN10TestOutput12printTestRunEjj) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[b8]">TestOutput::printTestRun(unsigned, unsigned)</a> from testoutput.o(i._ZN10TestOutput12printTestRunEjj) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[b8]">TestOutput::printTestRun(unsigned, unsigned)</a> from testoutput.o(i._ZN10TestOutput12printTestRunEjj) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[b8]">TestOutput::printTestRun(unsigned, unsigned)</a> from testoutput.o(i._ZN10TestOutput12printTestRunEjj) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[b8]">TestOutput::printTestRun(unsigned, unsigned)</a> from testoutput.o(i._ZN10TestOutput12printTestRunEjj) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[ab]">TestOutput::printTestsEnded(const TestResult&)</a> from testoutput.o(i._ZN10TestOutput15printTestsEndedERK10TestResult) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[ab]">TestOutput::printTestsEnded(const TestResult&)</a> from testoutput.o(i._ZN10TestOutput15printTestsEndedERK10TestResult) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[ab]">TestOutput::printTestsEnded(const TestResult&)</a> from testoutput.o(i._ZN10TestOutput15printTestsEndedERK10TestResult) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[ba]">TestOutput::printVeryVerbose(const char*)</a> from testoutput.o(i._ZN10TestOutput16printVeryVerboseEPKc) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[ba]">TestOutput::printVeryVerbose(const char*)</a> from testoutput.o(i._ZN10TestOutput16printVeryVerboseEPKc) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[ba]">TestOutput::printVeryVerbose(const char*)</a> from testoutput.o(i._ZN10TestOutput16printVeryVerboseEPKc) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[ba]">TestOutput::printVeryVerbose(const char*)</a> from testoutput.o(i._ZN10TestOutput16printVeryVerboseEPKc) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[ba]">TestOutput::printVeryVerbose(const char*)</a> from testoutput.o(i._ZN10TestOutput16printVeryVerboseEPKc) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[aa]">TestOutput::printTestsStarted()</a> from testoutput.o(i._ZN10TestOutput17printTestsStartedEv) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[aa]">TestOutput::printTestsStarted()</a> from testoutput.o(i._ZN10TestOutput17printTestsStartedEv) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[aa]">TestOutput::printTestsStarted()</a> from testoutput.o(i._ZN10TestOutput17printTestsStartedEv) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[b9]">TestOutput::setProgressIndicator(const char*)</a> from testoutput.o(i._ZN10TestOutput20setProgressIndicatorEPKc) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[b9]">TestOutput::setProgressIndicator(const char*)</a> from testoutput.o(i._ZN10TestOutput20setProgressIndicatorEPKc) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[b9]">TestOutput::setProgressIndicator(const char*)</a> from testoutput.o(i._ZN10TestOutput20setProgressIndicatorEPKc) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[b9]">TestOutput::setProgressIndicator(const char*)</a> from testoutput.o(i._ZN10TestOutput20setProgressIndicatorEPKc) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[ad]">TestOutput::printCurrentTestEnded(const TestResult&)</a> from testoutput.o(i._ZN10TestOutput21printCurrentTestEndedERK10TestResult) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[ad]">TestOutput::printCurrentTestEnded(const TestResult&)</a> from testoutput.o(i._ZN10TestOutput21printCurrentTestEndedERK10TestResult) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[af]">TestOutput::printCurrentGroupEnded(const TestResult&)</a> from testoutput.o(i._ZN10TestOutput22printCurrentGroupEndedERK10TestResult) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[af]">TestOutput::printCurrentGroupEnded(const TestResult&)</a> from testoutput.o(i._ZN10TestOutput22printCurrentGroupEndedERK10TestResult) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[bd]">TestOutput::printProgressIndicator()</a> from testoutput.o(i._ZN10TestOutput22printProgressIndicatorEv) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[bd]">TestOutput::printProgressIndicator()</a> from testoutput.o(i._ZN10TestOutput22printProgressIndicatorEv) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[bd]">TestOutput::printProgressIndicator()</a> from testoutput.o(i._ZN10TestOutput22printProgressIndicatorEv) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[bd]">TestOutput::printProgressIndicator()</a> from testoutput.o(i._ZN10TestOutput22printProgressIndicatorEv) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[bd]">TestOutput::printProgressIndicator()</a> from testoutput.o(i._ZN10TestOutput22printProgressIndicatorEv) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[ac]">TestOutput::printCurrentTestStarted(const UtestShell&)</a> from testoutput.o(i._ZN10TestOutput23printCurrentTestStartedERK10UtestShell) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[ac]">TestOutput::printCurrentTestStarted(const UtestShell&)</a> from testoutput.o(i._ZN10TestOutput23printCurrentTestStartedERK10UtestShell) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[ae]">TestOutput::printCurrentGroupStarted(const UtestShell&)</a> from testoutput.o(i._ZN10TestOutput24printCurrentGroupStartedERK10UtestShell) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[ae]">TestOutput::printCurrentGroupStarted(const UtestShell&)</a> from testoutput.o(i._ZN10TestOutput24printCurrentGroupStartedERK10UtestShell) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[bb]">TestOutput::printEclipseErrorInFileOnLine(SimpleString, unsigned)</a> from testoutput.o(i._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[bb]">TestOutput::printEclipseErrorInFileOnLine(SimpleString, unsigned)</a> from testoutput.o(i._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[bb]">TestOutput::printEclipseErrorInFileOnLine(SimpleString, unsigned)</a> from testoutput.o(i._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[bb]">TestOutput::printEclipseErrorInFileOnLine(SimpleString, unsigned)</a> from testoutput.o(i._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[bb]">TestOutput::printEclipseErrorInFileOnLine(SimpleString, unsigned)</a> from testoutput.o(i._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[bc]">TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, unsigned)</a> from testoutput.o(i._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[bc]">TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, unsigned)</a> from testoutput.o(i._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[bc]">TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, unsigned)</a> from testoutput.o(i._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[bc]">TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, unsigned)</a> from testoutput.o(i._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[bc]">TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, unsigned)</a> from testoutput.o(i._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[b1]">TestOutput::color()</a> from testoutput.o(i._ZN10TestOutput5colorEv) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[b1]">TestOutput::color()</a> from testoutput.o(i._ZN10TestOutput5colorEv) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[b1]">TestOutput::color()</a> from testoutput.o(i._ZN10TestOutput5colorEv) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[b1]">TestOutput::color()</a> from testoutput.o(i._ZN10TestOutput5colorEv) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[b3]">TestOutput::print(const char*)</a> from testoutput.o(i._ZN10TestOutput5printEPKc) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[b3]">TestOutput::print(const char*)</a> from testoutput.o(i._ZN10TestOutput5printEPKc) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[b3]">TestOutput::print(const char*)</a> from testoutput.o(i._ZN10TestOutput5printEPKc) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[b5]">TestOutput::print(unsigned)</a> from testoutput.o(i._ZN10TestOutput5printEj) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[b5]">TestOutput::print(unsigned)</a> from testoutput.o(i._ZN10TestOutput5printEj) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[b5]">TestOutput::print(unsigned)</a> from testoutput.o(i._ZN10TestOutput5printEj) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[b4]">TestOutput::print(long)</a> from testoutput.o(i._ZN10TestOutput5printEl) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[b4]">TestOutput::print(long)</a> from testoutput.o(i._ZN10TestOutput5printEl) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[b4]">TestOutput::print(long)</a> from testoutput.o(i._ZN10TestOutput5printEl) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[b0]">TestOutput::verbose(TestOutput::VerbosityLevel)</a> from testoutput.o(i._ZN10TestOutput7verboseENS_14VerbosityLevelE) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[b0]">TestOutput::verbose(TestOutput::VerbosityLevel)</a> from testoutput.o(i._ZN10TestOutput7verboseENS_14VerbosityLevelE) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[b0]">TestOutput::verbose(TestOutput::VerbosityLevel)</a> from testoutput.o(i._ZN10TestOutput7verboseENS_14VerbosityLevelE) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[b0]">TestOutput::verbose(TestOutput::VerbosityLevel)</a> from testoutput.o(i._ZN10TestOutput7verboseENS_14VerbosityLevelE) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[a9]">TestOutput::~TestOutput__deallocating()</a> from testoutput.o(i._ZN10TestOutputD0Ev) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[a8]">TestOutput::~TestOutput__sub_object()</a> from testoutput.o(i._ZN10TestOutputD2Ev) referenced from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[c0]">TestPlugin::preTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN10TestPlugin13preTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[c0]">TestPlugin::preTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN10TestPlugin13preTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[c0]">TestPlugin::preTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN10TestPlugin13preTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[c2]">TestPlugin::parseArguments(int, const char*const *, int)</a> from memoryleakwarningplugin.o(i._ZN10TestPlugin14parseArgumentsEiPKPKci) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[c2]">TestPlugin::parseArguments(int, const char*const *, int)</a> from memoryleakwarningplugin.o(i._ZN10TestPlugin14parseArgumentsEiPKPKci) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[c2]">TestPlugin::parseArguments(int, const char*const *, int)</a> from memoryleakwarningplugin.o(i._ZN10TestPlugin14parseArgumentsEiPKPKci) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[c2]">TestPlugin::parseArguments(int, const char*const *, int)</a> from memoryleakwarningplugin.o(i._ZN10TestPlugin14parseArgumentsEiPKPKci) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c1]">TestPlugin::postTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN10TestPlugin14postTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[c1]">TestPlugin::postTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN10TestPlugin14postTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[c5]">TestPlugin::parseAllArguments(int, const char*const *, int)</a> from testplugin.o(i._ZN10TestPlugin17parseAllArgumentsEiPKPKci) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[c5]">TestPlugin::parseAllArguments(int, const char*const *, int)</a> from testplugin.o(i._ZN10TestPlugin17parseAllArgumentsEiPKPKci) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[c5]">TestPlugin::parseAllArguments(int, const char*const *, int)</a> from testplugin.o(i._ZN10TestPlugin17parseAllArgumentsEiPKPKci) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[c5]">TestPlugin::parseAllArguments(int, const char*const *, int)</a> from testplugin.o(i._ZN10TestPlugin17parseAllArgumentsEiPKPKci) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c6]">TestPlugin::parseAllArguments(int, char**, int)</a> from testplugin.o(i._ZN10TestPlugin17parseAllArgumentsEiPPci) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[c6]">TestPlugin::parseAllArguments(int, char**, int)</a> from testplugin.o(i._ZN10TestPlugin17parseAllArgumentsEiPPci) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[c6]">TestPlugin::parseAllArguments(int, char**, int)</a> from testplugin.o(i._ZN10TestPlugin17parseAllArgumentsEiPPci) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[c6]">TestPlugin::parseAllArguments(int, char**, int)</a> from testplugin.o(i._ZN10TestPlugin17parseAllArgumentsEiPPci) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c8]">TestPlugin::removePluginByName(const SimpleString&)</a> from testplugin.o(i._ZN10TestPlugin18removePluginByNameERK12SimpleString) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[c8]">TestPlugin::removePluginByName(const SimpleString&)</a> from testplugin.o(i._ZN10TestPlugin18removePluginByNameERK12SimpleString) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[c8]">TestPlugin::removePluginByName(const SimpleString&)</a> from testplugin.o(i._ZN10TestPlugin18removePluginByNameERK12SimpleString) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[c8]">TestPlugin::removePluginByName(const SimpleString&)</a> from testplugin.o(i._ZN10TestPlugin18removePluginByNameERK12SimpleString) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c3]">TestPlugin::runAllPreTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[c3]">TestPlugin::runAllPreTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[c3]">TestPlugin::runAllPreTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c4]">TestPlugin::runAllPostTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[c4]">TestPlugin::runAllPostTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[c4]">TestPlugin::runAllPostTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[cb]">TestPlugin::enable()</a> from testplugin.o(i._ZN10TestPlugin6enableEv) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[cb]">TestPlugin::enable()</a> from testplugin.o(i._ZN10TestPlugin6enableEv) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[cb]">TestPlugin::enable()</a> from testplugin.o(i._ZN10TestPlugin6enableEv) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[cb]">TestPlugin::enable()</a> from testplugin.o(i._ZN10TestPlugin6enableEv) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[ca]">TestPlugin::disable()</a> from testplugin.o(i._ZN10TestPlugin7disableEv) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[ca]">TestPlugin::disable()</a> from testplugin.o(i._ZN10TestPlugin7disableEv) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[ca]">TestPlugin::disable()</a> from testplugin.o(i._ZN10TestPlugin7disableEv) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[ca]">TestPlugin::disable()</a> from testplugin.o(i._ZN10TestPlugin7disableEv) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c9]">TestPlugin::getNext()</a> from testplugin.o(i._ZN10TestPlugin7getNextEv) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[c9]">TestPlugin::getNext()</a> from testplugin.o(i._ZN10TestPlugin7getNextEv) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[c9]">TestPlugin::getNext()</a> from testplugin.o(i._ZN10TestPlugin7getNextEv) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[c9]">TestPlugin::getNext()</a> from testplugin.o(i._ZN10TestPlugin7getNextEv) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[c7]">TestPlugin::addPlugin(TestPlugin*)</a> from testplugin.o(i._ZN10TestPlugin9addPluginEPS_) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[c7]">TestPlugin::addPlugin(TestPlugin*)</a> from testplugin.o(i._ZN10TestPlugin9addPluginEPS_) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[c7]">TestPlugin::addPlugin(TestPlugin*)</a> from testplugin.o(i._ZN10TestPlugin9addPluginEPS_) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[c7]">TestPlugin::addPlugin(TestPlugin*)</a> from testplugin.o(i._ZN10TestPlugin9addPluginEPS_) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[cc]">TestPlugin::isEnabled()</a> from testplugin.o(i._ZN10TestPlugin9isEnabledEv) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[cc]">TestPlugin::isEnabled()</a> from testplugin.o(i._ZN10TestPlugin9isEnabledEv) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[cc]">TestPlugin::isEnabled()</a> from testplugin.o(i._ZN10TestPlugin9isEnabledEv) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[cc]">TestPlugin::isEnabled()</a> from testplugin.o(i._ZN10TestPlugin9isEnabledEv) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[bf]">TestPlugin::~TestPlugin__deallocating()</a> from testplugin.o(i._ZN10TestPluginD0Ev) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[be]">TestPlugin::~TestPlugin()</a> from testplugin.o(i._ZN10TestPluginD1Ev) referenced from testplugin.o(.constdata__ZTV10TestPlugin)
 <LI><a href="#[da]">TestResult::addFailure(const TestFailure&)</a> from testresult.o(i._ZN10TestResult10addFailureERK11TestFailure) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[d7]">TestResult::countCheck()</a> from testresult.o(i._ZN10TestResult10countCheckEv) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[d0]">TestResult::testsEnded()</a> from testresult.o(i._ZN10TestResult10testsEndedEv) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[d9]">TestResult::countIgnored()</a> from testresult.o(i._ZN10TestResult12countIgnoredEv) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[cf]">TestResult::testsStarted()</a> from testresult.o(i._ZN10TestResult12testsStartedEv) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[d8]">TestResult::countFilteredOut()</a> from testresult.o(i._ZN10TestResult16countFilteredOutEv) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[d4]">TestResult::currentTestEnded(UtestShell*)</a> from testresult.o(i._ZN10TestResult16currentTestEndedEP10UtestShell) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[dc]">TestResult::printVeryVerbose(const char*)</a> from testresult.o(i._ZN10TestResult16printVeryVerboseEPKc) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[d2]">TestResult::currentGroupEnded(UtestShell*)</a> from testresult.o(i._ZN10TestResult17currentGroupEndedEP10UtestShell) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[d3]">TestResult::currentTestStarted(UtestShell*)</a> from testresult.o(i._ZN10TestResult18currentTestStartedEP10UtestShell) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[d1]">TestResult::currentGroupStarted(UtestShell*)</a> from testresult.o(i._ZN10TestResult19currentGroupStartedEP10UtestShell) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[db]">TestResult::print(const char*)</a> from testresult.o(i._ZN10TestResult5printEPKc) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[d6]">TestResult::countRun()</a> from testresult.o(i._ZN10TestResult8countRunEv) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[d5]">TestResult::countTest()</a> from testresult.o(i._ZN10TestResult9countTestEv) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[ce]">TestResult::~TestResult__deallocating()</a> from testresult.o(i._ZN10TestResultD0Ev) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[cd]">TestResult::~TestResult()</a> from testresult.o(i._ZN10TestResultD1Ev) referenced from testresult.o(.constdata__ZTV10TestResult)
 <LI><a href="#[e5]">UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[e5]">UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e5]">UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[e1]">UtestShell::countTests()</a> from utest.o(i._ZN10UtestShell10countTestsEv) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[e1]">UtestShell::countTests()</a> from utest.o(i._ZN10UtestShell10countTestsEv) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e1]">UtestShell::countTests()</a> from utest.o(i._ZN10UtestShell10countTestsEv) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[ff]">UtestShell::createTest()</a> from utest.o(i._ZN10UtestShell10createTestEv) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[ff]">UtestShell::createTest()</a> from utest.o(i._ZN10UtestShell10createTestEv) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[101]">UtestShell::runOneTest(TestPlugin*, TestResult&)</a> from utest.o(i._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[101]">UtestShell::runOneTest(TestPlugin*, TestResult&)</a> from utest.o(i._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[101]">UtestShell::runOneTest(TestPlugin*, TestResult&)</a> from utest.o(i._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[100]">UtestShell::destroyTest(Utest*)</a> from utest.o(i._ZN10UtestShell11destroyTestEP5Utest) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[100]">UtestShell::destroyTest(Utest*)</a> from utest.o(i._ZN10UtestShell11destroyTestEP5Utest) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[100]">UtestShell::destroyTest(Utest*)</a> from utest.o(i._ZN10UtestShell11destroyTestEP5Utest) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[f3]">UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[f3]">UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f3]">UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[f6]">UtestShell::assertCompare(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[f6]">UtestShell::assertCompare(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f6]">UtestShell::assertCompare(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[fe]">UtestShell::setRunIgnored()</a> from utest.o(i._ZN10UtestShell13setRunIgnoredEv) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[fe]">UtestShell::setRunIgnored()</a> from utest.o(i._ZN10UtestShell13setRunIgnoredEv) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[fe]">UtestShell::setRunIgnored()</a> from utest.o(i._ZN10UtestShell13setRunIgnoredEv) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[f5]">UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[f5]">UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f5]">UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[e6]">UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[e6]">UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e6]">UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[e7]">UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[e7]">UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e7]">UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[eb]">UtestShell::assertLongsEqual(long, long, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[eb]">UtestShell::assertLongsEqual(long, long, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[eb]">UtestShell::assertLongsEqual(long, long, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[fb]">UtestShell::printVeryVerbose(const char*)</a> from utest.o(i._ZN10UtestShell16printVeryVerboseEPKc) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[fb]">UtestShell::printVeryVerbose(const char*)</a> from utest.o(i._ZN10UtestShell16printVeryVerboseEPKc) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[fb]">UtestShell::printVeryVerbose(const char*)</a> from utest.o(i._ZN10UtestShell16printVeryVerboseEPKc) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[f4]">UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[f4]">UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f4]">UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[e9]">UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[e9]">UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e9]">UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[f2]">UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[f2]">UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f2]">UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[f0]">UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[f0]">UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f0]">UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[ed]">UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell20assertLongLongsEqualExxPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[ed]">UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell20assertLongLongsEqualExxPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[ed]">UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell20assertLongLongsEqualExxPKcS1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[e8]">UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[e8]">UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e8]">UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[ef]">UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[ef]">UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[ef]">UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[fd]">UtestShell::setRunInSeperateProcess()</a> from utest.o(i._ZN10UtestShell23setRunInSeperateProcessEv) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[fd]">UtestShell::setRunInSeperateProcess()</a> from utest.o(i._ZN10UtestShell23setRunInSeperateProcessEv) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[fd]">UtestShell::setRunInSeperateProcess()</a> from utest.o(i._ZN10UtestShell23setRunInSeperateProcessEv) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[ea]">UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[ea]">UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[ea]">UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[ec]">UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[ec]">UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[ec]">UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[102]">UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)</a> from utest.o(i._ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[102]">UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)</a> from utest.o(i._ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[102]">UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)</a> from utest.o(i._ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[f1]">UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[f1]">UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f1]">UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[ee]">UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell28assertUnsignedLongLongsEqualEyyPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[ee]">UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell28assertUnsignedLongLongsEqualEyyPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[ee]">UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell28assertUnsignedLongLongsEqualEyyPKcS1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[f7]">UtestShell::fail(const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell4failEPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[f7]">UtestShell::fail(const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell4failEPKcS1_jRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f7]">UtestShell::fail(const char*, const char*, unsigned, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell4failEPKcS1_jRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[f9]">UtestShell::print(const char*, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell5printEPKcS1_j) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[f9]">UtestShell::print(const char*, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell5printEPKcS1_j) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f9]">UtestShell::print(const char*, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell5printEPKcS1_j) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[fa]">UtestShell::print(const SimpleString&, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell5printERK12SimpleStringPKcj) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[fa]">UtestShell::print(const SimpleString&, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell5printERK12SimpleStringPKcj) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[fa]">UtestShell::print(const SimpleString&, const char*, unsigned)</a> from utest.o(i._ZN10UtestShell5printERK12SimpleStringPKcj) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[df]">UtestShell::addTest(UtestShell*)</a> from utest.o(i._ZN10UtestShell7addTestEPS_) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[df]">UtestShell::addTest(UtestShell*)</a> from utest.o(i._ZN10UtestShell7addTestEPS_) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[df]">UtestShell::addTest(UtestShell*)</a> from utest.o(i._ZN10UtestShell7addTestEPS_) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[f8]">UtestShell::exitTest(const TestTerminator&)</a> from utest.o(i._ZN10UtestShell8exitTestERK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[f8]">UtestShell::exitTest(const TestTerminator&)</a> from utest.o(i._ZN10UtestShell8exitTestERK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[f8]">UtestShell::exitTest(const TestTerminator&)</a> from utest.o(i._ZN10UtestShell8exitTestERK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[103]">UtestShell::failWith(const TestFailure&)</a> from utest.o(i._ZN10UtestShell8failWithERK11TestFailure) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[103]">UtestShell::failWith(const TestFailure&)</a> from utest.o(i._ZN10UtestShell8failWithERK11TestFailure) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[103]">UtestShell::failWith(const TestFailure&)</a> from utest.o(i._ZN10UtestShell8failWithERK11TestFailure) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[104]">UtestShell::failWith(const TestFailure&, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[104]">UtestShell::failWith(const TestFailure&, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[104]">UtestShell::failWith(const TestFailure&, const TestTerminator&)</a> from utest.o(i._ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[de]">UtestShell::~UtestShell__deallocating()</a> from utest.o(i._ZN10UtestShellD0Ev) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[dd]">UtestShell::~UtestShell()</a> from utest.o(i._ZN10UtestShellD1Ev) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[1c4]">__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</a> from lib_rtti_impl.o(i._ZN10__cxxabiv117__class_type_infoD0Ev) referenced from lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[1c3]">__cxxabiv1::__class_type_info::~__class_type_info()</a> from lib_rtti_impl.o(i._ZN10__cxxabiv117__class_type_infoD1Ev) referenced from lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv117__class_type_infoE)
 <LI><a href="#[1c6]">__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</a> from lib_rtti_impl.o(i._ZN10__cxxabiv120__si_class_type_infoD0Ev) referenced from lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[1c5]">__cxxabiv1::__si_class_type_info::~__si_class_type_info()</a> from lib_rtti_impl.o(i._ZN10__cxxabiv120__si_class_type_infoD1Ev) referenced from lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv120__si_class_type_infoE)
 <LI><a href="#[107]">FailFailure::~FailFailure__deallocating()</a> from testfailure.o(i._ZN11FailFailureD0Ev) referenced from testfailure.o(.constdata__ZTV11FailFailure)
 <LI><a href="#[106]">FailFailure::~FailFailure()</a> from memoryleakwarningplugin.o(i._ZN11FailFailureD1Ev) referenced from testfailure.o(.constdata__ZTV11FailFailure)
 <LI><a href="#[110]">TestFailure::~TestFailure__deallocating()</a> from testfailure.o(i._ZN11TestFailureD0Ev) referenced from testfailure.o(.constdata__ZTV11TestFailure)
 <LI><a href="#[10f]">TestFailure::~TestFailure()</a> from testfailure.o(i._ZN11TestFailureD1Ev) referenced from testfailure.o(.constdata__ZTV11TestFailure)
 <LI><a href="#[112]">CheckFailure::~CheckFailure__deallocating()</a> from testfailure.o(i._ZN12CheckFailureD0Ev) referenced from testfailure.o(.constdata__ZTV12CheckFailure)
 <LI><a href="#[111]">CheckFailure::~CheckFailure()</a> from utest.o(i._ZN12CheckFailureD1Ev) referenced from testfailure.o(.constdata__ZTV12CheckFailure)
 <LI><a href="#[93]">SimpleString::~SimpleString()</a> from simplestring.o(i._ZN12SimpleStringD1Ev) referenced from simplestring.o(i._ZN22SimpleStringCollection8allocateEj)
 <LI><a href="#[93]">SimpleString::~SimpleString()</a> from simplestring.o(i._ZN12SimpleStringD1Ev) referenced from simplestring.o(i._ZN22SimpleStringCollectionD1Ev)
 <LI><a href="#[116]">TestRegistry::countTests()</a> from testregistry.o(i._ZN12TestRegistry10countTestsEv) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[117]">TestRegistry::runAllTests(TestResult&)</a> from testregistry.o(i._ZN12TestRegistry11runAllTestsER10TestResult) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[124]">TestRegistry::countPlugins()</a> from testregistry.o(i._ZN12TestRegistry12countPluginsEv) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[125]">TestRegistry::getFirstTest()</a> from testregistry.o(i._ZN12TestRegistry12getFirstTestEv) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[120]">TestRegistry::resetPlugins()</a> from testregistry.o(i._ZN12TestRegistry12resetPluginsEv) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[119]">TestRegistry::reverseTests()</a> from testregistry.o(i._ZN12TestRegistry12reverseTestsEv) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[118]">TestRegistry::shuffleTests(unsigned)</a> from testregistry.o(i._ZN12TestRegistry12shuffleTestsEj) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[11f]">TestRegistry::installPlugin(TestPlugin*)</a> from testregistry.o(i._ZN12TestRegistry13installPluginEP10TestPlugin) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[121]">TestRegistry::getFirstPlugin()</a> from testregistry.o(i._ZN12TestRegistry14getFirstPluginEv) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[11d]">TestRegistry::setNameFilters(const TestFilter*)</a> from testregistry.o(i._ZN12TestRegistry14setNameFiltersEPK10TestFilter) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[122]">TestRegistry::getPluginByName(const SimpleString&)</a> from testregistry.o(i._ZN12TestRegistry15getPluginByNameERK12SimpleString) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[126]">TestRegistry::getTestWithNext(UtestShell*)</a> from testregistry.o(i._ZN12TestRegistry15getTestWithNextEP10UtestShell) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[11e]">TestRegistry::setGroupFilters(const TestFilter*)</a> from testregistry.o(i._ZN12TestRegistry15setGroupFiltersEPK10TestFilter) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[115]">TestRegistry::unDoLastAddTest()</a> from testregistry.o(i._ZN12TestRegistry15unDoLastAddTestEv) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[127]">TestRegistry::findTestWithName(const SimpleString&)</a> from testregistry.o(i._ZN12TestRegistry16findTestWithNameERK12SimpleString) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[128]">TestRegistry::findTestWithGroup(const SimpleString&)</a> from testregistry.o(i._ZN12TestRegistry17findTestWithGroupERK12SimpleString) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[11c]">TestRegistry::listTestLocations(TestResult&)</a> from testregistry.o(i._ZN12TestRegistry17listTestLocationsER10TestResult) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[11a]">TestRegistry::listTestGroupNames(TestResult&)</a> from testregistry.o(i._ZN12TestRegistry18listTestGroupNamesER10TestResult) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[123]">TestRegistry::removePluginByName(const SimpleString&)</a> from testregistry.o(i._ZN12TestRegistry18removePluginByNameERK12SimpleString) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[129]">TestRegistry::setCurrentRegistry(TestRegistry*)</a> from testregistry.o(i._ZN12TestRegistry18setCurrentRegistryEPS_) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[11b]">TestRegistry::listTestGroupAndCaseNames(TestResult&)</a> from testregistry.o(i._ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[12a]">TestRegistry::setRunTestsInSeperateProcess()</a> from testregistry.o(i._ZN12TestRegistry28setRunTestsInSeperateProcessEv) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[114]">TestRegistry::addTest(UtestShell*)</a> from testregistry.o(i._ZN12TestRegistry7addTestEP10UtestShell) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[113]">TestRegistry::~TestRegistry__deallocating()</a> from testregistry.o(i._ZN12TestRegistryD0Ev) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[8e]">TestRegistry::~TestRegistry()</a> from testregistry.o(i._ZN12TestRegistryD1Ev) referenced from testregistry.o(.constdata__ZTV12TestRegistry)
 <LI><a href="#[8e]">TestRegistry::~TestRegistry()</a> from testregistry.o(i._ZN12TestRegistryD1Ev) referenced from testregistry.o(i._ZN12TestRegistry18getCurrentRegistryEv)
 <LI><a href="#[12c]">EqualsFailure::~EqualsFailure__deallocating()</a> from testfailure.o(i._ZN13EqualsFailureD0Ev) referenced from testfailure.o(.constdata__ZTV13EqualsFailure)
 <LI><a href="#[12b]">EqualsFailure::~EqualsFailure()</a> from utest.o(i._ZN13EqualsFailureD1Ev) referenced from testfailure.o(.constdata__ZTV13EqualsFailure)
 <LI><a href="#[12d]">TestInstaller::~TestInstaller__deallocating()</a> from utest.o(i._ZN13TestInstallerD0Ev) referenced from utest.o(.constdata__ZTV13TestInstaller)
 <LI><a href="#[a5]">TestInstaller::~TestInstaller()</a> from utest.o(i._ZN13TestInstallerD1Ev) referenced from utest.o(.constdata__ZTV13TestInstaller)
 <LI><a href="#[a5]">TestInstaller::~TestInstaller()</a> from utest.o(i._ZN13TestInstallerD1Ev) referenced from test.o(i.__sti___8_test_cpp_fe8858fa)
 <LI><a href="#[12f]">NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[130]">NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[12e]">NullTestPlugin::~NullTestPlugin__deallocating()</a> from testplugin.o(i._ZN14NullTestPluginD0Ev) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[8f]">NullTestPlugin::~NullTestPlugin()</a> from testplugin.o(i._ZN14NullTestPluginD1Ev) referenced from testplugin.o(.constdata__ZTV14NullTestPlugin)
 <LI><a href="#[8f]">NullTestPlugin::~NullTestPlugin()</a> from testplugin.o(i._ZN14NullTestPluginD1Ev) referenced from testplugin.o(i._ZN14NullTestPlugin8instanceEv)
 <LI><a href="#[132]">TestTerminator::~TestTerminator__deallocating()</a> from utest.o(i._ZN14TestTerminatorD0Ev) referenced from utest.o(.constdata__ZTV14TestTerminator)
 <LI><a href="#[131]">TestTerminator::~TestTerminator__sub_object()</a> from utest.o(i._ZN14TestTerminatorD2Ev) referenced from utest.o(.constdata__ZTV14TestTerminator)
 <LI><a href="#[134]">ContainsFailure::~ContainsFailure__deallocating()</a> from testfailure.o(i._ZN15ContainsFailureD0Ev) referenced from testfailure.o(.constdata__ZTV15ContainsFailure)
 <LI><a href="#[133]">ContainsFailure::~ContainsFailure()</a> from utest.o(i._ZN15ContainsFailureD1Ev) referenced from testfailure.o(.constdata__ZTV15ContainsFailure)
 <LI><a href="#[13d]">JUnitTestOutput::printBuffer(const char*)</a> from junittestoutput.o(i._ZN15JUnitTestOutput11printBufferEPKc) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[146]">JUnitTestOutput::writeToFile(const SimpleString&)</a> from junittestoutput.o(i._ZN15JUnitTestOutput11writeToFileERK12SimpleString) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[141]">JUnitTestOutput::printFailure(const TestFailure&)</a> from junittestoutput.o(i._ZN15JUnitTestOutput12printFailureERK11TestFailure) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[14e]">JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)</a> from junittestoutput.o(i._ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[14c]">JUnitTestOutput::encodeXmlText(const SimpleString&)</a> from junittestoutput.o(i._ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[143]">JUnitTestOutput::createFileName(const SimpleString&)</a> from junittestoutput.o(i._ZN15JUnitTestOutput14createFileNameERK12SimpleString) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[14d]">JUnitTestOutput::encodeFileName(const SimpleString&)</a> from junittestoutput.o(i._ZN15JUnitTestOutput14encodeFileNameERK12SimpleString) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[14b]">JUnitTestOutput::writeTestCases()</a> from junittestoutput.o(i._ZN15JUnitTestOutput14writeTestCasesEv) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[148]">JUnitTestOutput::writeXmlHeader()</a> from junittestoutput.o(i._ZN15JUnitTestOutput14writeXmlHeaderEv) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[138]">JUnitTestOutput::printTestsEnded(const TestResult&)</a> from junittestoutput.o(i._ZN15JUnitTestOutput15printTestsEndedERK10TestResult) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[14f]">JUnitTestOutput::writeFileEnding()</a> from junittestoutput.o(i._ZN15JUnitTestOutput15writeFileEndingEv) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[14a]">JUnitTestOutput::writeProperties()</a> from junittestoutput.o(i._ZN15JUnitTestOutput15writePropertiesEv) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[144]">JUnitTestOutput::openFileForWrite(const SimpleString&)</a> from junittestoutput.o(i._ZN15JUnitTestOutput16openFileForWriteERK12SimpleString) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[137]">JUnitTestOutput::printTestsStarted()</a> from junittestoutput.o(i._ZN15JUnitTestOutput17printTestsStartedEv) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[145]">JUnitTestOutput::writeTestGroupToFile()</a> from junittestoutput.o(i._ZN15JUnitTestOutput20writeTestGroupToFileEv) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[13a]">JUnitTestOutput::printCurrentTestEnded(const TestResult&)</a> from junittestoutput.o(i._ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[149]">JUnitTestOutput::writeTestSuiteSummary()</a> from junittestoutput.o(i._ZN15JUnitTestOutput21writeTestSuiteSummaryEv) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[13c]">JUnitTestOutput::printCurrentGroupEnded(const TestResult&)</a> from junittestoutput.o(i._ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[139]">JUnitTestOutput::printCurrentTestStarted(const UtestShell&)</a> from junittestoutput.o(i._ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[13b]">JUnitTestOutput::printCurrentGroupStarted(const UtestShell&)</a> from junittestoutput.o(i._ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[142]">JUnitTestOutput::flush()</a> from junittestoutput.o(i._ZN15JUnitTestOutput5flushEv) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[13e]">JUnitTestOutput::print(const char*)</a> from junittestoutput.o(i._ZN15JUnitTestOutput5printEPKc) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[140]">JUnitTestOutput::print(unsigned)</a> from junittestoutput.o(i._ZN15JUnitTestOutput5printEj) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[13f]">JUnitTestOutput::print(long)</a> from junittestoutput.o(i._ZN15JUnitTestOutput5printEl) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[147]">JUnitTestOutput::closeFile()</a> from junittestoutput.o(i._ZN15JUnitTestOutput9closeFileEv) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[136]">JUnitTestOutput::~JUnitTestOutput__deallocating()</a> from junittestoutput.o(i._ZN15JUnitTestOutputD0Ev) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[135]">JUnitTestOutput::~JUnitTestOutput()</a> from junittestoutput.o(i._ZN15JUnitTestOutputD1Ev) referenced from junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
 <LI><a href="#[151]">BitsEqualFailure::~BitsEqualFailure__deallocating()</a> from testfailure.o(i._ZN16BitsEqualFailureD0Ev) referenced from testfailure.o(.constdata__ZTV16BitsEqualFailure)
 <LI><a href="#[150]">BitsEqualFailure::~BitsEqualFailure()</a> from utest.o(i._ZN16BitsEqualFailureD1Ev) referenced from testfailure.o(.constdata__ZTV16BitsEqualFailure)
 <LI><a href="#[154]">SetPointerPlugin::postTestAction(UtestShell&, TestResult&)</a> from testplugin.o(i._ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[153]">SetPointerPlugin::~SetPointerPlugin__deallocating()</a> from testplugin.o(i._ZN16SetPointerPluginD0Ev) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[152]">SetPointerPlugin::~SetPointerPlugin()</a> from commandlinetestrunner.o(i._ZN16SetPointerPluginD1Ev) referenced from testplugin.o(.constdata__ZTV16SetPointerPlugin)
 <LI><a href="#[156]">CheckEqualFailure::~CheckEqualFailure__deallocating()</a> from testfailure.o(i._ZN17CheckEqualFailureD0Ev) referenced from testfailure.o(.constdata__ZTV17CheckEqualFailure)
 <LI><a href="#[155]">CheckEqualFailure::~CheckEqualFailure()</a> from utest.o(i._ZN17CheckEqualFailureD1Ev) referenced from testfailure.o(.constdata__ZTV17CheckEqualFailure)
 <LI><a href="#[158]">ComparisonFailure::~ComparisonFailure__deallocating()</a> from testfailure.o(i._ZN17ComparisonFailureD0Ev) referenced from testfailure.o(.constdata__ZTV17ComparisonFailure)
 <LI><a href="#[157]">ComparisonFailure::~ComparisonFailure()</a> from utest.o(i._ZN17ComparisonFailureD1Ev) referenced from testfailure.o(.constdata__ZTV17ComparisonFailure)
 <LI><a href="#[15b]">ConsoleTestOutput::printBuffer(const char*)</a> from testoutput.o(i._ZN17ConsoleTestOutput11printBufferEPKc) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[15b]">ConsoleTestOutput::printBuffer(const char*)</a> from testoutput.o(i._ZN17ConsoleTestOutput11printBufferEPKc) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[15c]">ConsoleTestOutput::flush()</a> from testoutput.o(i._ZN17ConsoleTestOutput5flushEv) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[15c]">ConsoleTestOutput::flush()</a> from testoutput.o(i._ZN17ConsoleTestOutput5flushEv) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[15a]">ConsoleTestOutput::~ConsoleTestOutput__deallocating()</a> from testoutput.o(i._ZN17ConsoleTestOutputD0Ev) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[159]">ConsoleTestOutput::~ConsoleTestOutput()</a> from commandlinetestrunner.o(i._ZN17ConsoleTestOutputD1Ev) referenced from testoutput.o(.constdata__ZTV17ConsoleTestOutput)
 <LI><a href="#[15e]">LongsEqualFailure::~LongsEqualFailure__deallocating()</a> from testfailure.o(i._ZN17LongsEqualFailureD0Ev) referenced from testfailure.o(.constdata__ZTV17LongsEqualFailure)
 <LI><a href="#[15d]">LongsEqualFailure::~LongsEqualFailure()</a> from utest.o(i._ZN17LongsEqualFailureD1Ev) referenced from testfailure.o(.constdata__ZTV17LongsEqualFailure)
 <LI><a href="#[160]">MemoryLeakFailure::~MemoryLeakFailure__deallocating()</a> from memoryleakwarningplugin.o(i._ZN17MemoryLeakFailureD0Ev) referenced from memoryleakwarningplugin.o(.constdata__ZTV17MemoryLeakFailure)
 <LI><a href="#[15f]">MemoryLeakFailure::~MemoryLeakFailure__sub_object()</a> from memoryleakwarningplugin.o(i._ZN17MemoryLeakFailureD2Ev) referenced from memoryleakwarningplugin.o(.constdata__ZTV17MemoryLeakFailure)
 <LI><a href="#[162]">BinaryEqualFailure::~BinaryEqualFailure__deallocating()</a> from testfailure.o(i._ZN18BinaryEqualFailureD0Ev) referenced from testfailure.o(.constdata__ZTV18BinaryEqualFailure)
 <LI><a href="#[161]">BinaryEqualFailure::~BinaryEqualFailure()</a> from utest.o(i._ZN18BinaryEqualFailureD1Ev) referenced from testfailure.o(.constdata__ZTV18BinaryEqualFailure)
 <LI><a href="#[164]">MemoryLeakDetector::~MemoryLeakDetector__deallocating()</a> from memoryleakdetector.o(i._ZN18MemoryLeakDetectorD0Ev) referenced from memoryleakdetector.o(.constdata__ZTV18MemoryLeakDetector)
 <LI><a href="#[163]">MemoryLeakDetector::~MemoryLeakDetector()</a> from memoryleakdetector.o(i._ZN18MemoryLeakDetectorD1Ev) referenced from memoryleakdetector.o(.constdata__ZTV18MemoryLeakDetector)
 <LI><a href="#[166]">StringEqualFailure::~StringEqualFailure__deallocating()</a> from testfailure.o(i._ZN18StringEqualFailureD0Ev) referenced from testfailure.o(.constdata__ZTV18StringEqualFailure)
 <LI><a href="#[165]">StringEqualFailure::~StringEqualFailure()</a> from utest.o(i._ZN18StringEqualFailureD1Ev) referenced from testfailure.o(.constdata__ZTV18StringEqualFailure)
 <LI><a href="#[16d]">TeamCityTestOutput::printFailure(const TestFailure&)</a> from teamcitytestoutput.o(i._ZN18TeamCityTestOutput12printFailureERK11TestFailure) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[16a]">TeamCityTestOutput::printCurrentTestEnded(const TestResult&)</a> from teamcitytestoutput.o(i._ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[16c]">TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)</a> from teamcitytestoutput.o(i._ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[169]">TeamCityTestOutput::printCurrentTestStarted(const UtestShell&)</a> from teamcitytestoutput.o(i._ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[16b]">TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)</a> from teamcitytestoutput.o(i._ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[168]">TeamCityTestOutput::~TeamCityTestOutput__deallocating()</a> from teamcitytestoutput.o(i._ZN18TeamCityTestOutputD0Ev) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[167]">TeamCityTestOutput::~TeamCityTestOutput()</a> from teamcitytestoutput.o(i._ZN18TeamCityTestOutputD1Ev) referenced from teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
 <LI><a href="#[178]">CompositeTestOutput::printBuffer(const char*)</a> from testoutput.o(i._ZN19CompositeTestOutput11printBufferEPKc) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[17c]">CompositeTestOutput::printDouble(double)</a> from testoutput.o(i._ZN19CompositeTestOutput11printDoubleEd) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[17d]">CompositeTestOutput::printFailure(const TestFailure&)</a> from testoutput.o(i._ZN19CompositeTestOutput12printFailureERK11TestFailure) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[180]">CompositeTestOutput::setOutputOne(TestOutput*)</a> from testoutput.o(i._ZN19CompositeTestOutput12setOutputOneEP10TestOutput) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[181]">CompositeTestOutput::setOutputTwo(TestOutput*)</a> from testoutput.o(i._ZN19CompositeTestOutput12setOutputTwoEP10TestOutput) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[171]">CompositeTestOutput::printTestsEnded(const TestResult&)</a> from testoutput.o(i._ZN19CompositeTestOutput15printTestsEndedERK10TestResult) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[170]">CompositeTestOutput::printTestsStarted()</a> from testoutput.o(i._ZN19CompositeTestOutput17printTestsStartedEv) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[17e]">CompositeTestOutput::setProgressIndicator(const char*)</a> from testoutput.o(i._ZN19CompositeTestOutput20setProgressIndicatorEPKc) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[173]">CompositeTestOutput::printCurrentTestEnded(const TestResult&)</a> from testoutput.o(i._ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[175]">CompositeTestOutput::printCurrentGroupEnded(const TestResult&)</a> from testoutput.o(i._ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[172]">CompositeTestOutput::printCurrentTestStarted(const UtestShell&)</a> from testoutput.o(i._ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[174]">CompositeTestOutput::printCurrentGroupStarted(const UtestShell&)</a> from testoutput.o(i._ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[177]">CompositeTestOutput::color()</a> from testoutput.o(i._ZN19CompositeTestOutput5colorEv) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[17f]">CompositeTestOutput::flush()</a> from testoutput.o(i._ZN19CompositeTestOutput5flushEv) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[179]">CompositeTestOutput::print(const char*)</a> from testoutput.o(i._ZN19CompositeTestOutput5printEPKc) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[17b]">CompositeTestOutput::print(unsigned)</a> from testoutput.o(i._ZN19CompositeTestOutput5printEj) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[17a]">CompositeTestOutput::print(long)</a> from testoutput.o(i._ZN19CompositeTestOutput5printEl) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[176]">CompositeTestOutput::verbose(TestOutput::VerbosityLevel)</a> from testoutput.o(i._ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[16f]">CompositeTestOutput::~CompositeTestOutput__deallocating()</a> from testoutput.o(i._ZN19CompositeTestOutputD0Ev) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[16e]">CompositeTestOutput::~CompositeTestOutput()</a> from testoutput.o(i._ZN19CompositeTestOutputD1Ev) referenced from testoutput.o(.constdata__ZTV19CompositeTestOutput)
 <LI><a href="#[183]">DoublesEqualFailure::~DoublesEqualFailure__deallocating()</a> from testfailure.o(i._ZN19DoublesEqualFailureD0Ev) referenced from testfailure.o(.constdata__ZTV19DoublesEqualFailure)
 <LI><a href="#[182]">DoublesEqualFailure::~DoublesEqualFailure()</a> from utest.o(i._ZN19DoublesEqualFailureD1Ev) referenced from testfailure.o(.constdata__ZTV19DoublesEqualFailure)
 <LI><a href="#[186]">TestMemoryAllocator::free_memory(char*, unsigned, const char*, unsigned)</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocator11free_memoryEPcjPKcj) referenced from testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
 <LI><a href="#[185]">TestMemoryAllocator::alloc_memory(unsigned, const char*, unsigned)</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocator12alloc_memoryEjPKcj) referenced from testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
 <LI><a href="#[18a]">TestMemoryAllocator::isOfEqualType(TestMemoryAllocator*)</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocator13isOfEqualTypeEPS_) referenced from testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
 <LI><a href="#[18a]">TestMemoryAllocator::isOfEqualType(TestMemoryAllocator*)</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocator13isOfEqualTypeEPS_) referenced from testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
 <LI><a href="#[18d]">TestMemoryAllocator::actualAllocator()</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocator15actualAllocatorEv) referenced from testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
 <LI><a href="#[18d]">TestMemoryAllocator::actualAllocator()</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocator15actualAllocatorEv) referenced from testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
 <LI><a href="#[18c]">TestMemoryAllocator::freeMemoryLeakNode(char*)</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc) referenced from testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
 <LI><a href="#[18c]">TestMemoryAllocator::freeMemoryLeakNode(char*)</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc) referenced from testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
 <LI><a href="#[18b]">TestMemoryAllocator::allocMemoryLeakNode(unsigned)</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocator19allocMemoryLeakNodeEj) referenced from testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
 <LI><a href="#[18b]">TestMemoryAllocator::allocMemoryLeakNode(unsigned)</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocator19allocMemoryLeakNodeEj) referenced from testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
 <LI><a href="#[184]">TestMemoryAllocator::~TestMemoryAllocator__deallocating()</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocatorD0Ev) referenced from testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
 <LI><a href="#[8b]">TestMemoryAllocator::~TestMemoryAllocator()</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocatorD1Ev) referenced from testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
 <LI><a href="#[8b]">TestMemoryAllocator::~TestMemoryAllocator()</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocatorD1Ev) referenced from testmemoryallocator.o(i._Z19defaultNewAllocatorv)
 <LI><a href="#[8b]">TestMemoryAllocator::~TestMemoryAllocator()</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocatorD1Ev) referenced from testmemoryallocator.o(i._Z22defaultMallocAllocatorv)
 <LI><a href="#[8b]">TestMemoryAllocator::~TestMemoryAllocator()</a> from testmemoryallocator.o(i._ZN19TestMemoryAllocatorD1Ev) referenced from testmemoryallocator.o(i._Z24defaultNewArrayAllocatorv)
 <LI><a href="#[18f]">CommandLineArguments::~CommandLineArguments__deallocating()</a> from commandlinearguments.o(i._ZN20CommandLineArgumentsD0Ev) referenced from commandlinearguments.o(.constdata__ZTV20CommandLineArguments)
 <LI><a href="#[18e]">CommandLineArguments::~CommandLineArguments()</a> from commandlinearguments.o(i._ZN20CommandLineArgumentsD1Ev) referenced from commandlinearguments.o(.constdata__ZTV20CommandLineArguments)
 <LI><a href="#[191]">NormalTestTerminator::~NormalTestTerminator__deallocating()</a> from utest.o(i._ZN20NormalTestTerminatorD0Ev) referenced from utest.o(.constdata__ZTV20NormalTestTerminator)
 <LI><a href="#[a6]">NormalTestTerminator::~NormalTestTerminator()</a> from utest.o(i._ZN20NormalTestTerminatorD1Ev) referenced from utest.o(.constdata__ZTV20NormalTestTerminator)
 <LI><a href="#[a6]">NormalTestTerminator::~NormalTestTerminator()</a> from utest.o(i._ZN20NormalTestTerminatorD1Ev) referenced from utest.o(i.__sti___9_Utest_cpp_6cd647e5)
 <LI><a href="#[194]">NullUnknownAllocator::free_memory(char*, unsigned, const char*, unsigned)</a> from testmemoryallocator.o(i._ZN20NullUnknownAllocator11free_memoryEPcjPKcj) referenced from testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
 <LI><a href="#[193]">NullUnknownAllocator::alloc_memory(unsigned, const char*, unsigned)</a> from testmemoryallocator.o(i._ZN20NullUnknownAllocator12alloc_memoryEjPKcj) referenced from testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
 <LI><a href="#[192]">NullUnknownAllocator::~NullUnknownAllocator__deallocating()</a> from testmemoryallocator.o(i._ZN20NullUnknownAllocatorD0Ev) referenced from testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
 <LI><a href="#[91]">NullUnknownAllocator::~NullUnknownAllocator()</a> from testmemoryallocator.o(i._ZN20NullUnknownAllocatorD1Ev) referenced from testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
 <LI><a href="#[91]">NullUnknownAllocator::~NullUnknownAllocator()</a> from testmemoryallocator.o(i._ZN20NullUnknownAllocatorD1Ev) referenced from testmemoryallocator.o(i._ZN20NullUnknownAllocator16defaultAllocatorEv)
 <LI><a href="#[198]">CommandLineTestRunner::createJUnitOutput(const SimpleString&)</a> from commandlinetestrunner.o(i._ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString) referenced from commandlinetestrunner.o(.constdata__ZTV21CommandLineTestRunner)
 <LI><a href="#[199]">CommandLineTestRunner::createConsoleOutput()</a> from commandlinetestrunner.o(i._ZN21CommandLineTestRunner19createConsoleOutputEv) referenced from commandlinetestrunner.o(.constdata__ZTV21CommandLineTestRunner)
 <LI><a href="#[197]">CommandLineTestRunner::createTeamCityOutput()</a> from commandlinetestrunner.o(i._ZN21CommandLineTestRunner20createTeamCityOutputEv) referenced from commandlinetestrunner.o(.constdata__ZTV21CommandLineTestRunner)
 <LI><a href="#[19a]">CommandLineTestRunner::createCompositeOutput(TestOutput*, TestOutput*)</a> from commandlinetestrunner.o(i._ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_) referenced from commandlinetestrunner.o(.constdata__ZTV21CommandLineTestRunner)
 <LI><a href="#[196]">CommandLineTestRunner::~CommandLineTestRunner__deallocating()</a> from commandlinetestrunner.o(i._ZN21CommandLineTestRunnerD0Ev) referenced from commandlinetestrunner.o(.constdata__ZTV21CommandLineTestRunner)
 <LI><a href="#[195]">CommandLineTestRunner::~CommandLineTestRunner()</a> from commandlinetestrunner.o(i._ZN21CommandLineTestRunnerD1Ev) referenced from commandlinetestrunner.o(.constdata__ZTV21CommandLineTestRunner)
 <LI><a href="#[19c]">LongLongsEqualFailure::~LongLongsEqualFailure__deallocating()</a> from testfailure.o(i._ZN21LongLongsEqualFailureD0Ev) referenced from testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
 <LI><a href="#[19b]">LongLongsEqualFailure::~LongLongsEqualFailure()</a> from utest.o(i._ZN21LongLongsEqualFailureD1Ev) referenced from testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
 <LI><a href="#[19e]">CrashingTestTerminator::~CrashingTestTerminator__deallocating()</a> from utest.o(i._ZN22CrashingTestTerminatorD0Ev) referenced from utest.o(.constdata__ZTV22CrashingTestTerminator)
 <LI><a href="#[a7]">CrashingTestTerminator::~CrashingTestTerminator()</a> from utest.o(i._ZN22CrashingTestTerminatorD1Ev) referenced from utest.o(.constdata__ZTV22CrashingTestTerminator)
 <LI><a href="#[a7]">CrashingTestTerminator::~CrashingTestTerminator()</a> from utest.o(i._ZN22CrashingTestTerminatorD1Ev) referenced from utest.o(i.__sti___9_Utest_cpp_6cd647e5)
 <LI><a href="#[90]">MemoryLeakDetectorList::MemoryLeakDetectorList()</a> from memoryleakdetector.o(i._ZN22MemoryLeakDetectorListC1Ev) referenced from memoryleakdetector.o(i._ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure)
 <LI><a href="#[1a0]">OutsideTestRunnerUTest::getTestResult()</a> from utest.o(i._ZN22OutsideTestRunnerUTest13getTestResultEv) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[19f]">OutsideTestRunnerUTest::~OutsideTestRunnerUTest__deallocating()</a> from utest.o(i._ZN22OutsideTestRunnerUTestD0Ev) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[92]">OutsideTestRunnerUTest::~OutsideTestRunnerUTest()</a> from utest.o(i._ZN22OutsideTestRunnerUTestD1Ev) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[92]">OutsideTestRunnerUTest::~OutsideTestRunnerUTest()</a> from utest.o(i._ZN22OutsideTestRunnerUTestD1Ev) referenced from utest.o(i._ZN22OutsideTestRunnerUTest8instanceEv)
 <LI><a href="#[1a5]">MemoryLeakWarningPlugin::FinalReport(unsigned)</a> from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin11FinalReportEj) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[1a3]">MemoryLeakWarningPlugin::preTestAction(UtestShell&, TestResult&)</a> from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[1a4]">MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)</a> from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[1a2]">MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__deallocating()</a> from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPluginD0Ev) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[1a1]">MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()</a> from memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPluginD1Ev) referenced from memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
 <LI><a href="#[1a7]">SignedBytesEqualFailure::~SignedBytesEqualFailure__deallocating()</a> from testfailure.o(i._ZN23SignedBytesEqualFailureD0Ev) referenced from testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
 <LI><a href="#[1a6]">SignedBytesEqualFailure::~SignedBytesEqualFailure()</a> from utest.o(i._ZN23SignedBytesEqualFailureD1Ev) referenced from testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
 <LI><a href="#[1a9]">StringEqualNoCaseFailure::~StringEqualNoCaseFailure__deallocating()</a> from testfailure.o(i._ZN24StringEqualNoCaseFailureD0Ev) referenced from testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[1a8]">StringEqualNoCaseFailure::~StringEqualNoCaseFailure()</a> from utest.o(i._ZN24StringEqualNoCaseFailureD1Ev) referenced from testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[1ac]">MemoryLeakWarningReporter::fail(char*)</a> from memoryleakwarningplugin.o(i._ZN25MemoryLeakWarningReporter4failEPc) referenced from memoryleakwarningplugin.o(.constdata__ZTV25MemoryLeakWarningReporter)
 <LI><a href="#[1ab]">MemoryLeakWarningReporter::~MemoryLeakWarningReporter__deallocating()</a> from memoryleakwarningplugin.o(i._ZN25MemoryLeakWarningReporterD0Ev) referenced from memoryleakwarningplugin.o(.constdata__ZTV25MemoryLeakWarningReporter)
 <LI><a href="#[1aa]">MemoryLeakWarningReporter::~MemoryLeakWarningReporter()</a> from memoryleakwarningplugin.o(i._ZN25MemoryLeakWarningReporterD1Ev) referenced from memoryleakwarningplugin.o(.constdata__ZTV25MemoryLeakWarningReporter)
 <LI><a href="#[1ae]">UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure__deallocating()</a> from testfailure.o(i._ZN25UnsignedLongsEqualFailureD0Ev) referenced from testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[1ad]">UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure()</a> from utest.o(i._ZN25UnsignedLongsEqualFailureD1Ev) referenced from testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[1b0]">UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure__deallocating()</a> from testfailure.o(i._ZN29UnsignedLongLongsEqualFailureD0Ev) referenced from testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[1af]">UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure()</a> from utest.o(i._ZN29UnsignedLongLongsEqualFailureD1Ev) referenced from testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[1b3]">TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions__deallocating()</a> from utest.o(i._ZN31TestTerminatorWithoutExceptionsD0Ev) referenced from utest.o(.constdata__ZTV31TestTerminatorWithoutExceptions)
 <LI><a href="#[1b2]">TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()</a> from utest.o(i._ZN31TestTerminatorWithoutExceptionsD1Ev) referenced from utest.o(.constdata__ZTV31TestTerminatorWithoutExceptions)
 <LI><a href="#[1b9]">TEST_FirstTestGroup_FirstTest_Test::testBody()</a> from test.o(i._ZN34TEST_FirstTestGroup_FirstTest_Test8testBodyEv) referenced from test.o(.constdata__ZTV34TEST_FirstTestGroup_FirstTest_Test)
 <LI><a href="#[1b5]">TEST_FirstTestGroup_FirstTest_Test::~TEST_FirstTestGroup_FirstTest_Test__deallocating()</a> from test.o(i._ZN34TEST_FirstTestGroup_FirstTest_TestD0Ev) referenced from test.o(.constdata__ZTV34TEST_FirstTestGroup_FirstTest_Test)
 <LI><a href="#[1b4]">TEST_FirstTestGroup_FirstTest_Test::~TEST_FirstTestGroup_FirstTest_Test()</a> from test.o(i._ZN34TEST_FirstTestGroup_FirstTest_TestD1Ev) referenced from test.o(.constdata__ZTV34TEST_FirstTestGroup_FirstTest_Test)
 <LI><a href="#[1b7]">TEST_GROUP_CppUTestGroupFirstTestGroup::setup()</a> from test.o(i._ZN38TEST_GROUP_CppUTestGroupFirstTestGroup5setupEv) referenced from test.o(.constdata__ZTV34TEST_FirstTestGroup_FirstTest_Test)
 <LI><a href="#[1b7]">TEST_GROUP_CppUTestGroupFirstTestGroup::setup()</a> from test.o(i._ZN38TEST_GROUP_CppUTestGroupFirstTestGroup5setupEv) referenced from test.o(.constdata__ZTV38TEST_GROUP_CppUTestGroupFirstTestGroup)
 <LI><a href="#[1b8]">TEST_GROUP_CppUTestGroupFirstTestGroup::teardown()</a> from test.o(i._ZN38TEST_GROUP_CppUTestGroupFirstTestGroup8teardownEv) referenced from test.o(.constdata__ZTV34TEST_FirstTestGroup_FirstTest_Test)
 <LI><a href="#[1b8]">TEST_GROUP_CppUTestGroupFirstTestGroup::teardown()</a> from test.o(i._ZN38TEST_GROUP_CppUTestGroupFirstTestGroup8teardownEv) referenced from test.o(.constdata__ZTV38TEST_GROUP_CppUTestGroupFirstTestGroup)
 <LI><a href="#[1bb]">TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup__deallocating()</a> from test.o(i._ZN38TEST_GROUP_CppUTestGroupFirstTestGroupD0Ev) referenced from test.o(.constdata__ZTV38TEST_GROUP_CppUTestGroupFirstTestGroup)
 <LI><a href="#[1ba]">TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup()</a> from test.o(i._ZN38TEST_GROUP_CppUTestGroupFirstTestGroupD1Ev) referenced from test.o(.constdata__ZTV38TEST_GROUP_CppUTestGroupFirstTestGroup)
 <LI><a href="#[88]">[local to arm_exceptions_c]::__default_terminate_handler()</a> from arm_exceptions_globs.o(.text) referenced from arm_exceptions_globs.o(.text)
 <LI><a href="#[1be]">TEST_FirstTestGroup_FirstTest_TestShell::createTest()</a> from test.o(i._ZN39TEST_FirstTestGroup_FirstTest_TestShell10createTestEv) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[1bd]">TEST_FirstTestGroup_FirstTest_TestShell::~TEST_FirstTestGroup_FirstTest_TestShell__deallocating()</a> from test.o(i._ZN39TEST_FirstTestGroup_FirstTest_TestShellD0Ev) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[a4]">TEST_FirstTestGroup_FirstTest_TestShell::~TEST_FirstTestGroup_FirstTest_TestShell()</a> from test.o(i._ZN39TEST_FirstTestGroup_FirstTest_TestShellD1Ev) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[a4]">TEST_FirstTestGroup_FirstTest_TestShell::~TEST_FirstTestGroup_FirstTest_TestShell()</a> from test.o(i._ZN39TEST_FirstTestGroup_FirstTest_TestShellD1Ev) referenced from test.o(i.__sti___8_test_cpp_fe8858fa)
 <LI><a href="#[1b6]">Utest::run()</a> from utest.o(i._ZN5Utest3runEv) referenced from test.o(.constdata__ZTV34TEST_FirstTestGroup_FirstTest_Test)
 <LI><a href="#[1b6]">Utest::run()</a> from utest.o(i._ZN5Utest3runEv) referenced from test.o(.constdata__ZTV38TEST_GROUP_CppUTestGroupFirstTestGroup)
 <LI><a href="#[1b6]">Utest::run()</a> from utest.o(i._ZN5Utest3runEv) referenced from utest.o(.constdata__ZTV5Utest)
 <LI><a href="#[1c1]">Utest::setup()</a> from utest.o(i._ZN5Utest5setupEv) referenced from utest.o(.constdata__ZTV5Utest)
 <LI><a href="#[1c2]">Utest::teardown()</a> from utest.o(i._ZN5Utest8teardownEv) referenced from utest.o(.constdata__ZTV5Utest)
 <LI><a href="#[1bc]">Utest::testBody()</a> from utest.o(i._ZN5Utest8testBodyEv) referenced from test.o(.constdata__ZTV38TEST_GROUP_CppUTestGroupFirstTestGroup)
 <LI><a href="#[1bc]">Utest::testBody()</a> from utest.o(i._ZN5Utest8testBodyEv) referenced from utest.o(.constdata__ZTV5Utest)
 <LI><a href="#[1c0]">Utest::~Utest__deallocating()</a> from utest.o(i._ZN5UtestD0Ev) referenced from utest.o(.constdata__ZTV5Utest)
 <LI><a href="#[1bf]">Utest::~Utest()</a> from utest.o(i._ZN5UtestD1Ev) referenced from utest.o(.constdata__ZTV5Utest)
 <LI><a href="#[105]">UtestShell::getMacroName() const</a> from utest.o(i._ZNK10UtestShell12getMacroNameEv) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[105]">UtestShell::getMacroName() const</a> from utest.o(i._ZNK10UtestShell12getMacroNameEv) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[105]">UtestShell::getMacroName() const</a> from utest.o(i._ZNK10UtestShell12getMacroNameEv) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[e2]">UtestShell::getFormattedName() const</a> from utest.o(i._ZNK10UtestShell16getFormattedNameEv) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[e2]">UtestShell::getFormattedName() const</a> from utest.o(i._ZNK10UtestShell16getFormattedNameEv) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e2]">UtestShell::getFormattedName() const</a> from utest.o(i._ZNK10UtestShell16getFormattedNameEv) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[fc]">UtestShell::isRunInSeperateProcess() const</a> from utest.o(i._ZNK10UtestShell22isRunInSeperateProcessEv) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[fc]">UtestShell::isRunInSeperateProcess() const</a> from utest.o(i._ZNK10UtestShell22isRunInSeperateProcessEv) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[fc]">UtestShell::isRunInSeperateProcess() const</a> from utest.o(i._ZNK10UtestShell22isRunInSeperateProcessEv) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[e0]">UtestShell::getNext() const</a> from utest.o(i._ZNK10UtestShell7getNextEv) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[e0]">UtestShell::getNext() const</a> from utest.o(i._ZNK10UtestShell7getNextEv) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e0]">UtestShell::getNext() const</a> from utest.o(i._ZNK10UtestShell7getNextEv) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[e3]">UtestShell::willRun() const</a> from utest.o(i._ZNK10UtestShell7willRunEv) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[e3]">UtestShell::willRun() const</a> from utest.o(i._ZNK10UtestShell7willRunEv) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e3]">UtestShell::willRun() const</a> from utest.o(i._ZNK10UtestShell7willRunEv) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[e4]">UtestShell::hasFailed() const</a> from utest.o(i._ZNK10UtestShell9hasFailedEv) referenced from utest.o(.constdata__ZTV10UtestShell)
 <LI><a href="#[e4]">UtestShell::hasFailed() const</a> from utest.o(i._ZNK10UtestShell9hasFailedEv) referenced from utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
 <LI><a href="#[e4]">UtestShell::hasFailed() const</a> from utest.o(i._ZNK10UtestShell9hasFailedEv) referenced from test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV11FailFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV11TestFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV12CheckFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV13EqualsFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV15ContainsFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV16BitsEqualFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV17CheckEqualFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV17ComparisonFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV17LongsEqualFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV18BinaryEqualFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV18StringEqualFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV19DoublesEqualFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[10c]">TestFailure::getMessage() const</a> from testfailure.o(i._ZNK11TestFailure10getMessageEv) referenced from testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV11FailFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV11TestFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV12CheckFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV13EqualsFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV15ContainsFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV16BitsEqualFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV17CheckEqualFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV17ComparisonFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV17LongsEqualFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV18BinaryEqualFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV18StringEqualFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV19DoublesEqualFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[108]">TestFailure::getFileName() const</a> from testfailure.o(i._ZNK11TestFailure11getFileNameEv) referenced from testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV11FailFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV11TestFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV12CheckFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV13EqualsFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV15ContainsFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV16BitsEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV17CheckEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV17ComparisonFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV17LongsEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV18BinaryEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV18StringEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV19DoublesEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[109]">TestFailure::getTestName() const</a> from testfailure.o(i._ZNK11TestFailure11getTestNameEv) referenced from testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV11FailFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV11TestFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV12CheckFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV13EqualsFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV15ContainsFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV16BitsEqualFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV17CheckEqualFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV17ComparisonFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV17LongsEqualFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV18BinaryEqualFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV18StringEqualFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV19DoublesEqualFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[10d]">TestFailure::getTestFileName() const</a> from testfailure.o(i._ZNK11TestFailure15getTestFileNameEv) referenced from testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV11FailFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV11TestFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV12CheckFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV13EqualsFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV15ContainsFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV16BitsEqualFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV17CheckEqualFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV17ComparisonFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV17LongsEqualFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV18BinaryEqualFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV18StringEqualFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV19DoublesEqualFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[10a]">TestFailure::getTestNameOnly() const</a> from testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv) referenced from testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV11FailFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV11TestFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV12CheckFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV13EqualsFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV15ContainsFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV16BitsEqualFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV17CheckEqualFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV17ComparisonFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV17LongsEqualFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV18BinaryEqualFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV18StringEqualFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV19DoublesEqualFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[10e]">TestFailure::getTestLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv) referenced from testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV11FailFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV11TestFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV12CheckFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV13EqualsFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV15ContainsFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV16BitsEqualFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV17CheckEqualFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV17ComparisonFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV17LongsEqualFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV18BinaryEqualFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV18StringEqualFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV19DoublesEqualFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
 <LI><a href="#[10b]">TestFailure::getFailureLineNumber() const</a> from testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv) referenced from testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
 <LI><a href="#[188]">TestMemoryAllocator::alloc_name() const</a> from testmemoryallocator.o(i._ZNK19TestMemoryAllocator10alloc_nameEv) referenced from testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
 <LI><a href="#[188]">TestMemoryAllocator::alloc_name() const</a> from testmemoryallocator.o(i._ZNK19TestMemoryAllocator10alloc_nameEv) referenced from testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
 <LI><a href="#[187]">TestMemoryAllocator::name() const</a> from testmemoryallocator.o(i._ZNK19TestMemoryAllocator4nameEv) referenced from testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
 <LI><a href="#[187]">TestMemoryAllocator::name() const</a> from testmemoryallocator.o(i._ZNK19TestMemoryAllocator4nameEv) referenced from testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
 <LI><a href="#[189]">TestMemoryAllocator::free_name() const</a> from testmemoryallocator.o(i._ZNK19TestMemoryAllocator9free_nameEv) referenced from testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
 <LI><a href="#[189]">TestMemoryAllocator::free_name() const</a> from testmemoryallocator.o(i._ZNK19TestMemoryAllocator9free_nameEv) referenced from testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
 <LI><a href="#[190]">NormalTestTerminator::exitCurrentTest() const</a> from utest.o(i._ZNK20NormalTestTerminator15exitCurrentTestEv) referenced from utest.o(.constdata__ZTV20NormalTestTerminator)
 <LI><a href="#[19d]">CrashingTestTerminator::exitCurrentTest() const</a> from utest.o(i._ZNK22CrashingTestTerminator15exitCurrentTestEv) referenced from utest.o(.constdata__ZTV22CrashingTestTerminator)
 <LI><a href="#[1b1]">TestTerminatorWithoutExceptions::exitCurrentTest() const</a> from utest.o(i._ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv) referenced from utest.o(.constdata__ZTV31TestTerminatorWithoutExceptions)
 <LI><a href="#[b2]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced 2 times from testoutput.o(.constdata__ZTV10TestOutput)
 <LI><a href="#[b2]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from utest.o(.constdata__ZTV14TestTerminator)
 <LI><a href="#[b2]">__cxa_pure_virtual</a> from pure_virt.o(i.__cxa_pure_virtual) referenced from memoryleakwarningplugin.o(.constdata__ZTV17MemoryLeakFailure)
 <LI><a href="#[1c9]">__main</a> from __main.o(!!!main) referenced from startup_stm32f10x_xl.o(.text)
 <LI><a href="#[1c7]">__sti___8_test_cpp_fe8858fa</a> from test.o(i.__sti___8_test_cpp_fe8858fa) referenced from test.o(.init_array)
 <LI><a href="#[1c8]">__sti___9_Utest_cpp_6cd647e5</a> from utest.o(i.__sti___9_Utest_cpp_6cd647e5) referenced from utest.o(.init_array)
 <LI><a href="#[89]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[86]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[85]">_snputc</a> from _snputc.o(.text) referenced from vsnprintf.o(.text)
 <LI><a href="#[8a]">_sputc</a> from _sputc.o(.text) referenced from sprintf.o(.text)
 <LI><a href="#[36]">atexit</a> from atexit_aeabi.o(.text) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[33]">fabs</a> from fabs.o(i.fabs) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[87]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[30]">free</a> from h1_free.o(.text) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[2e]">malloc</a> from h1_alloc.o(.text) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[31]">memcpy</a> from memcpy.o(.text) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[32]">memset</a> from memset.o(.text) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[2c]">putchar</a> from utestplatform.o(i.putchar) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[3c]">rand</a> from rand.o(.emb_text) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[2f]">realloc</a> from h1_realloc.o(.text) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[3b]">srand</a> from rand.o(.text) referenced 2 times from utestplatform.o(.data)
 <LI><a href="#[28]">vsnprintf</a> from vsnprintf.o(.text) referenced 2 times from utestplatform.o(.data)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[1c9]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1cb]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[1cd]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[3e9]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3ea]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[3eb]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3ec]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[3ed]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[1ce]"></a>_printf_n</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_n.o(.ARM.Collect$$_printf_percent$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_charcount
</UL>

<P><STRONG><a name="[21d]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[1d0]"></a>_printf_p</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_p.o(.ARM.Collect$$_printf_percent$$00000002))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_p &rArr; _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
</UL>

<P><STRONG><a name="[1d2]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1d4]"></a>_printf_e</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_e.o(.ARM.Collect$$_printf_percent$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_e &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1d5]"></a>_printf_g</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_g.o(.ARM.Collect$$_printf_percent$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_g &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[1d6]"></a>_printf_a</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_a.o(.ARM.Collect$$_printf_percent$$00000006))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_a &rArr; _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[3ee]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[1d8]"></a>_printf_i</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_i.o(.ARM.Collect$$_printf_percent$$00000008))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_i &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1da]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1db]"></a>_printf_u</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_u.o(.ARM.Collect$$_printf_percent$$0000000A))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_u &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[1dc]"></a>_printf_o</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_o.o(.ARM.Collect$$_printf_percent$$0000000B))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_o &rArr; _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1de]"></a>_printf_x</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_x.o(.ARM.Collect$$_printf_percent$$0000000C))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = _printf_x &rArr; _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1e0]"></a>_printf_lli</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lli.o(.ARM.Collect$$_printf_percent$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lli &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1e2]"></a>_printf_lld</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lld.o(.ARM.Collect$$_printf_percent$$0000000E))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_lld &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1e3]"></a>_printf_llu</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llu.o(.ARM.Collect$$_printf_percent$$0000000F))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_llu &rArr; _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1e4]"></a>_printf_llo</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llo.o(.ARM.Collect$$_printf_percent$$00000010))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = _printf_llo &rArr; _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
</UL>

<P><STRONG><a name="[1e6]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[3ef]"></a>_printf_l</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_l.o(.ARM.Collect$$_printf_percent$$00000012))

<P><STRONG><a name="[1e8]"></a>_printf_c</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_c.o(.ARM.Collect$$_printf_percent$$00000013))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_c &rArr; _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1ea]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[1ec]"></a>_printf_lc</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_lc.o(.ARM.Collect$$_printf_percent$$00000015))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_lc &rArr; _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1ee]"></a>_printf_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ls.o(.ARM.Collect$$_printf_percent$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = _printf_ls &rArr; _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
</UL>

<P><STRONG><a name="[3f0]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[207]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[3f1]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000002))

<P><STRONG><a name="[1f0]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[3f2]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[3f3]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[1f2]"></a>__rt_lib_init_rand_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_rand_2 &rArr; _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>

<P><STRONG><a name="[3f4]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[1f4]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[3f5]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[3f6]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[1f6]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[3f7]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[3f8]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[1f7]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[3f9]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[1f9]"></a>__rt_lib_init_lc_time_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000018))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_time_2 &rArr; _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
</UL>

<P><STRONG><a name="[3fa]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[1fb]"></a>__rt_lib_init_clock_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000020))
<BR><BR>[Calls]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_clock_init
</UL>

<P><STRONG><a name="[3fb]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[3fc]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[3fd]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[3fe]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[3ff]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[1fd]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[400]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[401]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[1ff]"></a>__rt_lib_init_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000031))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_cpp_2 &rArr; __cpp_initialize__aeabi_
</UL>
<BR>[Calls]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cpp_initialize__aeabi_
</UL>

<P><STRONG><a name="[402]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[403]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[404]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[405]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[20c]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[200]"></a>__rt_lib_shutdown_cpp_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000001))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_cpp_2 &rArr; __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[406]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[202]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[407]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[408]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[409]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[40a]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[40b]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[40c]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[1cc]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[40d]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[204]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[206]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[40e]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[208]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; CommandLineTestRunner::RunAllTests(int, const char*const *) &rArr; CommandLineTestRunner::runAllTestsMain() &rArr; CommandLineTestRunner::parseArguments(TestPlugin*) &rArr; CommandLineArguments::parse(TestPlugin*) &rArr; CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&) &rArr; SimpleString::split(const SimpleString&, SimpleStringCollection&) const &rArr; SimpleStringCollection::allocate(unsigned) &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[40f]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[272]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[20b]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[410]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[20d]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[3c]"></a>rand</STRONG> (Thumb, 48 bytes, Stack size 0 bytes, rand.o(.emb_text))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[247]"></a>_Unwind_Activity</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, unwind_activity.o(.emb_text))
<BR><BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[411]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.emb_text), UNUSED)

<P><STRONG><a name="[3d]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[44]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[45]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[46]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[59]"></a>ADC1_2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_2_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[76]"></a>ADC3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5c]"></a>CAN1_RX1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5d]"></a>CAN1_SCE_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[52]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[53]"></a>DMA1_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[54]"></a>DMA1_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[55]"></a>DMA1_Channel4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[56]"></a>DMA1_Channel5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[57]"></a>DMA1_Channel6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[58]"></a>DMA1_Channel7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[7f]"></a>DMA2_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[80]"></a>DMA2_Channel2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[81]"></a>DMA2_Channel3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[82]"></a>DMA2_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4d]"></a>EXTI0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6f]"></a>EXTI15_10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4e]"></a>EXTI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4f]"></a>EXTI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[50]"></a>EXTI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[51]"></a>EXTI4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5e]"></a>EXTI9_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[77]"></a>FSMC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[67]"></a>I2C1_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[66]"></a>I2C1_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[69]"></a>I2C2_ER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[68]"></a>I2C2_EV_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4c]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[70]"></a>RTCAlarm_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[4a]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[78]"></a>SDIO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6a]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6b]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[7a]"></a>SPI3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>TAMPER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5f]"></a>TIM1_BRK_TIM9_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[62]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[61]"></a>TIM1_TRG_COM_TIM11_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[60]"></a>TIM1_UP_TIM10_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[63]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[64]"></a>TIM3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[65]"></a>TIM4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[79]"></a>TIM5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[7e]"></a>TIM7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[72]"></a>TIM8_BRK_TIM12_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[75]"></a>TIM8_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[74]"></a>TIM8_TRG_COM_TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[73]"></a>TIM8_UP_TIM13_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[7b]"></a>UART4_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[7c]"></a>UART5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6c]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6d]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[6e]"></a>USART3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[71]"></a>USBWakeUp_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5a]"></a>USB_HP_CAN1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[5b]"></a>USB_LP_CAN1_RX0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f10x_xl.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(RESET)
</UL>
<P><STRONG><a name="[26e]"></a>__user_initial_stackheap</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, startup_stm32f10x_xl.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[2b6]"></a>clock</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, sys_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeInMillisImplementation()
</UL>

<P><STRONG><a name="[1fc]"></a>_clock_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, sys_clock.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_clock_2
</UL>

<P><STRONG><a name="[2ae]"></a>time</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, sys_time.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = time
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeStringImplementation()
</UL>

<P><STRONG><a name="[2e]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[30]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[2f]"></a>realloc</STRONG> (Thumb, 184 bytes, Stack size 16 bytes, h1_realloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = realloc &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[28]"></a>vsnprintf</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, vsnprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = vsnprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[213]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, __2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformSpecificFPutsImplementation(const char*, void*)
</UL>

<P><STRONG><a name="[215]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[1d9]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_signed
</UL>
<BR>[Called By]<UL><LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_u
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_i
</UL>

<P><STRONG><a name="[21b]"></a>__printf</STRONG> (Thumb, 388 bytes, Stack size 40 bytes, __printf_flags_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[21e]"></a>putc</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, putc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = putc &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putchar
</UL>

<P><STRONG><a name="[3b]"></a>srand</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = srand
</UL>
<BR>[Called By]<UL><LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_rand_init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[1f3]"></a>_rand_init</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rand.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _rand_init &rArr; srand
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;srand
</UL>
<BR>[Called By]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_rand_2
</UL>

<P><STRONG><a name="[36]"></a>atexit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, atexit_aeabi.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[21f]"></a>__aeabi_atexit</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, aeabi_atexit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::getCurrentRegistry()
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_test_cpp_fe8858fa
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::defaultAllocator()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::instance()
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_Utest_cpp_6cd647e5
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultMallocAllocator()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewAllocator()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewArrayAllocator()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
</UL>

<P><STRONG><a name="[2af]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeStringImplementation()
</UL>

<P><STRONG><a name="[31]"></a>memcpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memcpy.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[32]"></a>memset</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, memset.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[223]"></a>ctime</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 184 + Unknown Stack Size
<LI>Call Chain = ctime &rArr; asctime &rArr; _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
<LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimeStringImplementation()
</UL>

<P><STRONG><a name="[412]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[6]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[5]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[1ca]"></a>__cpp_initialize__aeabi_</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, init_aeabi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cpp_initialize__aeabi_
</UL>
<BR>[Called By]<UL><LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_cpp_2
</UL>

<P><STRONG><a name="[2c0]"></a>setjmp</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, setjmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setjmp
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformSpecificSetJmpImplementation(void(*)(void*), void*)
</UL>

<P><STRONG><a name="[2c1]"></a>longjmp</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, setjmp.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformSpecificLongJmpImplementation()
</UL>

<P><STRONG><a name="[413]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[414]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[20f]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[415]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[220]"></a>__rt_ddtor_pointer_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_ddtor_pointer_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_finalize
</UL>

<P><STRONG><a name="[416]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[417]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[e]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[210]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[227]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[1f1]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[229]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[7]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[216]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[217]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>

<P><STRONG><a name="[218]"></a>_printf_truncate_signed</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[219]"></a>_printf_truncate_unsigned</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_truncate.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[21a]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[1cf]"></a>_printf_charcount</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, _printf_charcount.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_n
</UL>

<P><STRONG><a name="[212]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>

<P><STRONG><a name="[8a]"></a>_sputc</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _sputc.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;vsnprintf
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> sprintf.o(.text)
</UL>
<P><STRONG><a name="[85]"></a>_snputc</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _snputc.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> vsnprintf.o(.text)
</UL>
<P><STRONG><a name="[22a]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[1e9]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_char &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_c
</UL>

<P><STRONG><a name="[1eb]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[214]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[22c]"></a>_printf_wctomb</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, _printf_wctomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>

<P><STRONG><a name="[1e1]"></a>_printf_longlong_dec</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, _printf_longlong_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_longlong_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llu
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lld
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lli
</UL>

<P><STRONG><a name="[22f]"></a>_printf_longlong_oct</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_oct
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_oct
</UL>

<P><STRONG><a name="[1dd]"></a>_printf_int_oct</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_int_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_o
</UL>

<P><STRONG><a name="[1e5]"></a>_printf_ll_oct</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_oct_int_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _printf_ll_oct &rArr; _printf_longlong_oct &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_oct
</UL>
<BR>[Called By]<UL><LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llo
</UL>

<P><STRONG><a name="[230]"></a>_printf_longlong_hex</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_hex_ptr
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_hex
</UL>

<P><STRONG><a name="[1df]"></a>_printf_int_hex</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = _printf_int_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_truncate_unsigned
</UL>
<BR>[Called By]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_x
</UL>

<P><STRONG><a name="[1e7]"></a>_printf_ll_hex</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[1d1]"></a>_printf_hex_ptr</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, _printf_hex_int_ll_ptr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_hex_ptr &rArr; _printf_longlong_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_hex
</UL>
<BR>[Called By]<UL><LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_p
</UL>

<P><STRONG><a name="[1fe]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[203]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[201]"></a>__cxa_finalize</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, cxa_finalize.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_finalize &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ddtor_pointer_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_cpp_2
</UL>

<P><STRONG><a name="[236]"></a>__rt_SIGPVFN</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_pure_virtual
</UL>

<P><STRONG><a name="[221]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>

<P><STRONG><a name="[239]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[418]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[211]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;realloc
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[419]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[41a]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[41b]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[41c]"></a>__aeabi_memclr</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)

<P><STRONG><a name="[23a]"></a>__rt_memclr</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, rt_memclr.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset_w
</UL>

<P><STRONG><a name="[222]"></a>_memset</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>

<P><STRONG><a name="[225]"></a>asctime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, asctime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = asctime &rArr; _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[224]"></a>localtime</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, localtime.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = localtime &rArr; _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
</UL>
<BR>[Called By]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
</UL>

<P><STRONG><a name="[23e]"></a>__cxa_free_exception</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, arm_exceptions_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = __cxa_free_exception &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_free
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[241]"></a>std::terminate()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, arm_exceptions_terminate.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80 + Unknown Stack Size
<LI>Call Chain = std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>
<BR>[Called By]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup_rethrow
</UL>

<P><STRONG><a name="[244]"></a>__ARM::same_exceptions_class(const void*, const void*)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, arm_exceptions_support.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>

<P><STRONG><a name="[243]"></a>__ARM::is_foreign_exception(_Unwind_Control_Block*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, arm_exceptions_support.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::same_exceptions_class(const void*, const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[245]"></a>__cxa_rethrow</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, arm_exceptions_rethrow.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_Activity
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup_rethrow
</UL>

<P><STRONG><a name="[249]"></a>__cxa_end_catch</STRONG> (Thumb, 74 bytes, Stack size 16 bytes, arm_exceptions_endcatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __cxa_end_catch &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_Unwind_DeleteException
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_ctor
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup_rethrow
</UL>

<P><STRONG><a name="[246]"></a>__ARM::call_terminate_handler(_Unwind_Control_Block*)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, arm_exceptions_callterm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[248]"></a>__cxa_call_terminate</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, arm_exceptions_callterm.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
</UL>

<P><STRONG><a name="[24b]"></a>__cxa_begin_catch</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, arm_exceptions_begincatch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
<LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::is_foreign_exception(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_ctor
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
<LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_call_terminate
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup_rethrow
</UL>

<P><STRONG><a name="[24c]"></a>__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, arm_exceptions_foreign.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128 + Unknown Stack Size
<LI>Call Chain = __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::same_exceptions_class(const void*, const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
</UL>

<P><STRONG><a name="[23f]"></a>__cxa_get_globals</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_init
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_eh_globals_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>

<P><STRONG><a name="[250]"></a>_sys_open</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_open &rArr; strlen
</UL>
<BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[265]"></a>_sys_close</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_close
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[271]"></a>_sys_write</STRONG> (Thumb, 16 bytes, Stack size 24 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _sys_write
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[41d]"></a>_sys_read</STRONG> (Thumb, 14 bytes, Stack size 24 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[260]"></a>_sys_istty</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_istty
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[270]"></a>_sys_seek</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_seek
</UL>
<BR>[Called By]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[41e]"></a>_sys_ensure</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, sys_io.o(.text), UNUSED)

<P><STRONG><a name="[25f]"></a>_sys_flen</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sys_io.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _sys_flen
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[41f]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[26d]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[420]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[24e]"></a>__rt_eh_globals_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_eh_globals_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[226]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[22e]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_longlong_dec
</UL>

<P><STRONG><a name="[421]"></a>__lib_sel_fp_printf</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, _printf_fp_dec.o(.text), UNUSED)

<P><STRONG><a name="[257]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[25a]"></a>_printf_fp_hex_real</STRONG> (Thumb, 756 bytes, Stack size 72 bytes, _printf_fp_hex.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex
</UL>

<P><STRONG><a name="[25b]"></a>_printf_lcs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>
<BR>[Called By]<UL><LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wstring
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wchar
</UL>

<P><STRONG><a name="[1ed]"></a>_printf_wchar</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wchar &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lc
</UL>

<P><STRONG><a name="[1ef]"></a>_printf_wstring</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_wchar.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = _printf_wstring &rArr; _printf_lcs_common &rArr; _printf_wctomb &rArr; _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_lcs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ls
</UL>

<P><STRONG><a name="[22b]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[25c]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>

<P><STRONG><a name="[3df]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[422]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[234]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[232]"></a>freopen</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>
<BR>[Called By]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[263]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[235]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[423]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[22d]"></a>_wcrtomb</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, _wcrtomb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _wcrtomb &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_wctomb
</UL>

<P><STRONG><a name="[242]"></a>abort</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, abort.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;[local to arm_exceptions_c]::__default_terminate_handler()
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>

<P><STRONG><a name="[238]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
<LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[233]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[228]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[237]"></a>__rt_SIGPVFN_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_pvfn_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>

<P><STRONG><a name="[231]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = __aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_localtime_r
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[424]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[425]"></a>__rt_memclr_w</STRONG> (Thumb, 78 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[23b]"></a>_memset_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memclr
</UL>

<P><STRONG><a name="[23c]"></a>_asctime_r</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, asctime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;asctime
</UL>

<P><STRONG><a name="[426]"></a>_n$asctime_r</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, asctime_internal.o(.text), UNUSED)

<P><STRONG><a name="[23d]"></a>_localtime_r</STRONG> (Thumb, 178 bytes, Stack size 16 bytes, localtime_internal.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = _localtime_r &rArr; __aeabi_memclr4
</UL>
<BR>[Calls]<UL><LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;localtime
</UL>

<P><STRONG><a name="[427]"></a>_n$localtime_r</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, localtime_internal.o(.text), UNUSED)

<P><STRONG><a name="[24d]"></a>__cxa_allocate_exception</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, arm_exceptions_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_exceptions_buffer_allocate
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
<LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::call_terminate_handler(_Unwind_Control_Block*)
</UL>
<BR>[Called By]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*)
</UL>

<P><STRONG><a name="[24f]"></a>__ARM_exceptions_buffer_init</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_get_globals
</UL>

<P><STRONG><a name="[26c]"></a>__ARM_exceptions_buffer_allocate</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_allocate_exception
</UL>

<P><STRONG><a name="[240]"></a>__ARM_exceptions_buffer_free</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, arm_exceptions_mem.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_free_exception
</UL>

<P><STRONG><a name="[24a]"></a>_Unwind_DeleteException</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, unwind_delete.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
</UL>

<P><STRONG><a name="[20e]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[205]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[266]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_wcrtomb
</UL>

<P><STRONG><a name="[1f5]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
</UL>

<P><STRONG><a name="[26b]"></a>sprintf</STRONG> (Thumb, 38 bytes, Stack size 32 bytes, sprintf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sputc
<LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_asctime_r
</UL>

<P><STRONG><a name="[259]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[253]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[262]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _sys_flen
</UL>
<BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[428]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[25e]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[261]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
<LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>

<P><STRONG><a name="[264]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write
</UL>
<BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
</UL>

<P><STRONG><a name="[25d]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[20a]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[26a]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN_inner
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
<LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
</UL>

<P><STRONG><a name="[267]"></a>__rt_SIGABRT</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>

<P><STRONG><a name="[268]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[269]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[251]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
</UL>

<P><STRONG><a name="[273]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[26f]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[429]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[274]"></a>__rt_SIGABRT_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_abrt_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGABRT
</UL>

<P><STRONG><a name="[3e0]"></a>strcmp</STRONG> (Thumb, 128 bytes, Stack size 0 bytes, strcmpv7m.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_time
<LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[275]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
</UL>

<P><STRONG><a name="[42a]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[42b]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[254]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[277]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[276]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[278]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[279]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[255]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[256]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>

<P><STRONG><a name="[27a]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[83]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, system_stm32f10x.o(i.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f10x_xl.o(.text)
</UL>
<P><STRONG><a name="[27c]"></a>StringFrom(void(*)())</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, simplestring.o(i._Z10StringFromPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = StringFrom(void(*)()) &rArr; HexStringFrom(void(*)()) &rArr; HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(void(*)())
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[27f]"></a>StringFrom(const char*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, simplestring.o(i._Z10StringFromPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = StringFrom(const char*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintableStringFromOrNull(const char*)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryOrNull(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[280]"></a>StringFrom(const void*)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, simplestring.o(i._Z10StringFromPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = StringFrom(const void*) &rArr; HexStringFrom(const void*) &rArr; HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(const void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[282]"></a>StringFrom(double, int)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, simplestring.o(i._Z10StringFromdi))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = StringFrom(double, int) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printDouble(double)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&)
</UL>

<P><STRONG><a name="[284]"></a>StringFrom(int)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, simplestring.o(i._Z10StringFromi))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = StringFrom(int) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)
</UL>

<P><STRONG><a name="[285]"></a>StringFrom(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, simplestring.o(i._Z10StringFromj))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = StringFrom(unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, unsigned)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::print(unsigned)
</UL>

<P><STRONG><a name="[286]"></a>StringFrom(long)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, simplestring.o(i._Z10StringFroml))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = StringFrom(long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::print(long)
</UL>

<P><STRONG><a name="[287]"></a>StringFrom(unsigned long)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, simplestring.o(i._Z10StringFromm))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = StringFrom(unsigned long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)
</UL>

<P><STRONG><a name="[288]"></a>StringFrom(long long)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, simplestring.o(i._Z10StringFromx))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = StringFrom(long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)
</UL>

<P><STRONG><a name="[289]"></a>StringFrom(unsigned long long)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, simplestring.o(i._Z10StringFromy))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = StringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)
</UL>

<P><STRONG><a name="[27d]"></a>HexStringFrom(void(*)())</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, simplestring.o(i._Z13HexStringFromPFvvE))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HexStringFrom(void(*)()) &rArr; HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(void(*)())
</UL>

<P><STRONG><a name="[281]"></a>HexStringFrom(const void*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, simplestring.o(i._Z13HexStringFromPKv))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HexStringFrom(const void*) &rArr; HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const void*)
</UL>

<P><STRONG><a name="[28b]"></a>HexStringFrom(signed char)</STRONG> (Thumb, 62 bytes, Stack size 32 bytes, simplestring.o(i._Z13HexStringFroma))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = HexStringFrom(signed char) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned) const
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(signed char)
</UL>

<P><STRONG><a name="[28f]"></a>HexStringFrom(long)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, simplestring.o(i._Z13HexStringFroml))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = HexStringFrom(long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(long)
</UL>

<P><STRONG><a name="[290]"></a>HexStringFrom(unsigned long)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, simplestring.o(i._Z13HexStringFromm))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = HexStringFrom(unsigned long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(unsigned long)
</UL>

<P><STRONG><a name="[291]"></a>HexStringFrom(long long)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, simplestring.o(i._Z13HexStringFromx))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = HexStringFrom(long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(long long)
</UL>

<P><STRONG><a name="[28a]"></a>HexStringFrom(unsigned long long)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, simplestring.o(i._Z13HexStringFromy))
<BR><BR>[Stack]<UL><LI>Max Depth = 392<LI>Call Chain = HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(unsigned long long)
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(const void*)
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(void(*)())
</UL>

<P><STRONG><a name="[295]"></a>doubles_equal(double, double, double)</STRONG> (Thumb, 128 bytes, Stack size 48 bytes, utest.o(i._Z13doubles_equalddd))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = doubles_equal(double, double, double) &rArr; __aeabi_cdcmple
</UL>
<BR>[Calls]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdcmple
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[29d]"></a>StringFromBinary(const unsigned char*, unsigned)</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, simplestring.o(i._Z16StringFromBinaryPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = StringFromBinary(const unsigned char*, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryOrNull(const unsigned char*, unsigned)
</UL>

<P><STRONG><a name="[283]"></a>StringFromFormat(const char*, ...)</STRONG> (Thumb, 56 bytes, Stack size 40 bytes, simplestring.o(i._Z16StringFromFormatPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 376<LI>Call Chain = StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
</UL>
<BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestSuiteSummary()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestCases()
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(unsigned)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::printable() const
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(unsigned long long)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(long long)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(unsigned long)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(long)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(unsigned long long)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(long long)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(unsigned long)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(long)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(int)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(double, int)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestLocations(TestResult&)
</UL>

<P><STRONG><a name="[2a0]"></a>VStringFromFormat(const char*, std::__va_list)</STRONG> (Thumb, 158 bytes, Stack size 160 bytes, simplestring.o(i._Z17VStringFromFormatPKcSt9__va_list))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::allocStringBuffer(unsigned, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>

<P><STRONG><a name="[2a4]"></a>defaultNewAllocator()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, testmemoryallocator.o(i._Z19defaultNewAllocatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = defaultNewAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::TestMemoryAllocator(const char*, const char*, const char*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentNewAllocatorToDefault()
</UL>

<P><STRONG><a name="[2a7]"></a>StringFromMaskedBits(unsigned long, unsigned long, unsigned)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, simplestring.o(i._Z20StringFromMaskedBitsmmj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = StringFromMaskedBits(unsigned long, unsigned long, unsigned) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
</UL>

<P><STRONG><a name="[2ab]"></a>StringFromBinaryOrNull(const unsigned char*, unsigned)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, simplestring.o(i._Z22StringFromBinaryOrNullPKhj))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = StringFromBinaryOrNull(const unsigned char*, unsigned) &rArr; StringFromBinary(const unsigned char*, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
</UL>

<P><STRONG><a name="[2ac]"></a>defaultMallocAllocator()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, testmemoryallocator.o(i._Z22defaultMallocAllocatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = defaultMallocAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::TestMemoryAllocator(const char*, const char*, const char*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentMallocAllocatorToDefault()
</UL>

<P><STRONG><a name="[2a9]"></a>getCurrentNewAllocator()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, testmemoryallocator.o(i._Z22getCurrentNewAllocatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = getCurrentNewAllocator() &rArr; setCurrentNewAllocatorToDefault() &rArr; defaultNewAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentNewAllocatorToDefault()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threadsafe_mem_leak_operator_new(unsigned)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_nothrow(unsigned)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_debug(unsigned, const char*, unsigned)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_delete(void*)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new(unsigned)
</UL>

<P><STRONG><a name="[2b0]"></a>defaultNewArrayAllocator()</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, testmemoryallocator.o(i._Z24defaultNewArrayAllocatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::TestMemoryAllocator(const char*, const char*, const char*)
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentNewArrayAllocatorToDefault()
<LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getStringAllocator()
</UL>

<P><STRONG><a name="[2b2]"></a>PrintableStringFromOrNull(const char*)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, simplestring.o(i._Z25PrintableStringFromOrNullPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = PrintableStringFromOrNull(const char*) &rArr; SimpleString::printable() const &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::printable() const
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
</UL>

<P><STRONG><a name="[29a]"></a>getCurrentMallocAllocator()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, testmemoryallocator.o(i._Z25getCurrentMallocAllocatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = getCurrentMallocAllocator() &rArr; setCurrentMallocAllocatorToDefault() &rArr; defaultMallocAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentMallocAllocatorToDefault()
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_realloc(void*, unsigned, const char*, unsigned)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_malloc(unsigned, const char*, unsigned)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_free(void*, const char*, unsigned)
</UL>

<P><STRONG><a name="[2b5]"></a>BracketsFormattedHexString(SimpleString)</STRONG> (Thumb, 70 bytes, Stack size 48 bytes, simplestring.o(i._Z26BracketsFormattedHexString12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = BracketsFormattedHexString(SimpleString) &rArr; SimpleString::operator +(const SimpleString&) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(unsigned long long)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(long long)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(unsigned long)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(long)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(signed char)
</UL>

<P><STRONG><a name="[2b7]"></a>getCurrentNewArrayAllocator()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, testmemoryallocator.o(i._Z27getCurrentNewArrayAllocatorv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = getCurrentNewArrayAllocator() &rArr; setCurrentNewArrayAllocatorToDefault() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setCurrentNewArrayAllocatorToDefault()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_array_nothrow(unsigned)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_array_debug(unsigned, const char*, unsigned)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_delete_array(void*)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_array(unsigned)
</UL>

<P><STRONG><a name="[2b9]"></a>BracketsFormattedHexStringFrom(signed char)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, simplestring.o(i._Z30BracketsFormattedHexStringFroma))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = BracketsFormattedHexStringFrom(signed char) &rArr; HexStringFrom(signed char) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexString(SimpleString)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)
</UL>

<P><STRONG><a name="[2ba]"></a>BracketsFormattedHexStringFrom(long)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, simplestring.o(i._Z30BracketsFormattedHexStringFroml))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = BracketsFormattedHexStringFrom(long) &rArr; HexStringFrom(long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexString(SimpleString)
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)
</UL>

<P><STRONG><a name="[2bb]"></a>BracketsFormattedHexStringFrom(unsigned long)</STRONG> (Thumb, 30 bytes, Stack size 24 bytes, simplestring.o(i._Z30BracketsFormattedHexStringFromm))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = BracketsFormattedHexStringFrom(unsigned long) &rArr; HexStringFrom(unsigned long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexString(SimpleString)
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)
</UL>

<P><STRONG><a name="[2bc]"></a>BracketsFormattedHexStringFrom(long long)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, simplestring.o(i._Z30BracketsFormattedHexStringFromx))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = BracketsFormattedHexStringFrom(long long) &rArr; HexStringFrom(long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexString(SimpleString)
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)
</UL>

<P><STRONG><a name="[2bd]"></a>BracketsFormattedHexStringFrom(unsigned long long)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, simplestring.o(i._Z30BracketsFormattedHexStringFromy))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = BracketsFormattedHexStringFrom(unsigned long long) &rArr; HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexString(SimpleString)
<LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)
</UL>

<P><STRONG><a name="[2ad]"></a>setCurrentNewAllocatorToDefault()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, testmemoryallocator.o(i._Z31setCurrentNewAllocatorToDefaultv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setCurrentNewAllocatorToDefault() &rArr; defaultNewAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
</UL>

<P><STRONG><a name="[2b4]"></a>setCurrentMallocAllocatorToDefault()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, testmemoryallocator.o(i._Z34setCurrentMallocAllocatorToDefaultv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setCurrentMallocAllocatorToDefault() &rArr; defaultMallocAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultMallocAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMallocAllocator()
</UL>

<P><STRONG><a name="[2b8]"></a>setCurrentNewArrayAllocatorToDefault()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, testmemoryallocator.o(i._Z36setCurrentNewArrayAllocatorToDefaultv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = setCurrentNewArrayAllocatorToDefault() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewArrayAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
</UL>

<P><STRONG><a name="[2ce]"></a>PlatformSpecificGetWorkingEnvironment()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utestplatform.o(i._Z37PlatformSpecificGetWorkingEnvironmentv))
<BR><BR>[Called By]<UL><LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::getWorkingEnvironment()
</UL>

<P><STRONG><a name="[371]"></a>TestFilter::invertMatching()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testfilter.o(i._ZN10TestFilter14invertMatchingEv))
<BR><BR>[Called By]<UL><LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeGroupFilter(int, const char*const *, int&)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeNameFilter(int, const char*const *, int&)
</UL>

<P><STRONG><a name="[36f]"></a>TestFilter::strictMatching()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testfilter.o(i._ZN10TestFilter14strictMatchingEv))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictNameFilter(int, const char*const *, int&)
</UL>

<P><STRONG><a name="[369]"></a>TestFilter::add(TestFilter*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testfilter.o(i._ZN10TestFilter3addEPS_))
<BR><BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeGroupFilter(int, const char*const *, int&)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeNameFilter(int, const char*const *, int&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupFilter(int, const char*const *, int&)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addNameFilter(int, const char*const *, int&)
</UL>

<P><STRONG><a name="[2c3]"></a>TestFilter::TestFilter(const SimpleString&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testfilter.o(i._ZN10TestFilterC1ERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TestFilter::TestFilter(const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeGroupFilter(int, const char*const *, int&)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeNameFilter(int, const char*const *, int&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupFilter(int, const char*const *, int&)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addNameFilter(int, const char*const *, int&)
</UL>

<P><STRONG><a name="[42c]"></a>TestFilter::TestFilter__sub_object(const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, testfilter.o(i._ZN10TestFilterC1ERK12SimpleString), UNUSED)

<P><STRONG><a name="[2c4]"></a>TestFilter::~TestFilter()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, commandlinearguments.o(i._ZN10TestFilterD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TestFilter::~TestFilter() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
</UL>
<BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments()
</UL>

<P><STRONG><a name="[42d]"></a>TestFilter::~TestFilter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, commandlinearguments.o(i._ZN10TestFilterD1Ev), UNUSED)

<P><STRONG><a name="[b6]"></a>TestOutput::printDouble(double)</STRONG> (Thumb, 48 bytes, Stack size 32 bytes, testoutput.o(i._ZN10TestOutput11printDoubleEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = TestOutput::printDouble(double) &rArr; StringFrom(double, int) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(double, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
<LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[b7]"></a>TestOutput::printFailure(const TestFailure&)</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, testoutput.o(i._ZN10TestOutput12printFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = TestOutput::printFailure(const TestFailure&) &rArr; TestOutput::printFileAndLineForTestAndFailure(const TestFailure&) &rArr; TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, unsigned) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::isInHelperFunction() const
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::isOutsideTestFile() const
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForTestAndFailure(const TestFailure&)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForFailure(const TestFailure&)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailureMessage(SimpleString)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[b8]"></a>TestOutput::printTestRun(unsigned, unsigned)</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, testoutput.o(i._ZN10TestOutput12printTestRunEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOutput::printTestRun(unsigned, unsigned)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
<LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
<LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[ab]"></a>TestOutput::printTestsEnded(const TestResult&)</STRONG> (Thumb, 344 bytes, Stack size 24 bytes, testoutput.o(i._ZN10TestOutput15printTestsEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestOutput::printTestsEnded(const TestResult&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::getTotalExecutionTime() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[ba]"></a>TestOutput::printVeryVerbose(const char*)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, testoutput.o(i._ZN10TestOutput16printVeryVerboseEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOutput::printVeryVerbose(const char*)
</UL>
<BR>[Address Reference Count : 5]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
<LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
<LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[aa]"></a>TestOutput::printTestsStarted()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testoutput.o(i._ZN10TestOutput17printTestsStartedEv))
<BR>[Address Reference Count : 3]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[2cc]"></a>TestOutput::printFailureInTest(SimpleString)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN10TestOutput18printFailureInTestE12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TestOutput::printFailureInTest(SimpleString) &rArr; SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForTestAndFailure(const TestFailure&)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[2ca]"></a>TestOutput::printFailureMessage(SimpleString)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, testoutput.o(i._ZN10TestOutput19printFailureMessageE12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = TestOutput::printFailureMessage(SimpleString) &rArr; SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[b9]"></a>TestOutput::setProgressIndicator(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testoutput.o(i._ZN10TestOutput20setProgressIndicatorEPKc))
<BR>[Address Reference Count : 4]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
<LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[2cd]"></a>TestOutput::getWorkingEnvironment()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, testoutput.o(i._ZN10TestOutput21getWorkingEnvironmentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestOutput::getWorkingEnvironment()
</UL>
<BR>[Calls]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PlatformSpecificGetWorkingEnvironment()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, unsigned)
</UL>

<P><STRONG><a name="[ad]"></a>TestOutput::printCurrentTestEnded(const TestResult&)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, testoutput.o(i._ZN10TestOutput21printCurrentTestEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOutput::printCurrentTestEnded(const TestResult&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::getCurrentTestTotalExecutionTime() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[af]"></a>TestOutput::printCurrentGroupEnded(const TestResult&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testoutput.o(i._ZN10TestOutput22printCurrentGroupEndedERK10TestResult))
<BR>[Address Reference Count : 2]<UL><LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[bd]"></a>TestOutput::printProgressIndicator()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, testoutput.o(i._ZN10TestOutput22printProgressIndicatorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestOutput::printProgressIndicator()
</UL>
<BR>[Address Reference Count : 5]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
<LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
<LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[ac]"></a>TestOutput::printCurrentTestStarted(const UtestShell&)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, testoutput.o(i._ZN10TestOutput23printCurrentTestStartedERK10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TestOutput::printCurrentTestStarted(const UtestShell&) &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 2]<UL><LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[ae]"></a>TestOutput::printCurrentGroupStarted(const UtestShell&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testoutput.o(i._ZN10TestOutput24printCurrentGroupStartedERK10UtestShell))
<BR>[Address Reference Count : 2]<UL><LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[2c9]"></a>TestOutput::printFileAndLineForFailure(const TestFailure&)</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, testoutput.o(i._ZN10TestOutput26printFileAndLineForFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TestOutput::printFileAndLineForFailure(const TestFailure&) &rArr; TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, unsigned) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, unsigned)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailureInTest(SimpleString)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[bb]"></a>TestOutput::printEclipseErrorInFileOnLine(SimpleString, unsigned)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, testoutput.o(i._ZN10TestOutput29printEclipseErrorInFileOnLineE12SimpleStringj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TestOutput::printEclipseErrorInFileOnLine(SimpleString, unsigned) &rArr; SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 5]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
<LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
<LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[2c8]"></a>TestOutput::printFileAndLineForTestAndFailure(const TestFailure&)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, testoutput.o(i._ZN10TestOutput33printFileAndLineForTestAndFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TestOutput::printFileAndLineForTestAndFailure(const TestFailure&) &rArr; TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, unsigned) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, unsigned)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailureInTest(SimpleString)
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[bc]"></a>TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, unsigned)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, testoutput.o(i._ZN10TestOutput34printVisualStudioErrorInFileOnLineE12SimpleStringj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, unsigned) &rArr; SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 5]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
<LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
<LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[2d0]"></a>TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, unsigned)</STRONG> (Thumb, 80 bytes, Stack size 32 bytes, testoutput.o(i._ZN10TestOutput52printErrorInFileOnLineFormattedForWorkingEnvironmentE12SimpleStringj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, unsigned) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::getWorkingEnvironment()
</UL>
<BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForTestAndFailure(const TestFailure&)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[b1]"></a>TestOutput::color()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testoutput.o(i._ZN10TestOutput5colorEv))
<BR>[Address Reference Count : 4]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
<LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[b3]"></a>TestOutput::print(const char*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testoutput.o(i._ZN10TestOutput5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestOutput::print(const char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[b5]"></a>TestOutput::print(unsigned)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, testoutput.o(i._ZN10TestOutput5printEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = TestOutput::print(unsigned) &rArr; StringFrom(unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(unsigned)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[b4]"></a>TestOutput::print(long)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, testoutput.o(i._ZN10TestOutput5printEl))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = TestOutput::print(long) &rArr; StringFrom(long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(long)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[b0]"></a>TestOutput::verbose(TestOutput::VerbosityLevel)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testoutput.o(i._ZN10TestOutput7verboseENS_14VerbosityLevelE))
<BR>[Address Reference Count : 4]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
<LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[330]"></a>TestOutput::TestOutput__sub_object()</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, testoutput.o(i._ZN10TestOutputC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompositeTestOutput::CompositeTestOutput()
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::TeamCityTestOutput()
<LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::JUnitTestOutput()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::ConsoleTestOutput()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::OutsideTestRunnerUTest()
</UL>

<P><STRONG><a name="[a9]"></a>TestOutput::~TestOutput__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testoutput.o(i._ZN10TestOutputD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestOutput::~TestOutput__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__sub_object()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV10TestOutput)
</UL>
<P><STRONG><a name="[a8]"></a>TestOutput::~TestOutput__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testoutput.o(i._ZN10TestOutputD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::~ConsoleTestOutput()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput()
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompositeTestOutput::~CompositeTestOutput()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV10TestOutput)
</UL>
<P><STRONG><a name="[c0]"></a>TestPlugin::preTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testplugin.o(i._ZN10TestPlugin13preTestActionER10UtestShellR10TestResult))
<BR>[Address Reference Count : 3]<UL><LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
<LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[c2]"></a>TestPlugin::parseArguments(int, const char*const *, int)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZN10TestPlugin14parseArgumentsEiPKPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestPlugin::parseArguments(int, const char*const *, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
<LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[c1]"></a>TestPlugin::postTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testplugin.o(i._ZN10TestPlugin14postTestActionER10UtestShellR10TestResult))
<BR>[Address Reference Count : 2]<UL><LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[2d3]"></a>TestPlugin::getPluginByName(const SimpleString&)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, testplugin.o(i._ZN10TestPlugin15getPluginByNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + In Cycle
<LI>Call Chain = TestPlugin::getPluginByName(const SimpleString&) &rArr;  TestPlugin::getPluginByName(const SimpleString&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::getPluginByName(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::getPluginByName(const SimpleString&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::getPluginByName(const SimpleString&)
</UL>

<P><STRONG><a name="[c5]"></a>TestPlugin::parseAllArguments(int, const char*const *, int)</STRONG> (Thumb, 62 bytes, Stack size 24 bytes, testplugin.o(i._ZN10TestPlugin17parseAllArgumentsEiPKPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestPlugin::parseAllArguments(int, const char*const *, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
<LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[c6]"></a>TestPlugin::parseAllArguments(int, char**, int)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, testplugin.o(i._ZN10TestPlugin17parseAllArgumentsEiPPci))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestPlugin::parseAllArguments(int, char**, int)
</UL>
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
<LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[c8]"></a>TestPlugin::removePluginByName(const SimpleString&)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, testplugin.o(i._ZN10TestPlugin18removePluginByNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = TestPlugin::removePluginByName(const SimpleString&) &rArr; operator ==(const SimpleString&, const SimpleString&) &rArr; SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::getName()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
<LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[c3]"></a>TestPlugin::runAllPreTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testplugin.o(i._ZN10TestPlugin19runAllPreTestActionER10UtestShellR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestPlugin::runAllPreTestAction(UtestShell&, TestResult&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[c4]"></a>TestPlugin::runAllPostTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testplugin.o(i._ZN10TestPlugin20runAllPostTestActionER10UtestShellR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestPlugin::runAllPostTestAction(UtestShell&, TestResult&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[cb]"></a>TestPlugin::enable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testplugin.o(i._ZN10TestPlugin6enableEv))
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
<LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[ca]"></a>TestPlugin::disable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testplugin.o(i._ZN10TestPlugin7disableEv))
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
<LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[2d5]"></a>TestPlugin::getName()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testplugin.o(i._ZN10TestPlugin7getNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::removePluginByName(const SimpleString&)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::removePluginByName(const SimpleString&)
</UL>

<P><STRONG><a name="[c9]"></a>TestPlugin::getNext()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testplugin.o(i._ZN10TestPlugin7getNextEv))
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
<LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[c7]"></a>TestPlugin::addPlugin(TestPlugin*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testplugin.o(i._ZN10TestPlugin9addPluginEPS_))
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
<LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[cc]"></a>TestPlugin::isEnabled()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testplugin.o(i._ZN10TestPlugin9isEnabledEv))
<BR>[Address Reference Count : 4]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
<LI> testplugin.o(.constdata__ZTV10TestPlugin)
<LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
<LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[2d6]"></a>TestPlugin::TestPlugin(TestPlugin*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, testplugin.o(i._ZN10TestPluginC1EPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TestPlugin::TestPlugin(TestPlugin*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::NullTestPlugin()
</UL>

<P><STRONG><a name="[42e]"></a>TestPlugin::TestPlugin__sub_object(TestPlugin*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, testplugin.o(i._ZN10TestPluginC1EPS_), UNUSED)

<P><STRONG><a name="[2d7]"></a>TestPlugin::TestPlugin(const SimpleString&)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testplugin.o(i._ZN10TestPluginC1ERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TestPlugin::TestPlugin(const SimpleString&) &rArr; NullTestPlugin::instance() &rArr; NullTestPlugin::NullTestPlugin() &rArr; TestPlugin::TestPlugin(TestPlugin*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*)
<LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointerPlugin::SetPointerPlugin(const SimpleString&)
</UL>

<P><STRONG><a name="[42f]"></a>TestPlugin::TestPlugin__sub_object(const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, testplugin.o(i._ZN10TestPluginC1ERK12SimpleString), UNUSED)

<P><STRONG><a name="[bf]"></a>TestPlugin::~TestPlugin__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testplugin.o(i._ZN10TestPluginD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TestPlugin::~TestPlugin__deallocating() &rArr; TestPlugin::~TestPlugin() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.constdata__ZTV10TestPlugin)
</UL>
<P><STRONG><a name="[be]"></a>TestPlugin::~TestPlugin()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testplugin.o(i._ZN10TestPluginD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TestPlugin::~TestPlugin() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointerPlugin::~SetPointerPlugin()
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::~NullTestPlugin()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.constdata__ZTV10TestPlugin)
</UL>
<P><STRONG><a name="[430]"></a>TestPlugin::~TestPlugin__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, testplugin.o(i._ZN10TestPluginD1Ev), UNUSED)

<P><STRONG><a name="[da]"></a>TestResult::addFailure(const TestFailure&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, testresult.o(i._ZN10TestResult10addFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestResult::addFailure(const TestFailure&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[d7]"></a>TestResult::countCheck()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testresult.o(i._ZN10TestResult10countCheckEv))
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[d0]"></a>TestResult::testsEnded()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, testresult.o(i._ZN10TestResult10testsEndedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestResult::testsEnded()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[d9]"></a>TestResult::countIgnored()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testresult.o(i._ZN10TestResult12countIgnoredEv))
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[cf]"></a>TestResult::testsStarted()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, testresult.o(i._ZN10TestResult12testsStartedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestResult::testsStarted()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[d8]"></a>TestResult::countFilteredOut()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testresult.o(i._ZN10TestResult16countFilteredOutEv))
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[d4]"></a>TestResult::currentTestEnded(UtestShell*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, testresult.o(i._ZN10TestResult16currentTestEndedEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestResult::currentTestEnded(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[dc]"></a>TestResult::printVeryVerbose(const char*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testresult.o(i._ZN10TestResult16printVeryVerboseEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestResult::printVeryVerbose(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[d2]"></a>TestResult::currentGroupEnded(UtestShell*)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, testresult.o(i._ZN10TestResult17currentGroupEndedEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestResult::currentGroupEnded(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[d3]"></a>TestResult::currentTestStarted(UtestShell*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, testresult.o(i._ZN10TestResult18currentTestStartedEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestResult::currentTestStarted(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[d1]"></a>TestResult::currentGroupStarted(UtestShell*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, testresult.o(i._ZN10TestResult19currentGroupStartedEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestResult::currentGroupStarted(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[db]"></a>TestResult::print(const char*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testresult.o(i._ZN10TestResult5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestResult::print(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[d6]"></a>TestResult::countRun()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testresult.o(i._ZN10TestResult8countRunEv))
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[d5]"></a>TestResult::countTest()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, testresult.o(i._ZN10TestResult9countTestEv))
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[38f]"></a>TestResult::TestResult(TestOutput&)</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, testresult.o(i._ZN10TestResultC1ER10TestOutput))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
<LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::OutsideTestRunnerUTest()
</UL>

<P><STRONG><a name="[431]"></a>TestResult::TestResult__sub_object(TestOutput&)</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, testresult.o(i._ZN10TestResultC1ER10TestOutput), UNUSED)

<P><STRONG><a name="[ce]"></a>TestResult::~TestResult__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testresult.o(i._ZN10TestResultD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestResult::~TestResult__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::~TestResult()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[cd]"></a>TestResult::~TestResult()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testresult.o(i._ZN10TestResultD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::~OutsideTestRunnerUTest()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::~TestResult__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testresult.o(.constdata__ZTV10TestResult)
</UL>
<P><STRONG><a name="[432]"></a>TestResult::~TestResult__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, testresult.o(i._ZN10TestResultD1Ev), UNUSED)

<P><STRONG><a name="[e5]"></a>UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 134 bytes, Stack size 128 bytes, utest.o(i._ZN10UtestShell10assertTrueEbPKcS1_S1_S1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&) &rArr; CheckFailure::CheckFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createUserText(const SimpleString&) &rArr; SimpleString::operator +=(const SimpleString&) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::setInternalBufferTo(char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e1]"></a>UtestShell::countTests()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, utest.o(i._ZN10UtestShell10countTestsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UtestShell::countTests()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[ff]"></a>UtestShell::createTest()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, utest.o(i._ZN10UtestShell10createTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UtestShell::createTest() &rArr; operator new(unsigned, const char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::Utest()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[293]"></a>UtestShell::getCurrent()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utest.o(i._ZN10UtestShell10getCurrentEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = UtestShell::getCurrent() &rArr; OutsideTestRunnerUTest::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FirstTestGroup_FirstTest_Test::testBody()
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkedMalloc(unsigned)
</UL>

<P><STRONG><a name="[101]"></a>UtestShell::runOneTest(TestPlugin*, TestResult&)</STRONG> (Thumb, 64 bytes, Stack size 32 bytes, utest.o(i._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = UtestShell::runOneTest(TestPlugin*, TestResult&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[100]"></a>UtestShell::destroyTest(Utest*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZN10UtestShell11destroyTestEP5Utest))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UtestShell::destroyTest(Utest*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[328]"></a>UtestShell::setFileName(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShell11setFileNameEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[327]"></a>UtestShell::setTestName(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShell11setTestNameEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[f3]"></a>UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 134 bytes, Stack size 128 bytes, utest.o(i._ZN10UtestShell12assertEqualsEbPKcS1_S1_S1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&) &rArr; CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[326]"></a>UtestShell::setGroupName(const char*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShell12setGroupNameEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[f6]"></a>UtestShell::assertCompare(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 134 bytes, Stack size 128 bytes, utest.o(i._ZN10UtestShell13assertCompareEbPKcS1_S1_S1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = UtestShell::assertCompare(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&) &rArr; ComparisonFailure::ComparisonFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createUserText(const SimpleString&) &rArr; SimpleString::operator +=(const SimpleString&) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::setInternalBufferTo(char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparisonFailure::ComparisonFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[2d9]"></a>UtestShell::getTestResult()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, utest.o(i._ZN10UtestShell13getTestResultEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = UtestShell::getTestResult() &rArr; OutsideTestRunnerUTest::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::failWith(const TestFailure&, const TestTerminator&)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::fail(const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::printVeryVerbose(const char*)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongsEqual(long, long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCompare(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[329]"></a>UtestShell::setLineNumber(unsigned)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShell13setLineNumberEj))
<BR><BR>[Called By]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[fe]"></a>UtestShell::setRunIgnored()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShell13setRunIgnoredEv))
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[2f1]"></a>UtestShell::setTestResult(TestResult*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShell13setTestResultEP10TestResult))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)
</UL>

<P><STRONG><a name="[3a5]"></a>UtestShell::setCrashOnFail()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShell14setCrashOnFailEv))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[2f2]"></a>UtestShell::setCurrentTest(UtestShell*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShell14setCurrentTestEPS_))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)
</UL>

<P><STRONG><a name="[f5]"></a>UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 120 bytes, Stack size 120 bytes, utest.o(i._ZN10UtestShell15assertBitsEqualEmmmjPKcS1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, unsigned, const TestTerminator&) &rArr; BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e6]"></a>UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 178 bytes, Stack size 112 bytes, utest.o(i._ZN10UtestShell15assertCstrEqualEPKcS1_S1_S1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, unsigned, const TestTerminator&) &rArr; StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrCmp(const char*, const char*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::~StringEqualFailure()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e7]"></a>UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 180 bytes, Stack size 112 bytes, utest.o(i._ZN10UtestShell16assertCstrNEqualEPKcS1_jS1_S1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, unsigned, const TestTerminator&) &rArr; StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCmp(const char*, const char*, unsigned)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::~StringEqualFailure()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[eb]"></a>UtestShell::assertLongsEqual(long, long, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 108 bytes, Stack size 112 bytes, utest.o(i._ZN10UtestShell16assertLongsEqualEllPKcS1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = UtestShell::assertLongsEqual(long, long, const char*, const char*, unsigned, const TestTerminator&) &rArr; LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&) &rArr; BracketsFormattedHexStringFrom(long) &rArr; HexStringFrom(long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[fb]"></a>UtestShell::printVeryVerbose(const char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, utest.o(i._ZN10UtestShell16printVeryVerboseEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = UtestShell::printVeryVerbose(const char*) &rArr; UtestShell::getTestResult() &rArr; OutsideTestRunnerUTest::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[f4]"></a>UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 184 bytes, Stack size 112 bytes, utest.o(i._ZN10UtestShell17assertBinaryEqualEPKvS1_jPKcS3_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 648<LI>Call Chain = UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, unsigned, const TestTerminator&) &rArr; BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::MemCmp(const void*, const void*, unsigned)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::~BinaryEqualFailure()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e9]"></a>UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, unsigned)</STRONG> (Thumb, 278 bytes, Stack size 160 bytes, utest.o(i._ZN10UtestShell18assertCstrContainsEPKcS1_S1_S1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, unsigned) &rArr; ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::~ContainsFailure()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[f2]"></a>UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 128 bytes, Stack size 136 bytes, utest.o(i._ZN10UtestShell18assertDoublesEqualEdddPKcS1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 632<LI>Call Chain = UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, unsigned, const TestTerminator&) &rArr; DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubles_equal(double, double, double)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[f0]"></a>UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 134 bytes, Stack size 128 bytes, utest.o(i._ZN10UtestShell19assertPointersEqualEPKvS1_PKcS3_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, unsigned, const TestTerminator&) &rArr; EqualsFailure::EqualsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::~EqualsFailure()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[ed]"></a>UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 116 bytes, Stack size 120 bytes, utest.o(i._ZN10UtestShell20assertLongLongsEqualExxPKcS1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, unsigned, const TestTerminator&) &rArr; LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&) &rArr; BracketsFormattedHexStringFrom(long long) &rArr; HexStringFrom(long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e8]"></a>UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, unsigned)</STRONG> (Thumb, 214 bytes, Stack size 128 bytes, utest.o(i._ZN10UtestShell21assertCstrNoCaseEqualEPKcS1_S1_S1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, unsigned) &rArr; StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::equalsNoCase(const SimpleString&) const
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::~StringEqualNoCaseFailure()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[ef]"></a>UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 108 bytes, Stack size 112 bytes, utest.o(i._ZN10UtestShell22assertSignedBytesEqualEaaPKcS1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 672<LI>Call Chain = UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, unsigned, const TestTerminator&) &rArr; SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&) &rArr; BracketsFormattedHexStringFrom(signed char) &rArr; HexStringFrom(signed char) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[fd]"></a>UtestShell::setRunInSeperateProcess()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShell23setRunInSeperateProcessEv))
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[ea]"></a>UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, unsigned)</STRONG> (Thumb, 278 bytes, Stack size 160 bytes, utest.o(i._ZN10UtestShell24assertCstrNoCaseContainsEPKcS1_S1_S1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 592<LI>Call Chain = UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, unsigned) &rArr; ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::containsNoCase(const SimpleString&) const
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::~ContainsFailure()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[ec]"></a>UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 108 bytes, Stack size 112 bytes, utest.o(i._ZN10UtestShell24assertUnsignedLongsEqualEmmPKcS1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 656<LI>Call Chain = UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, unsigned, const TestTerminator&) &rArr; UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&) &rArr; BracketsFormattedHexStringFrom(unsigned long) &rArr; HexStringFrom(unsigned long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[294]"></a>UtestShell::getCurrentTestTerminator()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShell24getCurrentTestTerminatorEv))
<BR><BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::failWith(const TestFailure&)
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FirstTestGroup_FirstTest_Test::testBody()
<LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkedMalloc(unsigned)
</UL>

<P><STRONG><a name="[102]"></a>UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&)</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, utest.o(i._ZN10UtestShell26runOneTestInCurrentProcessEP10TestPluginR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = UtestShell::runOneTestInCurrentProcess(TestPlugin*, TestResult&) &rArr; UtestShell::getTestResult() &rArr; OutsideTestRunnerUTest::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
<LI><a href="#[2f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::setCurrentTest(UtestShell*)
<LI><a href="#[2f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::setTestResult(TestResult*)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[f1]"></a>UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 134 bytes, Stack size 128 bytes, utest.o(i._ZN10UtestShell27assertFunctionPointersEqualEPFvvES1_PKcS3_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 584<LI>Call Chain = UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, unsigned, const TestTerminator&) &rArr; EqualsFailure::EqualsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(void(*)())
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::~EqualsFailure()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[ee]"></a>UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 116 bytes, Stack size 120 bytes, utest.o(i._ZN10UtestShell28assertUnsignedLongLongsEqualEyyPKcS1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 664<LI>Call Chain = UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, unsigned, const TestTerminator&) &rArr; UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&) &rArr; BracketsFormattedHexStringFrom(unsigned long long) &rArr; HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[f7]"></a>UtestShell::fail(const char*, const char*, unsigned, const TestTerminator&)</STRONG> (Thumb, 96 bytes, Stack size 104 bytes, utest.o(i._ZN10UtestShell4failEPKcS1_jRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 344<LI>Call Chain = UtestShell::fail(const char*, const char*, unsigned, const TestTerminator&) &rArr; FailFailure::FailFailure(UtestShell*, const char*, unsigned, const SimpleString&) &rArr; TestFailure::TestFailure(UtestShell*, const char*, unsigned) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::FailFailure(UtestShell*, const char*, unsigned, const SimpleString&)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[3d9]"></a>UtestShell::crash()</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, utest.o(i._ZN10UtestShell5crashEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = UtestShell::crash()
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashingTestTerminator::exitCurrentTest() const
</UL>

<P><STRONG><a name="[f9]"></a>UtestShell::print(const char*, const char*, unsigned)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, utest.o(i._ZN10UtestShell5printEPKcS1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = UtestShell::print(const char*, const char*, unsigned) &rArr; StringFrom(unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(unsigned)
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[fa]"></a>UtestShell::print(const SimpleString&, const char*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, utest.o(i._ZN10UtestShell5printERK12SimpleStringPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UtestShell::print(const SimpleString&, const char*, unsigned) &rArr; SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[df]"></a>UtestShell::addTest(UtestShell*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShell7addTestEPS_))
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[f8]"></a>UtestShell::exitTest(const TestTerminator&)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, utest.o(i._ZN10UtestShell8exitTestERK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UtestShell::exitTest(const TestTerminator&)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[103]"></a>UtestShell::failWith(const TestFailure&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, utest.o(i._ZN10UtestShell8failWithERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UtestShell::failWith(const TestFailure&)
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrentTestTerminator()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[104]"></a>UtestShell::failWith(const TestFailure&, const TestTerminator&)</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, utest.o(i._ZN10UtestShell8failWithERK11TestFailureRK14TestTerminator))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = UtestShell::failWith(const TestFailure&, const TestTerminator&) &rArr; UtestShell::getTestResult() &rArr; OutsideTestRunnerUTest::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[3ac]"></a>UtestShell::UtestShell(const char*, const char*, const char*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, utest.o(i._ZN10UtestShellC1EPKcS1_S1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UtestShell::UtestShell(const char*, const char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::OutsideTestRunnerUTest()
</UL>

<P><STRONG><a name="[433]"></a>UtestShell::UtestShell__sub_object(const char*, const char*, const char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, utest.o(i._ZN10UtestShellC1EPKcS1_S1_j), UNUSED)

<P><STRONG><a name="[3de]"></a>UtestShell::UtestShell()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShellC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_test_cpp_fe8858fa
</UL>

<P><STRONG><a name="[434]"></a>UtestShell::UtestShell__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShellC1Ev), UNUSED)

<P><STRONG><a name="[de]"></a>UtestShell::~UtestShell__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZN10UtestShellD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = UtestShell::~UtestShell__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::~UtestShell()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV10UtestShell)
</UL>
<P><STRONG><a name="[dd]"></a>UtestShell::~UtestShell()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShellD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FirstTestGroup_FirstTest_TestShell::~TEST_FirstTestGroup_FirstTest_TestShell()
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::~OutsideTestRunnerUTest()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::~UtestShell__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV10UtestShell)
</UL>
<P><STRONG><a name="[435]"></a>UtestShell::~UtestShell__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, utest.o(i._ZN10UtestShellD1Ev), UNUSED)

<P><STRONG><a name="[1c4]"></a>__cxxabiv1::__class_type_info::~__class_type_info__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib_rtti_impl.o(i._ZN10__cxxabiv117__class_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cxxabiv1::__class_type_info::~__class_type_info__deallocating() &rArr; __cxxabiv1::__class_type_info::~__class_type_info()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::~__class_type_info()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[1c3]"></a>__cxxabiv1::__class_type_info::~__class_type_info()</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lib_rtti_impl.o(i._ZN10__cxxabiv117__class_type_infoD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxxabiv1::__class_type_info::~__class_type_info()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::~__si_class_type_info()
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::~__class_type_info__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv117__class_type_infoE)
</UL>
<P><STRONG><a name="[436]"></a>__cxxabiv1::__class_type_info::~__class_type_info__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, lib_rtti_impl.o(i._ZN10__cxxabiv117__class_type_infoD1Ev), UNUSED)

<P><STRONG><a name="[1c6]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, lib_rtti_impl.o(i._ZN10__cxxabiv120__si_class_type_infoD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating() &rArr; __cxxabiv1::__si_class_type_info::~__si_class_type_info() &rArr; __cxxabiv1::__class_type_info::~__class_type_info()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::~__si_class_type_info()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[1c5]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, lib_rtti_impl.o(i._ZN10__cxxabiv120__si_class_type_infoD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __cxxabiv1::__si_class_type_info::~__si_class_type_info() &rArr; __cxxabiv1::__class_type_info::~__class_type_info()
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__class_type_info::~__class_type_info()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxxabiv1::__si_class_type_info::~__si_class_type_info__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> lib_rtti_impl.o(.constdata__ZTVN10__cxxabiv120__si_class_type_infoE)
</UL>
<P><STRONG><a name="[437]"></a>__cxxabiv1::__si_class_type_info::~__si_class_type_info__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, lib_rtti_impl.o(i._ZN10__cxxabiv120__si_class_type_infoD1Ev), UNUSED)

<P><STRONG><a name="[2f4]"></a>FailFailure::FailFailure(UtestShell*, const char*, unsigned, const SimpleString&)</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, testfailure.o(i._ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = FailFailure::FailFailure(UtestShell*, const char*, unsigned, const SimpleString&) &rArr; TestFailure::TestFailure(UtestShell*, const char*, unsigned) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::fail(const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
</UL>

<P><STRONG><a name="[438]"></a>FailFailure::FailFailure__sub_object(UtestShell*, const char*, unsigned, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, testfailure.o(i._ZN11FailFailureC1EP10UtestShellPKcjRK12SimpleString), UNUSED)

<P><STRONG><a name="[107]"></a>FailFailure::~FailFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN11FailFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FailFailure::~FailFailure__deallocating() &rArr; FailFailure::~FailFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::~FailFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV11FailFailure)
</UL>
<P><STRONG><a name="[106]"></a>FailFailure::~FailFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZN11FailFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = FailFailure::~FailFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::~FailFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV11FailFailure)
</UL>
<P><STRONG><a name="[439]"></a>FailFailure::~FailFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZN11FailFailureD1Ev), UNUSED)

<P><STRONG><a name="[334]"></a>SimpleMutex::Lock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, simplemutex.o(i._ZN11SimpleMutex4LockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleMutex::Lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::ScopedMutexLock(SimpleMutex*)
</UL>

<P><STRONG><a name="[336]"></a>SimpleMutex::Unlock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, simplemutex.o(i._ZN11SimpleMutex6UnlockEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleMutex::Unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
</UL>

<P><STRONG><a name="[35f]"></a>SimpleMutex::SimpleMutex()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, simplemutex.o(i._ZN11SimpleMutexC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleMutex::SimpleMutex()
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)
</UL>

<P><STRONG><a name="[43a]"></a>SimpleMutex::SimpleMutex__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, simplemutex.o(i._ZN11SimpleMutexC1Ev), UNUSED)

<P><STRONG><a name="[360]"></a>SimpleMutex::~SimpleMutex()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, simplemutex.o(i._ZN11SimpleMutexD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleMutex::~SimpleMutex()
</UL>
<BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::~MemoryLeakDetector()
</UL>

<P><STRONG><a name="[43b]"></a>SimpleMutex::~SimpleMutex__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, simplemutex.o(i._ZN11SimpleMutexD1Ev), UNUSED)

<P><STRONG><a name="[2f6]"></a>TestFailure::createUserText(const SimpleString&)</STRONG> (Thumb, 98 bytes, Stack size 40 bytes, testfailure.o(i._ZN11TestFailure14createUserTextERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TestFailure::createUserText(const SimpleString&) &rArr; SimpleString::operator +=(const SimpleString&) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::setInternalBufferTo(char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isEmpty() const
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::startsWith(const SimpleString&) const
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparisonFailure::ComparisonFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
</UL>

<P><STRONG><a name="[2f9]"></a>TestFailure::createButWasString(const SimpleString&, const SimpleString&)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, testfailure.o(i._ZN11TestFailure18createButWasStringERK12SimpleStringS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 408<LI>Call Chain = TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
</UL>

<P><STRONG><a name="[2fa]"></a>TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)</STRONG> (Thumb, 230 bytes, Stack size 80 bytes, testfailure.o(i._ZN11TestFailure27createDifferenceAtPosStringERK12SimpleStringjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
</UL>

<P><STRONG><a name="[2f5]"></a>TestFailure::TestFailure(UtestShell*, const char*, unsigned)</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, testfailure.o(i._ZN11TestFailureC1EP10UtestShellPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TestFailure::TestFailure(UtestShell*, const char*, unsigned) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getLineNumber() const
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFile() const
</UL>
<BR>[Called By]<UL><LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::FailFailure(UtestShell*, const char*, unsigned, const SimpleString&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparisonFailure::ComparisonFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
</UL>

<P><STRONG><a name="[43c]"></a>TestFailure::TestFailure__sub_object(UtestShell*, const char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, testfailure.o(i._ZN11TestFailureC1EP10UtestShellPKcj), UNUSED)

<P><STRONG><a name="[2c2]"></a>TestFailure::TestFailure(UtestShell*, const SimpleString&)</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, testfailure.o(i._ZN11TestFailureC1EP10UtestShellRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = TestFailure::TestFailure(UtestShell*, const SimpleString&) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getLineNumber() const
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFile() const
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DummyPlatformSpecificRunTestInASeperateProcess(UtestShell*, TestPlugin*, TestResult*)
</UL>

<P><STRONG><a name="[43d]"></a>TestFailure::TestFailure__sub_object(UtestShell*, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, testfailure.o(i._ZN11TestFailureC1EP10UtestShellRK12SimpleString), UNUSED)

<P><STRONG><a name="[2ff]"></a>TestFailure::TestFailure(const TestFailure&)</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, testfailure.o(i._ZN11TestFailureC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TestFailure::TestFailure(const TestFailure&) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[43e]"></a>TestFailure::TestFailure__sub_object(const TestFailure&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, testfailure.o(i._ZN11TestFailureC1ERKS_), UNUSED)

<P><STRONG><a name="[110]"></a>TestFailure::~TestFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN11TestFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TestFailure::~TestFailure__deallocating() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV11TestFailure)
</UL>
<P><STRONG><a name="[10f]"></a>TestFailure::~TestFailure()</STRONG> (Thumb, 68 bytes, Stack size 8 bytes, testfailure.o(i._ZN11TestFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::fail(const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongsEqual(long, long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCompare(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::~FailFailure()
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure()
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure()
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::~StringEqualNoCaseFailure()
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::~SignedBytesEqualFailure()
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::~LongLongsEqualFailure()
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::~DoublesEqualFailure()
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::~StringEqualFailure()
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::~BinaryEqualFailure()
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::~LongsEqualFailure()
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparisonFailure::~ComparisonFailure()
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::~CheckEqualFailure()
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::~BitsEqualFailure()
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::~ContainsFailure()
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::~EqualsFailure()
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::~CheckFailure()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__deallocating()
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DummyPlatformSpecificRunTestInASeperateProcess(UtestShell*, TestPlugin*, TestResult*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV11TestFailure)
</UL>
<P><STRONG><a name="[43f]"></a>TestFailure::~TestFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, testfailure.o(i._ZN11TestFailureD1Ev), UNUSED)

<P><STRONG><a name="[2da]"></a>CheckFailure::CheckFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, testfailure.o(i._ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = CheckFailure::CheckFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createUserText(const SimpleString&) &rArr; SimpleString::operator +=(const SimpleString&) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::setInternalBufferTo(char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[440]"></a>CheckFailure::CheckFailure__sub_object(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, testfailure.o(i._ZN12CheckFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_), UNUSED)

<P><STRONG><a name="[112]"></a>CheckFailure::~CheckFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN12CheckFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CheckFailure::~CheckFailure__deallocating() &rArr; CheckFailure::~CheckFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::~CheckFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV12CheckFailure)
</UL>
<P><STRONG><a name="[111]"></a>CheckFailure::~CheckFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN12CheckFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CheckFailure::~CheckFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::~CheckFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV12CheckFailure)
</UL>
<P><STRONG><a name="[441]"></a>CheckFailure::~CheckFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN12CheckFailureD1Ev), UNUSED)

<P><STRONG><a name="[300]"></a>SimpleString::copyToNewBuffer(const char*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleString15copyToNewBufferEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SimpleString::copyToNewBuffer(const char*, unsigned) &rArr; SimpleString::allocStringBuffer(unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCpy(char*, const char*, unsigned)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::allocStringBuffer(unsigned, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned)
</UL>

<P><STRONG><a name="[2a2]"></a>SimpleString::allocStringBuffer(unsigned, const char*, unsigned)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, simplestring.o(i._ZN12SimpleString17allocStringBufferEjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = SimpleString::allocStringBuffer(unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getStringAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getEmptyString() const
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::setInternalBufferToNewBuffer(unsigned)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToNewBuffer(const char*, unsigned)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
</UL>

<P><STRONG><a name="[302]"></a>SimpleString::getStringAllocator()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, simplestring.o(i._ZN12SimpleString18getStringAllocatorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewArrayAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::allocStringBuffer(unsigned, const char*, unsigned)
</UL>

<P><STRONG><a name="[2a3]"></a>SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, simplestring.o(i._ZN12SimpleString19deallocStringBufferEPcjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[302]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getStringAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocateInternalBuffer()
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
</UL>

<P><STRONG><a name="[303]"></a>SimpleString::setInternalBufferTo(char*, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleString19setInternalBufferToEPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SimpleString::setInternalBufferTo(char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocateInternalBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
</UL>

<P><STRONG><a name="[305]"></a>SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)</STRONG> (Thumb, 122 bytes, Stack size 56 bytes, simplestring.o(i._ZN12SimpleString22padStringsToSameLengthERS_S0_c))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + In Cycle
<LI>Call Chain = SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char) &rArr;  SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*, unsigned)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
</UL>

<P><STRONG><a name="[304]"></a>SimpleString::deallocateInternalBuffer()</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, simplestring.o(i._ZN12SimpleString24deallocateInternalBufferEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::setInternalBufferAsEmptyString()
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::setInternalBufferToNewBuffer(unsigned)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::setInternalBufferTo(char*, unsigned)
</UL>

<P><STRONG><a name="[306]"></a>SimpleString::setInternalBufferToNewBuffer(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleString28setInternalBufferToNewBufferEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SimpleString::setInternalBufferToNewBuffer(unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocateInternalBuffer()
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::allocStringBuffer(unsigned, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::printable() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*, unsigned)
</UL>

<P><STRONG><a name="[307]"></a>SimpleString::copyBufferToNewInternalBuffer(const char*)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleString29copyBufferToNewInternalBufferEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>

<P><STRONG><a name="[309]"></a>SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleString29copyBufferToNewInternalBufferEPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocateInternalBuffer()
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToNewBuffer(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyBufferToNewInternalBuffer(const SimpleString&)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyBufferToNewInternalBuffer(const char*)
</UL>

<P><STRONG><a name="[30a]"></a>SimpleString::copyBufferToNewInternalBuffer(const SimpleString&)</STRONG> (Thumb, 26 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleString29copyBufferToNewInternalBufferERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = SimpleString::copyBufferToNewInternalBuffer(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[309]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
</UL>

<P><STRONG><a name="[30b]"></a>SimpleString::setInternalBufferAsEmptyString()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simplestring.o(i._ZN12SimpleString30setInternalBufferAsEmptyStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SimpleString::setInternalBufferAsEmptyString() &rArr; SimpleString::getEmptyString() const &rArr; SimpleString::allocStringBuffer(unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getEmptyString() const
<LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocateInternalBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
</UL>

<P><STRONG><a name="[3d5]"></a>SimpleString::isControlWithShortEscapeSequence(char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, simplestring.o(i._ZN12SimpleString32isControlWithShortEscapeSequenceEc))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::printable() const
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getPrintableSize() const
</UL>

<P><STRONG><a name="[30d]"></a>SimpleString::AtoI(const char*)</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, simplestring.o(i._ZN12SimpleString4AtoIEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleString::AtoI(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isSpace(char)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isDigit(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setRepeatCount(int, const char*const *, int&)
</UL>

<P><STRONG><a name="[310]"></a>SimpleString::AtoU(const char*)</STRONG> (Thumb, 54 bytes, Stack size 4 bytes, simplestring.o(i._ZN12SimpleString4AtoUEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SimpleString::AtoU(const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[30e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isSpace(char)
<LI><a href="#[30f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isDigit(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setShuffle(int, const char*const *, int&)
</UL>

<P><STRONG><a name="[2e6]"></a>SimpleString::MemCmp(const void*, const void*, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleString6MemCmpEPKvS1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SimpleString::MemCmp(const void*, const void*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[2e2]"></a>SimpleString::StrCmp(const char*, const char*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, simplestring.o(i._ZN12SimpleString6StrCmpEPKcS1_))
<BR><BR>[Called By]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::isOfEqualType(TestMemoryAllocator*)
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::endsWith(const SimpleString&) const
</UL>

<P><STRONG><a name="[308]"></a>SimpleString::StrLen(const char*)</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, simplestring.o(i._ZN12SimpleString6StrLenEPKc))
<BR><BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*, unsigned)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrStr(const char*, const char*)
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyBufferToNewInternalBuffer(const char*)
</UL>

<P><STRONG><a name="[311]"></a>SimpleString::StrStr(const char*, const char*)</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleString6StrStrEPKcS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = SimpleString::StrStr(const char*, const char*) &rArr; SimpleString::StrNCmp(const char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCmp(const char*, const char*, unsigned)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::startsWith(const SimpleString&) const
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::count(const SimpleString&) const
</UL>

<P><STRONG><a name="[2e3]"></a>SimpleString::StrNCmp(const char*, const char*, unsigned)</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, simplestring.o(i._ZN12SimpleString7StrNCmpEPKcS1_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SimpleString::StrNCmp(const char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrStr(const char*, const char*)
</UL>

<P><STRONG><a name="[301]"></a>SimpleString::StrNCpy(char*, const char*, unsigned)</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, simplestring.o(i._ZN12SimpleString7StrNCpyEPcPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SimpleString::StrNCpy(char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::printable() const
<LI><a href="#[2fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*, unsigned)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToNewBuffer(const char*, unsigned)
</UL>

<P><STRONG><a name="[312]"></a>SimpleString::ToLower(char)</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, simplestring.o(i._ZN12SimpleString7ToLowerEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SimpleString::ToLower(char)
</UL>
<BR>[Calls]<UL><LI><a href="#[313]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isUpper(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::lowerCase() const
</UL>

<P><STRONG><a name="[30f]"></a>SimpleString::isDigit(char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, simplestring.o(i._ZN12SimpleString7isDigitEc))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::AtoU(const char*)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::AtoI(const char*)
</UL>

<P><STRONG><a name="[30e]"></a>SimpleString::isSpace(char)</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, simplestring.o(i._ZN12SimpleString7isSpaceEc))
<BR><BR>[Called By]<UL><LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::AtoU(const char*)
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::AtoI(const char*)
</UL>

<P><STRONG><a name="[313]"></a>SimpleString::isUpper(char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, simplestring.o(i._ZN12SimpleString7isUpperEc))
<BR><BR>[Called By]<UL><LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::ToLower(char)
</UL>

<P><STRONG><a name="[314]"></a>SimpleString::replace(const char*, const char*)</STRONG> (Thumb, 198 bytes, Stack size 64 bytes, simplestring.o(i._ZN12SimpleString7replaceEPKcS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SimpleString::replace(const char*, const char*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCmp(const char*, const char*, unsigned)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::count(const SimpleString&) const
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCpy(char*, const char*, unsigned)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
<LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::setInternalBufferAsEmptyString()
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::setInternalBufferTo(char*, unsigned)
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::allocStringBuffer(unsigned, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::encodeXmlText(const SimpleString&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[317]"></a>SimpleString::replace(char, char)</STRONG> (Thumb, 44 bytes, Stack size 20 bytes, simplestring.o(i._ZN12SimpleString7replaceEcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SimpleString::replace(char, char) &rArr; SimpleString::size() const
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::encodeFileName(const SimpleString&)
</UL>

<P><STRONG><a name="[3d6]"></a>SimpleString::isControl(char)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, simplestring.o(i._ZN12SimpleString9isControlEc))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::printable() const
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getPrintableSize() const
</UL>

<P><STRONG><a name="[27b]"></a>SimpleString::SimpleString(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleStringC1EPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::setInternalBufferAsEmptyString()
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyBufferToNewInternalBuffer(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::CommandLineArguments(int, const char*const *)
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
<LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::TeamCityTestOutput()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getMacroName() const
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::fail(const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongsEqual(long, long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCompare(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestCaseResultNode::JUnitTestCaseResultNode()
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutputImpl::JUnitTestOutputImpl()
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestSuiteSummary()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeProperties()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFileEnding()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeXmlHeader()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestCases()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::createFileName(const SimpleString&)
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::encodeXmlText(const SimpleString&)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subStringFromTill(char, char) const
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::operator [](unsigned)
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::SimpleStringCollection()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeGroupFilter(int, const char*const *, int&)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeNameFilter(int, const char*const *, int&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setRepeatCount(int, const char*const *, int&)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setPackageName(int, const char*const *, int&)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupFilter(int, const char*const *, int&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setOutputType(int, const char*const *, int&)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addNameFilter(int, const char*const *, int&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setShuffle(int, const char*const *, int&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const void*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(void(*)())
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFile() const
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::match(const char*, const TestFilter*) const
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::printable() const
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexString(SimpleString)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromMaskedBits(unsigned long, unsigned long, unsigned)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(double, int)
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const char*)
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;&lang;Func64&rang;
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DummyPlatformSpecificRunTestInASeperateProcess(UtestShell*, TestPlugin*, TestResult*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestLocations(TestResult&)
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::TestPlugin(TestPlugin*)
</UL>

<P><STRONG><a name="[442]"></a>SimpleString::SimpleString__sub_object(const char*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleStringC1EPKc), UNUSED)

<P><STRONG><a name="[2fb]"></a>SimpleString::SimpleString(const char*, unsigned)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, simplestring.o(i._ZN12SimpleStringC1EPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SimpleString::SimpleString(const char*, unsigned) &rArr; SimpleString::setInternalBufferToNewBuffer(unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCpy(char*, const char*, unsigned)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::setInternalBufferToNewBuffer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
</UL>

<P><STRONG><a name="[443]"></a>SimpleString::SimpleString__sub_object(const char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, simplestring.o(i._ZN12SimpleStringC1EPKcj), UNUSED)

<P><STRONG><a name="[2d1]"></a>SimpleString::SimpleString(const SimpleString&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleStringC1ERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
<LI><a href="#[307]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyBufferToNewInternalBuffer(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(const TestFailure&)
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::encodeFileName(const SimpleString&)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::TestPlugin(const SimpleString&)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::getTestNameOnly() const
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::getTestFileName() const
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::getTestName() const
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::getFileName() const
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::getMessage() const
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::lowerCase() const
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, unsigned)
</UL>

<P><STRONG><a name="[444]"></a>SimpleString::SimpleString__sub_object(const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleStringC1ERKS_), UNUSED)

<P><STRONG><a name="[93]"></a>SimpleString::~SimpleString()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, simplestring.o(i._ZN12SimpleStringD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[304]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::deallocateInternalBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin()
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, unsigned)
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::fail(const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongsEqual(long, long, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCompare(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertTrue(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printDouble(double)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestGroupResult::~JUnitTestGroupResult()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestSuiteSummary()
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestGroupToFile()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeProperties()
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFileEnding()
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeXmlHeader()
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestCases()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::createFileName(const SimpleString&)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::operator [](unsigned)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::~SimpleStringCollection()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments()
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeGroupFilter(int, const char*const *, int&)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeNameFilter(int, const char*const *, int&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setRepeatCount(int, const char*const *, int&)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setPackageName(int, const char*const *, int&)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupFilter(int, const char*const *, int&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setOutputType(int, const char*const *, int&)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addNameFilter(int, const char*const *, int&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setShuffle(int, const char*const *, int&)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::~TestFilter()
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::containsNoCase(const SimpleString&) const
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::equalsNoCase(const SimpleString&) const
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparisonFailure::ComparisonFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const void*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(void(*)())
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::match(const char*, const TestFilter*) const
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::print(long)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::print(unsigned)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::~TeamCityTestOutput()
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestEnded(const TestResult&)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printFailure(const TestFailure&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::printable() const
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(unsigned long long)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(long long)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(unsigned long)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(long)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(signed char)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexString(SimpleString)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintableStringFromOrNull(const char*)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
<LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DummyPlatformSpecificRunTestInASeperateProcess(UtestShell*, TestPlugin*, TestResult*)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestLocations(TestResult&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithGroup(const SimpleString&)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithName(const SimpleString&)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::endOfGroup(UtestShell*)
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printErrorInFileOnLineFormattedForWorkingEnvironment(SimpleString, unsigned)
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForTestAndFailure(const TestFailure&)
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFileAndLineForFailure(const TestFailure&)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> simplestring.o(i._ZN22SimpleStringCollection8allocateEj)
<LI> simplestring.o(i._ZN22SimpleStringCollectionD1Ev)
</UL>
<P><STRONG><a name="[445]"></a>SimpleString::~SimpleString__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, simplestring.o(i._ZN12SimpleStringD1Ev), UNUSED)

<P><STRONG><a name="[28e]"></a>SimpleString::operator =(const SimpleString&)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleStringaSERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyBufferToNewInternalBuffer(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::setPackageName(const SimpleString&)
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::FailFailure(UtestShell*, const char*, unsigned, const SimpleString&)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::operator [](unsigned)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setPackageName(int, const char*const *, int&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparisonFailure::ComparisonFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;VStringFromFormat(const char*, std::__va_list)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[2a8]"></a>SimpleString::operator +=(const char*)</STRONG> (Thumb, 68 bytes, Stack size 32 bytes, simplestring.o(i._ZN12SimpleStringpLEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = SimpleString::operator +=(const char*) &rArr; SimpleString::setInternalBufferTo(char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCpy(char*, const char*, unsigned)
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
<LI><a href="#[303]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::setInternalBufferTo(char*, unsigned)
<LI><a href="#[300]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyToNewBuffer(const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFormattedName() const
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, unsigned)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::print(const char*)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::createFileName(const SimpleString&)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparisonFailure::ComparisonFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromMaskedBits(unsigned long, unsigned long, unsigned)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestLocations(TestResult&)
</UL>

<P><STRONG><a name="[29e]"></a>SimpleString::operator +=(const SimpleString&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, simplestring.o(i._ZN12SimpleStringpLERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = SimpleString::operator +=(const SimpleString&) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::setInternalBufferTo(char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
</UL>
<BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, unsigned)
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::createFileName(const SimpleString&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)
<LI><a href="#[2e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparisonFailure::ComparisonFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::EqualsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::CheckFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestLocations(TestResult&)
</UL>

<P><STRONG><a name="[116]"></a>TestRegistry::countTests()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, testregistry.o(i._ZN12TestRegistry10countTestsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestRegistry::countTests()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[318]"></a>TestRegistry::endOfGroup(UtestShell*)</STRONG> (Thumb, 100 bytes, Stack size 56 bytes, testregistry.o(i._ZN12TestRegistry10endOfGroupEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TestRegistry::endOfGroup(UtestShell*) &rArr; UtestShell::getGroup() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !=(const SimpleString&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::runAllTests(TestResult&)
</UL>

<P><STRONG><a name="[117]"></a>TestRegistry::runAllTests(TestResult&)</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, testregistry.o(i._ZN12TestRegistry11runAllTestsER10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = TestRegistry::runAllTests(TestResult&) &rArr; TestRegistry::testShouldRun(UtestShell*, TestResult&) &rArr; UtestShell::shouldRun(const TestFilter*, const TestFilter*) const &rArr; UtestShell::match(const char*, const TestFilter*) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::testShouldRun(UtestShell*, TestResult&)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::endOfGroup(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[124]"></a>TestRegistry::countPlugins()</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, testregistry.o(i._ZN12TestRegistry12countPluginsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TestRegistry::countPlugins() &rArr; NullTestPlugin::instance() &rArr; NullTestPlugin::NullTestPlugin() &rArr; TestPlugin::TestPlugin(TestPlugin*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[125]"></a>TestRegistry::getFirstTest()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testregistry.o(i._ZN12TestRegistry12getFirstTestEv))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[120]"></a>TestRegistry::resetPlugins()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, testregistry.o(i._ZN12TestRegistry12resetPluginsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TestRegistry::resetPlugins() &rArr; NullTestPlugin::instance() &rArr; NullTestPlugin::NullTestPlugin() &rArr; TestPlugin::TestPlugin(TestPlugin*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[119]"></a>TestRegistry::reverseTests()</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, testregistry.o(i._ZN12TestRegistry12reverseTestsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TestRegistry::reverseTests() &rArr; UtestShellPointerArray::UtestShellPointerArray(UtestShell*) &rArr; operator new[] (unsigned, const char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::getFirstTest() const
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::~UtestShellPointerArray()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::UtestShellPointerArray(UtestShell*)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::reverse()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[118]"></a>TestRegistry::shuffleTests(unsigned)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, testregistry.o(i._ZN12TestRegistry12shuffleTestsEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = TestRegistry::shuffleTests(unsigned) &rArr; UtestShellPointerArray::UtestShellPointerArray(UtestShell*) &rArr; operator new[] (unsigned, const char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::getFirstTest() const
<LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::~UtestShellPointerArray()
<LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::UtestShellPointerArray(UtestShell*)
<LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::shuffle(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[11f]"></a>TestRegistry::installPlugin(TestPlugin*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, testregistry.o(i._ZN12TestRegistry13installPluginEP10TestPlugin))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestRegistry::installPlugin(TestPlugin*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[3a3]"></a>TestRegistry::setRunIgnored()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testregistry.o(i._ZN12TestRegistry13setRunIgnoredEv))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[31b]"></a>TestRegistry::testShouldRun(UtestShell*, TestResult&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testregistry.o(i._ZN12TestRegistry13testShouldRunEP10UtestShellR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = TestRegistry::testShouldRun(UtestShell*, TestResult&) &rArr; UtestShell::shouldRun(const TestFilter*, const TestFilter*) const &rArr; UtestShell::match(const char*, const TestFilter*) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::shouldRun(const TestFilter*, const TestFilter*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::runAllTests(TestResult&)
</UL>

<P><STRONG><a name="[121]"></a>TestRegistry::getFirstPlugin()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testregistry.o(i._ZN12TestRegistry14getFirstPluginEv))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[11d]"></a>TestRegistry::setNameFilters(const TestFilter*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testregistry.o(i._ZN12TestRegistry14setNameFiltersEPK10TestFilter))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[122]"></a>TestRegistry::getPluginByName(const SimpleString&)</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, testregistry.o(i._ZN12TestRegistry15getPluginByNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TestRegistry::getPluginByName(const SimpleString&) &rArr; TestPlugin::getPluginByName(const SimpleString&) &rArr;  TestPlugin::getPluginByName(const SimpleString&) (Cycle)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::getPluginByName(const SimpleString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[126]"></a>TestRegistry::getTestWithNext(UtestShell*)</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, testregistry.o(i._ZN12TestRegistry15getTestWithNextEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestRegistry::getTestWithNext(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[11e]"></a>TestRegistry::setGroupFilters(const TestFilter*)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, testregistry.o(i._ZN12TestRegistry15setGroupFiltersEPK10TestFilter))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[115]"></a>TestRegistry::unDoLastAddTest()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, testregistry.o(i._ZN12TestRegistry15unDoLastAddTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestRegistry::unDoLastAddTest()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[127]"></a>TestRegistry::findTestWithName(const SimpleString&)</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, testregistry.o(i._ZN12TestRegistry16findTestWithNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TestRegistry::findTestWithName(const SimpleString&) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[128]"></a>TestRegistry::findTestWithGroup(const SimpleString&)</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, testregistry.o(i._ZN12TestRegistry17findTestWithGroupERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TestRegistry::findTestWithGroup(const SimpleString&) &rArr; UtestShell::getGroup() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[11c]"></a>TestRegistry::listTestLocations(TestResult&)</STRONG> (Thumb, 220 bytes, Stack size 64 bytes, testregistry.o(i._ZN12TestRegistry17listTestLocationsER10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 440<LI>Call Chain = TestRegistry::listTestLocations(TestResult&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getLineNumber() const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFile() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[322]"></a>TestRegistry::getCurrentRegistry()</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, testregistry.o(i._ZN12TestRegistry18getCurrentRegistryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = TestRegistry::getCurrentRegistry() &rArr; TestRegistry::TestRegistry() &rArr; NullTestPlugin::instance() &rArr; NullTestPlugin::NullTestPlugin() &rArr; TestPlugin::TestPlugin(TestPlugin*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::TestRegistry()
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
<LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[11a]"></a>TestRegistry::listTestGroupNames(TestResult&)</STRONG> (Thumb, 232 bytes, Stack size 64 bytes, testregistry.o(i._ZN12TestRegistry18listTestGroupNamesER10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = TestRegistry::listTestGroupNames(TestResult&) &rArr; SimpleString::replace(const char*, const char*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::endsWith(const SimpleString&) const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[123]"></a>TestRegistry::removePluginByName(const SimpleString&)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, testregistry.o(i._ZN12TestRegistry18removePluginByNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TestRegistry::removePluginByName(const SimpleString&) &rArr; operator ==(const SimpleString&, const SimpleString&) &rArr; SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::getName()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[129]"></a>TestRegistry::setCurrentRegistry(TestRegistry*)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testregistry.o(i._ZN12TestRegistry18setCurrentRegistryEPS_))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[11b]"></a>TestRegistry::listTestGroupAndCaseNames(TestResult&)</STRONG> (Thumb, 280 bytes, Stack size 64 bytes, testregistry.o(i._ZN12TestRegistry25listTestGroupAndCaseNamesER10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = TestRegistry::listTestGroupAndCaseNames(TestResult&) &rArr; TestRegistry::testShouldRun(UtestShell*, TestResult&) &rArr; UtestShell::shouldRun(const TestFilter*, const TestFilter*) const &rArr; UtestShell::match(const char*, const TestFilter*) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::endsWith(const SimpleString&) const
<LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::testShouldRun(UtestShell*, TestResult&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[12a]"></a>TestRegistry::setRunTestsInSeperateProcess()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testregistry.o(i._ZN12TestRegistry28setRunTestsInSeperateProcessEv))
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[114]"></a>TestRegistry::addTest(UtestShell*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, testregistry.o(i._ZN12TestRegistry7addTestEP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestRegistry::addTest(UtestShell*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[323]"></a>TestRegistry::TestRegistry()</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, testregistry.o(i._ZN12TestRegistryC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TestRegistry::TestRegistry() &rArr; NullTestPlugin::instance() &rArr; NullTestPlugin::NullTestPlugin() &rArr; TestPlugin::TestPlugin(TestPlugin*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
</UL>
<BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::getCurrentRegistry()
</UL>

<P><STRONG><a name="[446]"></a>TestRegistry::TestRegistry__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, testregistry.o(i._ZN12TestRegistryC1Ev), UNUSED)

<P><STRONG><a name="[113]"></a>TestRegistry::~TestRegistry__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testregistry.o(i._ZN12TestRegistryD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestRegistry::~TestRegistry__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::~TestRegistry()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[8e]"></a>TestRegistry::~TestRegistry()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testregistry.o(i._ZN12TestRegistryD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::~TestRegistry__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> testregistry.o(i._ZN12TestRegistry18getCurrentRegistryEv)
<LI> testregistry.o(.constdata__ZTV12TestRegistry)
</UL>
<P><STRONG><a name="[447]"></a>TestRegistry::~TestRegistry__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, testregistry.o(i._ZN12TestRegistryD1Ev), UNUSED)

<P><STRONG><a name="[2ea]"></a>EqualsFailure::EqualsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 102 bytes, Stack size 48 bytes, testfailure.o(i._ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = EqualsFailure::EqualsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[448]"></a>EqualsFailure::EqualsFailure__sub_object(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, testfailure.o(i._ZN13EqualsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_), UNUSED)

<P><STRONG><a name="[12c]"></a>EqualsFailure::~EqualsFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN13EqualsFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = EqualsFailure::~EqualsFailure__deallocating() &rArr; EqualsFailure::~EqualsFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::~EqualsFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV13EqualsFailure)
</UL>
<P><STRONG><a name="[12b]"></a>EqualsFailure::~EqualsFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN13EqualsFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = EqualsFailure::~EqualsFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertFunctionPointersEqual(void(*)(), void(*)(), const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertPointersEqual(const void*, const void*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::~EqualsFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV13EqualsFailure)
</UL>
<P><STRONG><a name="[449]"></a>EqualsFailure::~EqualsFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN13EqualsFailureD1Ev), UNUSED)

<P><STRONG><a name="[325]"></a>TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, unsigned)</STRONG> (Thumb, 74 bytes, Stack size 32 bytes, utest.o(i._ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, unsigned) &rArr; TestRegistry::getCurrentRegistry() &rArr; TestRegistry::TestRegistry() &rArr; NullTestPlugin::instance() &rArr; NullTestPlugin::NullTestPlugin() &rArr; TestPlugin::TestPlugin(TestPlugin*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::getCurrentRegistry()
<LI><a href="#[329]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::setLineNumber(unsigned)
<LI><a href="#[326]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::setGroupName(const char*)
<LI><a href="#[327]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::setTestName(const char*)
<LI><a href="#[328]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::setFileName(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___8_test_cpp_fe8858fa
</UL>

<P><STRONG><a name="[44a]"></a>TestInstaller::TestInstaller__sub_object(UtestShell&, const char*, const char*, const char*, unsigned)</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, utest.o(i._ZN13TestInstallerC1ER10UtestShellPKcS3_S3_j), UNUSED)

<P><STRONG><a name="[12d]"></a>TestInstaller::~TestInstaller__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZN13TestInstallerD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestInstaller::~TestInstaller__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInstaller::~TestInstaller()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV13TestInstaller)
</UL>
<P><STRONG><a name="[a5]"></a>TestInstaller::~TestInstaller()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(i._ZN13TestInstallerD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInstaller::~TestInstaller__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test.o(i.__sti___8_test_cpp_fe8858fa)
<LI> utest.o(.constdata__ZTV13TestInstaller)
</UL>
<P><STRONG><a name="[44b]"></a>TestInstaller::~TestInstaller__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, utest.o(i._ZN13TestInstallerD1Ev), UNUSED)

<P><STRONG><a name="[12f]"></a>NullTestPlugin::runAllPreTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testplugin.o(i._ZN14NullTestPlugin19runAllPreTestActionER10UtestShellR10TestResult))
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[130]"></a>NullTestPlugin::runAllPostTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testplugin.o(i._ZN14NullTestPlugin20runAllPostTestActionER10UtestShellR10TestResult))
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[2d8]"></a>NullTestPlugin::instance()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, testplugin.o(i._ZN14NullTestPlugin8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = NullTestPlugin::instance() &rArr; NullTestPlugin::NullTestPlugin() &rArr; TestPlugin::TestPlugin(TestPlugin*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
<LI><a href="#[32a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::NullTestPlugin()
</UL>
<BR>[Called By]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::TestPlugin(const SimpleString&)
<LI><a href="#[323]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::TestRegistry()
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::resetPlugins()
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::countPlugins()
</UL>

<P><STRONG><a name="[32a]"></a>NullTestPlugin::NullTestPlugin()</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, testplugin.o(i._ZN14NullTestPluginC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = NullTestPlugin::NullTestPlugin() &rArr; TestPlugin::TestPlugin(TestPlugin*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::TestPlugin(TestPlugin*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
</UL>

<P><STRONG><a name="[44c]"></a>NullTestPlugin::NullTestPlugin__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, testplugin.o(i._ZN14NullTestPluginC1Ev), UNUSED)

<P><STRONG><a name="[12e]"></a>NullTestPlugin::~NullTestPlugin__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testplugin.o(i._ZN14NullTestPluginD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = NullTestPlugin::~NullTestPlugin__deallocating() &rArr; NullTestPlugin::~NullTestPlugin() &rArr; TestPlugin::~TestPlugin() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::~NullTestPlugin()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[8f]"></a>NullTestPlugin::~NullTestPlugin()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, testplugin.o(i._ZN14NullTestPluginD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = NullTestPlugin::~NullTestPlugin() &rArr; TestPlugin::~TestPlugin() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin()
</UL>
<BR>[Called By]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::~NullTestPlugin__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> testplugin.o(i._ZN14NullTestPlugin8instanceEv)
<LI> testplugin.o(.constdata__ZTV14NullTestPlugin)
</UL>
<P><STRONG><a name="[44d]"></a>NullTestPlugin::~NullTestPlugin__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, testplugin.o(i._ZN14NullTestPluginD1Ev), UNUSED)

<P><STRONG><a name="[382]"></a>TestTerminator::TestTerminator__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(i._ZN14TestTerminatorC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::TestTerminatorWithoutExceptions()
<LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::NormalTestTerminator()
</UL>

<P><STRONG><a name="[132]"></a>TestTerminator::~TestTerminator__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZN14TestTerminatorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestTerminator::~TestTerminator__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminator::~TestTerminator__sub_object()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV14TestTerminator)
</UL>
<P><STRONG><a name="[131]"></a>TestTerminator::~TestTerminator__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(i._ZN14TestTerminatorD2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::~NormalTestTerminator()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminator::~TestTerminator__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV14TestTerminator)
</UL>
<P><STRONG><a name="[2e7]"></a>ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 120 bytes, Stack size 56 bytes, testfailure.o(i._ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[44e]"></a>ContainsFailure::ContainsFailure__sub_object(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 56 bytes, testfailure.o(i._ZN15ContainsFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_), UNUSED)

<P><STRONG><a name="[134]"></a>ContainsFailure::~ContainsFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN15ContainsFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ContainsFailure::~ContainsFailure__deallocating() &rArr; ContainsFailure::~ContainsFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::~ContainsFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV15ContainsFailure)
</UL>
<P><STRONG><a name="[133]"></a>ContainsFailure::~ContainsFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN15ContainsFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ContainsFailure::~ContainsFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::~ContainsFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV15ContainsFailure)
</UL>
<P><STRONG><a name="[44f]"></a>ContainsFailure::~ContainsFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN15ContainsFailureD1Ev), UNUSED)

<P><STRONG><a name="[13d]"></a>JUnitTestOutput::printBuffer(const char*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(i._ZN15JUnitTestOutput11printBufferEPKc))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[146]"></a>JUnitTestOutput::writeToFile(const SimpleString&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutput11writeToFileERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JUnitTestOutput::writeToFile(const SimpleString&) &rArr; SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[141]"></a>JUnitTestOutput::printFailure(const TestFailure&)</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutput12printFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = JUnitTestOutput::printFailure(const TestFailure&) &rArr; TestFailure::TestFailure(const TestFailure&) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(const TestFailure&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[14e]"></a>JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)</STRONG> (Thumb, 174 bytes, Stack size 72 bytes, junittestoutput.o(i._ZN15JUnitTestOutput12writeFailureEP23JUnitTestCaseResultNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[14c]"></a>JUnitTestOutput::encodeXmlText(const SimpleString&)</STRONG> (Thumb, 82 bytes, Stack size 24 bytes, junittestoutput.o(i._ZN15JUnitTestOutput13encodeXmlTextERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = JUnitTestOutput::encodeXmlText(const SimpleString&) &rArr; SimpleString::replace(const char*, const char*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[143]"></a>JUnitTestOutput::createFileName(const SimpleString&)</STRONG> (Thumb, 114 bytes, Stack size 48 bytes, junittestoutput.o(i._ZN15JUnitTestOutput14createFileNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 248<LI>Call Chain = JUnitTestOutput::createFileName(const SimpleString&) &rArr; SimpleString::operator +(const SimpleString&) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isEmpty() const
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[14d]"></a>JUnitTestOutput::encodeFileName(const SimpleString&)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, junittestoutput.o(i._ZN15JUnitTestOutput14encodeFileNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = JUnitTestOutput::encodeFileName(const SimpleString&) &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(char, char)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[32b]"></a>JUnitTestOutput::setPackageName(const SimpleString&)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutput14setPackageNameERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = JUnitTestOutput::setPackageName(const SimpleString&) &rArr; SimpleString::operator =(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createJUnitOutput(const SimpleString&)
</UL>

<P><STRONG><a name="[14b]"></a>JUnitTestOutput::writeTestCases()</STRONG> (Thumb, 266 bytes, Stack size 88 bytes, junittestoutput.o(i._ZN15JUnitTestOutput14writeTestCasesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = JUnitTestOutput::writeTestCases() &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isEmpty() const
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[148]"></a>JUnitTestOutput::writeXmlHeader()</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, junittestoutput.o(i._ZN15JUnitTestOutput14writeXmlHeaderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = JUnitTestOutput::writeXmlHeader() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[138]"></a>JUnitTestOutput::printTestsEnded(const TestResult&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(i._ZN15JUnitTestOutput15printTestsEndedERK10TestResult))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[14f]"></a>JUnitTestOutput::writeFileEnding()</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, junittestoutput.o(i._ZN15JUnitTestOutput15writeFileEndingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = JUnitTestOutput::writeFileEnding() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[14a]"></a>JUnitTestOutput::writeProperties()</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, junittestoutput.o(i._ZN15JUnitTestOutput15writePropertiesEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = JUnitTestOutput::writeProperties() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[144]"></a>JUnitTestOutput::openFileForWrite(const SimpleString&)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutput16openFileForWriteERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = JUnitTestOutput::openFileForWrite(const SimpleString&) &rArr; SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[137]"></a>JUnitTestOutput::printTestsStarted()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(i._ZN15JUnitTestOutput17printTestsStartedEv))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[32c]"></a>JUnitTestOutput::resetTestGroupResult()</STRONG> (Thumb, 116 bytes, Stack size 32 bytes, junittestoutput.o(i._ZN15JUnitTestOutput20resetTestGroupResultEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = JUnitTestOutput::resetTestGroupResult() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput()
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentGroupEnded(const TestResult&)
</UL>

<P><STRONG><a name="[145]"></a>JUnitTestOutput::writeTestGroupToFile()</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutput20writeTestGroupToFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = JUnitTestOutput::writeTestGroupToFile() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[13a]"></a>JUnitTestOutput::printCurrentTestEnded(const TestResult&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutput21printCurrentTestEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = JUnitTestOutput::printCurrentTestEnded(const TestResult&)
</UL>
<BR>[Calls]<UL><LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::getCurrentTestTotalExecutionTime() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[149]"></a>JUnitTestOutput::writeTestSuiteSummary()</STRONG> (Thumb, 124 bytes, Stack size 56 bytes, junittestoutput.o(i._ZN15JUnitTestOutput21writeTestSuiteSummaryEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 432<LI>Call Chain = JUnitTestOutput::writeTestSuiteSummary() &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[13c]"></a>JUnitTestOutput::printCurrentGroupEnded(const TestResult&)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutput22printCurrentGroupEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = JUnitTestOutput::printCurrentGroupEnded(const TestResult&) &rArr; JUnitTestOutput::resetTestGroupResult() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[32d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::getCurrentGroupTotalExecutionTime() const
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[139]"></a>JUnitTestOutput::printCurrentTestStarted(const UtestShell&)</STRONG> (Thumb, 212 bytes, Stack size 24 bytes, junittestoutput.o(i._ZN15JUnitTestOutput23printCurrentTestStartedERK10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = JUnitTestOutput::printCurrentTestStarted(const UtestShell&) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[32e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestCaseResultNode::JUnitTestCaseResultNode()
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getLineNumber() const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
<LI><a href="#[2fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getFile() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[13b]"></a>JUnitTestOutput::printCurrentGroupStarted(const UtestShell&)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(i._ZN15JUnitTestOutput24printCurrentGroupStartedERK10UtestShell))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[142]"></a>JUnitTestOutput::flush()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(i._ZN15JUnitTestOutput5flushEv))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[13e]"></a>JUnitTestOutput::print(const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutput5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = JUnitTestOutput::print(const char*) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::setInternalBufferTo(char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[140]"></a>JUnitTestOutput::print(unsigned)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(i._ZN15JUnitTestOutput5printEj))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[13f]"></a>JUnitTestOutput::print(long)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, junittestoutput.o(i._ZN15JUnitTestOutput5printEl))
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[147]"></a>JUnitTestOutput::closeFile()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, junittestoutput.o(i._ZN15JUnitTestOutput9closeFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = JUnitTestOutput::closeFile()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[32f]"></a>JUnitTestOutput::JUnitTestOutput()</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutputC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = JUnitTestOutput::JUnitTestOutput() &rArr; JUnitTestOutputImpl::JUnitTestOutputImpl() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::TestOutput__sub_object()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[331]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutputImpl::JUnitTestOutputImpl()
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createJUnitOutput(const SimpleString&)
</UL>

<P><STRONG><a name="[450]"></a>JUnitTestOutput::JUnitTestOutput__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutputC1Ev), UNUSED)

<P><STRONG><a name="[136]"></a>JUnitTestOutput::~JUnitTestOutput__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutputD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = JUnitTestOutput::~JUnitTestOutput__deallocating() &rArr; JUnitTestOutput::~JUnitTestOutput() &rArr; JUnitTestOutput::resetTestGroupResult() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[135]"></a>JUnitTestOutput::~JUnitTestOutput()</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutputD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = JUnitTestOutput::~JUnitTestOutput() &rArr; JUnitTestOutput::resetTestGroupResult() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__sub_object()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[332]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestGroupResult::~JUnitTestGroupResult()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> junittestoutput.o(.constdata__ZTV15JUnitTestOutput)
</UL>
<P><STRONG><a name="[451]"></a>JUnitTestOutput::~JUnitTestOutput__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN15JUnitTestOutputD1Ev), UNUSED)

<P><STRONG><a name="[333]"></a>ScopedMutexLock::ScopedMutexLock(SimpleMutex*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, simplemutex.o(i._ZN15ScopedMutexLockC1EP11SimpleMutex))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ScopedMutexLock::ScopedMutexLock(SimpleMutex*) &rArr; SimpleMutex::Lock()
</UL>
<BR>[Calls]<UL><LI><a href="#[334]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleMutex::Lock()
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex()
</UL>

<P><STRONG><a name="[452]"></a>ScopedMutexLock::ScopedMutexLock__sub_object(SimpleMutex*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, simplemutex.o(i._ZN15ScopedMutexLockC1EP11SimpleMutex), UNUSED)

<P><STRONG><a name="[335]"></a>ScopedMutexLock::~ScopedMutexLock()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, simplemutex.o(i._ZN15ScopedMutexLockD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ScopedMutexLock::~ScopedMutexLock() &rArr; SimpleMutex::Unlock()
</UL>
<BR>[Calls]<UL><LI><a href="#[336]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleMutex::Unlock()
</UL>
<BR>[Called By]<UL><LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::~MemLeakScopedMutex()
</UL>

<P><STRONG><a name="[453]"></a>ScopedMutexLock::~ScopedMutexLock__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, simplemutex.o(i._ZN15ScopedMutexLockD1Ev), UNUSED)

<P><STRONG><a name="[2e0]"></a>BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)</STRONG> (Thumb, 142 bytes, Stack size 64 bytes, testfailure.o(i._ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = BitsEqualFailure::BitsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromMaskedBits(unsigned long, unsigned long, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBitsEqual(unsigned long, unsigned long, unsigned long, unsigned, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[454]"></a>BitsEqualFailure::BitsEqualFailure__sub_object(UtestShell*, const char*, unsigned, unsigned long, unsigned long, unsigned long, unsigned, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, testfailure.o(i._ZN16BitsEqualFailureC1EP10UtestShellPKcjmmmjRK12SimpleString), UNUSED)

<P><STRONG><a name="[151]"></a>BitsEqualFailure::~BitsEqualFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN16BitsEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BitsEqualFailure::~BitsEqualFailure__deallocating() &rArr; BitsEqualFailure::~BitsEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::~BitsEqualFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV16BitsEqualFailure)
</UL>
<P><STRONG><a name="[150]"></a>BitsEqualFailure::~BitsEqualFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN16BitsEqualFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BitsEqualFailure::~BitsEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::~BitsEqualFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV16BitsEqualFailure)
</UL>
<P><STRONG><a name="[455]"></a>BitsEqualFailure::~BitsEqualFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN16BitsEqualFailureD1Ev), UNUSED)

<P><STRONG><a name="[154]"></a>SetPointerPlugin::postTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, testplugin.o(i._ZN16SetPointerPlugin14postTestActionER10UtestShellR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetPointerPlugin::postTestAction(UtestShell&, TestResult&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[337]"></a>SetPointerPlugin::SetPointerPlugin(const SimpleString&)</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, testplugin.o(i._ZN16SetPointerPluginC1ERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SetPointerPlugin::SetPointerPlugin(const SimpleString&) &rArr; TestPlugin::TestPlugin(const SimpleString&) &rArr; NullTestPlugin::instance() &rArr; NullTestPlugin::NullTestPlugin() &rArr; TestPlugin::TestPlugin(TestPlugin*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::TestPlugin(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
</UL>

<P><STRONG><a name="[456]"></a>SetPointerPlugin::SetPointerPlugin__sub_object(const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, testplugin.o(i._ZN16SetPointerPluginC1ERK12SimpleString), UNUSED)

<P><STRONG><a name="[153]"></a>SetPointerPlugin::~SetPointerPlugin__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testplugin.o(i._ZN16SetPointerPluginD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SetPointerPlugin::~SetPointerPlugin__deallocating() &rArr; SetPointerPlugin::~SetPointerPlugin() &rArr; TestPlugin::~TestPlugin() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointerPlugin::~SetPointerPlugin()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[152]"></a>SetPointerPlugin::~SetPointerPlugin()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, commandlinetestrunner.o(i._ZN16SetPointerPluginD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SetPointerPlugin::~SetPointerPlugin() &rArr; TestPlugin::~TestPlugin() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin()
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointerPlugin::~SetPointerPlugin__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testplugin.o(.constdata__ZTV16SetPointerPlugin)
</UL>
<P><STRONG><a name="[457]"></a>SetPointerPlugin::~SetPointerPlugin__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, commandlinetestrunner.o(i._ZN16SetPointerPluginD1Ev), UNUSED)

<P><STRONG><a name="[2de]"></a>CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 234 bytes, Stack size 64 bytes, testfailure.o(i._ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 520<LI>Call Chain = CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::at(unsigned) const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintableStringFromOrNull(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertEquals(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[458]"></a>CheckEqualFailure::CheckEqualFailure__sub_object(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 64 bytes, testfailure.o(i._ZN17CheckEqualFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_), UNUSED)

<P><STRONG><a name="[156]"></a>CheckEqualFailure::~CheckEqualFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN17CheckEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = CheckEqualFailure::~CheckEqualFailure__deallocating() &rArr; CheckEqualFailure::~CheckEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::~CheckEqualFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV17CheckEqualFailure)
</UL>
<P><STRONG><a name="[155]"></a>CheckEqualFailure::~CheckEqualFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN17CheckEqualFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = CheckEqualFailure::~CheckEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::~CheckEqualFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV17CheckEqualFailure)
</UL>
<P><STRONG><a name="[459]"></a>CheckEqualFailure::~CheckEqualFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN17CheckEqualFailureD1Ev), UNUSED)

<P><STRONG><a name="[2df]"></a>ComparisonFailure::ComparisonFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, testfailure.o(i._ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = ComparisonFailure::ComparisonFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&) &rArr; TestFailure::createUserText(const SimpleString&) &rArr; SimpleString::operator +=(const SimpleString&) &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::setInternalBufferTo(char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCompare(bool, const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[45a]"></a>ComparisonFailure::ComparisonFailure__sub_object(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, testfailure.o(i._ZN17ComparisonFailureC1EP10UtestShellPKcjRK12SimpleStringS6_S6_), UNUSED)

<P><STRONG><a name="[158]"></a>ComparisonFailure::~ComparisonFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN17ComparisonFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = ComparisonFailure::~ComparisonFailure__deallocating() &rArr; ComparisonFailure::~ComparisonFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparisonFailure::~ComparisonFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV17ComparisonFailure)
</UL>
<P><STRONG><a name="[157]"></a>ComparisonFailure::~ComparisonFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN17ComparisonFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = ComparisonFailure::~ComparisonFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparisonFailure::~ComparisonFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV17ComparisonFailure)
</UL>
<P><STRONG><a name="[45b]"></a>ComparisonFailure::~ComparisonFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN17ComparisonFailureD1Ev), UNUSED)

<P><STRONG><a name="[15b]"></a>ConsoleTestOutput::printBuffer(const char*)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, testoutput.o(i._ZN17ConsoleTestOutput11printBufferEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ConsoleTestOutput::printBuffer(const char*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[15c]"></a>ConsoleTestOutput::flush()</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, testoutput.o(i._ZN17ConsoleTestOutput5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConsoleTestOutput::flush()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
<LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[339]"></a>ConsoleTestOutput::ConsoleTestOutput()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, commandlinetestrunner.o(i._ZN17ConsoleTestOutputC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConsoleTestOutput::ConsoleTestOutput()
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::TestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createConsoleOutput()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
</UL>

<P><STRONG><a name="[45c]"></a>ConsoleTestOutput::ConsoleTestOutput__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, commandlinetestrunner.o(i._ZN17ConsoleTestOutputC1Ev), UNUSED)

<P><STRONG><a name="[15a]"></a>ConsoleTestOutput::~ConsoleTestOutput__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testoutput.o(i._ZN17ConsoleTestOutputD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ConsoleTestOutput::~ConsoleTestOutput__deallocating() &rArr; ConsoleTestOutput::~ConsoleTestOutput()
</UL>
<BR>[Calls]<UL><LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::~ConsoleTestOutput()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[159]"></a>ConsoleTestOutput::~ConsoleTestOutput()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, commandlinetestrunner.o(i._ZN17ConsoleTestOutputD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ConsoleTestOutput::~ConsoleTestOutput()
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::~OutsideTestRunnerUTest()
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::~TeamCityTestOutput()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::~ConsoleTestOutput__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV17ConsoleTestOutput)
</UL>
<P><STRONG><a name="[45d]"></a>ConsoleTestOutput::~ConsoleTestOutput__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, commandlinetestrunner.o(i._ZN17ConsoleTestOutputD1Ev), UNUSED)

<P><STRONG><a name="[2e4]"></a>LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)</STRONG> (Thumb, 268 bytes, Stack size 128 bytes, testfailure.o(i._ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&) &rArr; BracketsFormattedHexStringFrom(long) &rArr; HexStringFrom(long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(long)
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(long)
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongsEqual(long, long, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[45e]"></a>LongsEqualFailure::LongsEqualFailure__sub_object(UtestShell*, const char*, unsigned, long, long, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 128 bytes, testfailure.o(i._ZN17LongsEqualFailureC1EP10UtestShellPKcjllRK12SimpleString), UNUSED)

<P><STRONG><a name="[15e]"></a>LongsEqualFailure::~LongsEqualFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN17LongsEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LongsEqualFailure::~LongsEqualFailure__deallocating() &rArr; LongsEqualFailure::~LongsEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::~LongsEqualFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV17LongsEqualFailure)
</UL>
<P><STRONG><a name="[15d]"></a>LongsEqualFailure::~LongsEqualFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN17LongsEqualFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LongsEqualFailure::~LongsEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::~LongsEqualFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV17LongsEqualFailure)
</UL>
<P><STRONG><a name="[45f]"></a>LongsEqualFailure::~LongsEqualFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN17LongsEqualFailureD1Ev), UNUSED)

<P><STRONG><a name="[3c2]"></a>MemoryLeakFailure::MemoryLeakFailure__sub_object()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(i._ZN17MemoryLeakFailureC2Ev))
<BR><BR>[Called By]<UL><LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::MemoryLeakWarningReporter()
</UL>

<P><STRONG><a name="[160]"></a>MemoryLeakFailure::~MemoryLeakFailure__deallocating()</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._ZN17MemoryLeakFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MemoryLeakFailure::~MemoryLeakFailure__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV17MemoryLeakFailure)
</UL>
<P><STRONG><a name="[15f]"></a>MemoryLeakFailure::~MemoryLeakFailure__sub_object()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(i._ZN17MemoryLeakFailureD2Ev))
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV17MemoryLeakFailure)
</UL>
<P><STRONG><a name="[2e5]"></a>BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)</STRONG> (Thumb, 192 bytes, Stack size 80 bytes, testfailure.o(i._ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 536<LI>Call Chain = BinaryEqualFailure::BinaryEqualFailure(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinaryOrNull(const unsigned char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[460]"></a>BinaryEqualFailure::BinaryEqualFailure__sub_object(UtestShell*, const char*, unsigned, const unsigned char*, const unsigned char*, unsigned, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 80 bytes, testfailure.o(i._ZN18BinaryEqualFailureC1EP10UtestShellPKcjPKhS5_jRK12SimpleString), UNUSED)

<P><STRONG><a name="[162]"></a>BinaryEqualFailure::~BinaryEqualFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN18BinaryEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = BinaryEqualFailure::~BinaryEqualFailure__deallocating() &rArr; BinaryEqualFailure::~BinaryEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::~BinaryEqualFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV18BinaryEqualFailure)
</UL>
<P><STRONG><a name="[161]"></a>BinaryEqualFailure::~BinaryEqualFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN18BinaryEqualFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = BinaryEqualFailure::~BinaryEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertBinaryEqual(const void*, const void*, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::~BinaryEqualFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV18BinaryEqualFailure)
</UL>
<P><STRONG><a name="[461]"></a>BinaryEqualFailure::~BinaryEqualFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN18BinaryEqualFailureD1Ev), UNUSED)

<P><STRONG><a name="[2be]"></a>MemLeakScopedMutex::MemLeakScopedMutex()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._ZN18MemLeakScopedMutexC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = MemLeakScopedMutex::MemLeakScopedMutex() &rArr; MemoryLeakWarningPlugin::getGlobalDetector() &rArr; MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[33a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::getMutex()
<LI><a href="#[333]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::ScopedMutexLock(SimpleMutex*)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threadsafe_mem_leak_operator_new(unsigned)
</UL>

<P><STRONG><a name="[462]"></a>MemLeakScopedMutex::MemLeakScopedMutex__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._ZN18MemLeakScopedMutexC1Ev), UNUSED)

<P><STRONG><a name="[2bf]"></a>MemLeakScopedMutex::~MemLeakScopedMutex()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZN18MemLeakScopedMutexD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MemLeakScopedMutex::~MemLeakScopedMutex() &rArr; ScopedMutexLock::~ScopedMutexLock() &rArr; SimpleMutex::Unlock()
</UL>
<BR>[Calls]<UL><LI><a href="#[335]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ScopedMutexLock::~ScopedMutexLock()
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threadsafe_mem_leak_operator_new(unsigned)
</UL>

<P><STRONG><a name="[463]"></a>MemLeakScopedMutex::~MemLeakScopedMutex__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZN18MemLeakScopedMutexD1Ev), UNUSED)

<P><STRONG><a name="[29c]"></a>MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool)</STRONG> (Thumb, 80 bytes, Stack size 48 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjPKcjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned) &rArr; MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator*, unsigned, const char*, unsigned, bool)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator*, unsigned, char*, bool)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_array_debug(unsigned, const char*, unsigned)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_debug(unsigned, const char*, unsigned)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_malloc(unsigned, const char*, unsigned)
</UL>

<P><STRONG><a name="[2aa]"></a>MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector11allocMemoryEP19TestMemoryAllocatorjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned) &rArr; MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_array_nothrow(unsigned)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threadsafe_mem_leak_operator_new(unsigned)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_nothrow(unsigned)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_array(unsigned)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new(unsigned)
</UL>

<P><STRONG><a name="[3b8]"></a>MemoryLeakDetector::stopChecking()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector12stopCheckingEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
</UL>

<P><STRONG><a name="[29b]"></a>MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, unsigned, bool)</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvPKcjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, unsigned, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[340]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::hasBeenDestroyed()
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::removeNode(char*)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_free(void*, const char*, unsigned)
</UL>

<P><STRONG><a name="[2b1]"></a>MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool)</STRONG> (Thumb, 36 bytes, Stack size 32 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector13deallocMemoryEP19TestMemoryAllocatorPvb))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool) &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, unsigned, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, unsigned, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_delete_array(void*)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_delete(void*)
</UL>

<P><STRONG><a name="[2a1]"></a>MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)</STRONG> (Thumb, 98 bytes, Stack size 48 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector13reallocMemoryEP19TestMemoryAllocatorPcjPKcjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 272<LI>Call Chain = MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::removeNode(char*)
<LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)
<LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool)
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_realloc(void*, unsigned, const char*, unsigned)
</UL>

<P><STRONG><a name="[343]"></a>MemoryLeakDetector::startChecking()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector13startCheckingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = MemoryLeakDetector::startChecking() &rArr; MemoryLeakOutputStringBuffer::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::preTestAction(UtestShell&, TestResult&)
</UL>

<P><STRONG><a name="[299]"></a>MemoryLeakDetector::invalidateMemory(char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector16invalidateMemoryEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryLeakDetector::invalidateMemory(char*) &rArr; MemoryLeakDetectorTable::retrieveNode(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::retrieveNode(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_delete_array(void*)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_delete(void*)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_free(void*, const char*, unsigned)
</UL>

<P><STRONG><a name="[346]"></a>MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector16totalMemoryLeaksE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod) &rArr; MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod) &rArr; MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::FinalReport(unsigned)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
</UL>

<P><STRONG><a name="[341]"></a>MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool)</STRONG> (Thumb, 146 bytes, Stack size 48 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector18checkForCorruptionEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorb))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[34a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::validMemoryCorruptionInformation(char*)
<LI><a href="#[348]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::matchingAllocation(TestMemoryAllocator*, TestMemoryAllocator*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, unsigned, bool)
</UL>

<P><STRONG><a name="[348]"></a>MemoryLeakDetector::matchingAllocation(TestMemoryAllocator*, TestMemoryAllocator*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector18matchingAllocationEP19TestMemoryAllocatorS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakDetector::matchingAllocation(TestMemoryAllocator*, TestMemoryAllocator*)
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool)
</UL>

<P><STRONG><a name="[33d]"></a>MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned)</STRONG> (Thumb, 96 bytes, Stack size 52 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector20storeLeakInformationEP22MemoryLeakDetectorNodePcjP19TestMemoryAllocatorPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned) &rArr; MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode*)
<LI><a href="#[34c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
<LI><a href="#[34d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::addMemoryCorruptionInformation(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool)
</UL>

<P><STRONG><a name="[34f]"></a>MemoryLeakDetector::getNodeFromMemoryPointer(char*, unsigned)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector24getNodeFromMemoryPointerEPcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryLeakDetector::getNodeFromMemoryPointer(char*, unsigned) &rArr; MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator*, unsigned, char*, bool)
</UL>

<P><STRONG><a name="[351]"></a>MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector25ConstructMemoryLeakReportE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod) &rArr; MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*) &rArr; SimpleStringBuffer::addMemoryDump(const void*, unsigned) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
<LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*)
<LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::report(MemLeakPeriod)
</UL>

<P><STRONG><a name="[34d]"></a>MemoryLeakDetector::addMemoryCorruptionInformation(char*)</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector30addMemoryCorruptionInformationEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryLeakDetector::addMemoryCorruptionInformation(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned)
</UL>

<P><STRONG><a name="[350]"></a>MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector30sizeOfMemoryWithCorruptionInfoEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[357]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;calculateVoidPointerAlignedSize(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)
<LI><a href="#[33b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator*, unsigned, const char*, unsigned, bool)
<LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::getNodeFromMemoryPointer(char*, unsigned)
</UL>

<P><STRONG><a name="[34a]"></a>MemoryLeakDetector::validMemoryCorruptionInformation(char*)</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector32validMemoryCorruptionInformationEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryLeakDetector::validMemoryCorruptionInformation(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool)
</UL>

<P><STRONG><a name="[342]"></a>MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)</STRONG> (Thumb, 86 bytes, Stack size 64 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector34reallocateMemoryAndLeakInformationEP19TestMemoryAllocatorPcjPKcjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned) &rArr; MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[358]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)
<LI><a href="#[33c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator*, unsigned, char*, bool)
<LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)
</UL>

<P><STRONG><a name="[33c]"></a>MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator*, unsigned, char*, bool)</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector37createMemoryLeakAccountingInformationEP19TestMemoryAllocatorjPcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MemoryLeakDetector::createMemoryLeakAccountingInformation(TestMemoryAllocator*, unsigned, char*, bool) &rArr; MemoryLeakDetector::getNodeFromMemoryPointer(char*, unsigned) &rArr; MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[34f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::getNodeFromMemoryPointer(char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool)
</UL>

<P><STRONG><a name="[33b]"></a>MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator*, unsigned, const char*, unsigned, bool)</STRONG> (Thumb, 86 bytes, Stack size 40 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector39allocateMemoryWithAccountingInformationEP19TestMemoryAllocatorjPKcjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MemoryLeakDetector::allocateMemoryWithAccountingInformation(TestMemoryAllocator*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool)
</UL>

<P><STRONG><a name="[358]"></a>MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)</STRONG> (Thumb, 74 bytes, Stack size 40 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector41reallocateMemoryWithAccountingInformationEP19TestMemoryAllocatorPcjPKcjb))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MemoryLeakDetector::reallocateMemoryWithAccountingInformation(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[342]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocateMemoryAndLeakInformation(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)
</UL>

<P><STRONG><a name="[359]"></a>MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()</STRONG> (Thumb, 52 bytes, Stack size 12 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector42markCheckingPeriodLeaksAsNonCheckingPeriodEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod() &rArr; MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod) &rArr; MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod) &rArr; MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
</UL>

<P><STRONG><a name="[3c0]"></a>MemoryLeakDetector::enable()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector6enableEv))
<BR><BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*)
</UL>

<P><STRONG><a name="[35a]"></a>MemoryLeakDetector::report(MemLeakPeriod)</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector6reportE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = MemoryLeakDetector::report(MemLeakPeriod) &rArr; MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod) &rArr; MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*) &rArr; SimpleStringBuffer::addMemoryDump(const void*, unsigned) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::toString()
<LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::FinalReport(unsigned)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
</UL>

<P><STRONG><a name="[33a]"></a>MemoryLeakDetector::getMutex()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetector8getMutexEv))
<BR><BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex()
</UL>

<P><STRONG><a name="[35c]"></a>MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)</STRONG> (Thumb, 106 bytes, Stack size 24 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[35f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleMutex::SimpleMutex()
<LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
<LI><a href="#[35e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>

<P><STRONG><a name="[464]"></a>MemoryLeakDetector::MemoryLeakDetector__sub_object(MemoryLeakFailure*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure), UNUSED)

<P><STRONG><a name="[164]"></a>MemoryLeakDetector::~MemoryLeakDetector__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetectorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MemoryLeakDetector::~MemoryLeakDetector__deallocating() &rArr; MemoryLeakDetector::~MemoryLeakDetector() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::~MemoryLeakDetector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakdetector.o(.constdata__ZTV18MemoryLeakDetector)
</UL>
<P><STRONG><a name="[163]"></a>MemoryLeakDetector::~MemoryLeakDetector()</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetectorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MemoryLeakDetector::~MemoryLeakDetector() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[360]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleMutex::~SimpleMutex()
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::~MemoryLeakDetector__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakdetector.o(.constdata__ZTV18MemoryLeakDetector)
</UL>
<P><STRONG><a name="[465]"></a>MemoryLeakDetector::~MemoryLeakDetector__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN18MemoryLeakDetectorD1Ev), UNUSED)

<P><STRONG><a name="[361]"></a>SimpleStringBuffer::addMemoryDump(const void*, unsigned)</STRONG> (Thumb, 182 bytes, Stack size 56 bytes, memoryleakdetector.o(i._ZN18SimpleStringBuffer13addMemoryDumpEPKvj))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SimpleStringBuffer::addMemoryDump(const void*, unsigned) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*)
</UL>

<P><STRONG><a name="[3cd]"></a>SimpleStringBuffer::setWriteLimit(unsigned)</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN18SimpleStringBuffer13setWriteLimitEj))
<BR><BR>[Called By]<UL><LI><a href="#[353]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
</UL>

<P><STRONG><a name="[3ca]"></a>SimpleStringBuffer::resetWriteLimit()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN18SimpleStringBuffer15resetWriteLimitEv))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
</UL>

<P><STRONG><a name="[3c9]"></a>SimpleStringBuffer::reachedItsCapacity()</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN18SimpleStringBuffer18reachedItsCapacityEv))
<BR><BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
</UL>

<P><STRONG><a name="[362]"></a>SimpleStringBuffer::add(const char*, ...)</STRONG> (Thumb, 102 bytes, Stack size 40 bytes, memoryleakdetector.o(i._ZN18SimpleStringBuffer3addEPKcz))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addDeallocationLocation(const char*, unsigned, TestMemoryAllocator*)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*)
<LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addMemoryLeakFooter(unsigned)
<LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*)
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::addMemoryDump(const void*, unsigned)
</UL>

<P><STRONG><a name="[3ce]"></a>SimpleStringBuffer::clear()</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN18SimpleStringBuffer5clearEv))
<BR><BR>[Called By]<UL><LI><a href="#[344]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::clear()
</UL>

<P><STRONG><a name="[3cf]"></a>SimpleStringBuffer::toString()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN18SimpleStringBuffer8toStringEv))
<BR><BR>[Called By]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::toString()
</UL>

<P><STRONG><a name="[3d0]"></a>SimpleStringBuffer::SimpleStringBuffer()</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN18SimpleStringBufferC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[35d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
</UL>

<P><STRONG><a name="[466]"></a>SimpleStringBuffer::SimpleStringBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN18SimpleStringBufferC1Ev), UNUSED)

<P><STRONG><a name="[2e1]"></a>StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)</STRONG> (Thumb, 214 bytes, Stack size 88 bytes, testfailure.o(i._ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::at(unsigned) const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintableStringFromOrNull(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[467]"></a>StringEqualFailure::StringEqualFailure__sub_object(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 88 bytes, testfailure.o(i._ZN18StringEqualFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString), UNUSED)

<P><STRONG><a name="[166]"></a>StringEqualFailure::~StringEqualFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN18StringEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = StringEqualFailure::~StringEqualFailure__deallocating() &rArr; StringEqualFailure::~StringEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::~StringEqualFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV18StringEqualFailure)
</UL>
<P><STRONG><a name="[165]"></a>StringEqualFailure::~StringEqualFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN18StringEqualFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = StringEqualFailure::~StringEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNEqual(const char*, const char*, unsigned, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrEqual(const char*, const char*, const char*, const char*, unsigned, const TestTerminator&)
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::~StringEqualFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV18StringEqualFailure)
</UL>
<P><STRONG><a name="[468]"></a>StringEqualFailure::~StringEqualFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN18StringEqualFailureD1Ev), UNUSED)

<P><STRONG><a name="[363]"></a>TeamCityTestOutput::printEscaped(const char*)</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, teamcitytestoutput.o(i._ZN18TeamCityTestOutput12printEscapedEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TeamCityTestOutput::printEscaped(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestEnded(const TestResult&)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[16d]"></a>TeamCityTestOutput::printFailure(const TestFailure&)</STRONG> (Thumb, 278 bytes, Stack size 32 bytes, teamcitytestoutput.o(i._ZN18TeamCityTestOutput12printFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = TeamCityTestOutput::printFailure(const TestFailure&) &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::isInHelperFunction() const
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::isOutsideTestFile() const
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printEscaped(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[16a]"></a>TeamCityTestOutput::printCurrentTestEnded(const TestResult&)</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, teamcitytestoutput.o(i._ZN18TeamCityTestOutput21printCurrentTestEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TeamCityTestOutput::printCurrentTestEnded(const TestResult&) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::getCurrentTestTotalExecutionTime() const
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printEscaped(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[16c]"></a>TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)</STRONG> (Thumb, 92 bytes, Stack size 40 bytes, teamcitytestoutput.o(i._ZN18TeamCityTestOutput22printCurrentGroupEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TeamCityTestOutput::printCurrentGroupEnded(const TestResult&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printEscaped(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[169]"></a>TeamCityTestOutput::printCurrentTestStarted(const UtestShell&)</STRONG> (Thumb, 122 bytes, Stack size 32 bytes, teamcitytestoutput.o(i._ZN18TeamCityTestOutput23printCurrentTestStartedERK10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = TeamCityTestOutput::printCurrentTestStarted(const UtestShell&) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printEscaped(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[16b]"></a>TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)</STRONG> (Thumb, 72 bytes, Stack size 24 bytes, teamcitytestoutput.o(i._ZN18TeamCityTestOutput24printCurrentGroupStartedERK10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&) &rArr; UtestShell::getGroup() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[319]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getGroup() const
<LI><a href="#[363]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printEscaped(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[364]"></a>TeamCityTestOutput::TeamCityTestOutput()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, teamcitytestoutput.o(i._ZN18TeamCityTestOutputC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TeamCityTestOutput::TeamCityTestOutput() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::TestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createTeamCityOutput()
</UL>

<P><STRONG><a name="[469]"></a>TeamCityTestOutput::TeamCityTestOutput__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, teamcitytestoutput.o(i._ZN18TeamCityTestOutputC1Ev), UNUSED)

<P><STRONG><a name="[168]"></a>TeamCityTestOutput::~TeamCityTestOutput__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, teamcitytestoutput.o(i._ZN18TeamCityTestOutputD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = TeamCityTestOutput::~TeamCityTestOutput__deallocating() &rArr; TeamCityTestOutput::~TeamCityTestOutput() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::~TeamCityTestOutput()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[167]"></a>TeamCityTestOutput::~TeamCityTestOutput()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, teamcitytestoutput.o(i._ZN18TeamCityTestOutputD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = TeamCityTestOutput::~TeamCityTestOutput() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::~ConsoleTestOutput()
</UL>
<BR>[Called By]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::~TeamCityTestOutput__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> teamcitytestoutput.o(.constdata__ZTV18TeamCityTestOutput)
</UL>
<P><STRONG><a name="[46a]"></a>TeamCityTestOutput::~TeamCityTestOutput__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, teamcitytestoutput.o(i._ZN18TeamCityTestOutputD1Ev), UNUSED)

<P><STRONG><a name="[178]"></a>CompositeTestOutput::printBuffer(const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput11printBufferEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printBuffer(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[17c]"></a>CompositeTestOutput::printDouble(double)</STRONG> (Thumb, 42 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput11printDoubleEd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printDouble(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[17d]"></a>CompositeTestOutput::printFailure(const TestFailure&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput12printFailureERK11TestFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printFailure(const TestFailure&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[180]"></a>CompositeTestOutput::setOutputOne(TestOutput*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput12setOutputOneEP10TestOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::setOutputOne(TestOutput*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[181]"></a>CompositeTestOutput::setOutputTwo(TestOutput*)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput12setOutputTwoEP10TestOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::setOutputTwo(TestOutput*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[171]"></a>CompositeTestOutput::printTestsEnded(const TestResult&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput15printTestsEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printTestsEnded(const TestResult&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[170]"></a>CompositeTestOutput::printTestsStarted()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, testoutput.o(i._ZN19CompositeTestOutput17printTestsStartedEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompositeTestOutput::printTestsStarted()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[17e]"></a>CompositeTestOutput::setProgressIndicator(const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput20setProgressIndicatorEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::setProgressIndicator(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[173]"></a>CompositeTestOutput::printCurrentTestEnded(const TestResult&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput21printCurrentTestEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printCurrentTestEnded(const TestResult&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[175]"></a>CompositeTestOutput::printCurrentGroupEnded(const TestResult&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput22printCurrentGroupEndedERK10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printCurrentGroupEnded(const TestResult&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[172]"></a>CompositeTestOutput::printCurrentTestStarted(const UtestShell&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput23printCurrentTestStartedERK10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printCurrentTestStarted(const UtestShell&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[174]"></a>CompositeTestOutput::printCurrentGroupStarted(const UtestShell&)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput24printCurrentGroupStartedERK10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::printCurrentGroupStarted(const UtestShell&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[177]"></a>CompositeTestOutput::color()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, testoutput.o(i._ZN19CompositeTestOutput5colorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompositeTestOutput::color()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[17f]"></a>CompositeTestOutput::flush()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, testoutput.o(i._ZN19CompositeTestOutput5flushEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompositeTestOutput::flush()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[179]"></a>CompositeTestOutput::print(const char*)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput5printEPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::print(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[17b]"></a>CompositeTestOutput::print(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput5printEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::print(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[17a]"></a>CompositeTestOutput::print(long)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput5printEl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::print(long)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[176]"></a>CompositeTestOutput::verbose(TestOutput::VerbosityLevel)</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutput7verboseEN10TestOutput14VerbosityLevelE))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CompositeTestOutput::verbose(TestOutput::VerbosityLevel)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[365]"></a>CompositeTestOutput::CompositeTestOutput()</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, testoutput.o(i._ZN19CompositeTestOutputC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = CompositeTestOutput::CompositeTestOutput()
</UL>
<BR>[Calls]<UL><LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::TestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createCompositeOutput(TestOutput*, TestOutput*)
</UL>

<P><STRONG><a name="[46b]"></a>CompositeTestOutput::CompositeTestOutput__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, testoutput.o(i._ZN19CompositeTestOutputC1Ev), UNUSED)

<P><STRONG><a name="[16f]"></a>CompositeTestOutput::~CompositeTestOutput__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testoutput.o(i._ZN19CompositeTestOutputD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CompositeTestOutput::~CompositeTestOutput__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompositeTestOutput::~CompositeTestOutput()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[16e]"></a>CompositeTestOutput::~CompositeTestOutput()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, testoutput.o(i._ZN19CompositeTestOutputD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CompositeTestOutput::~CompositeTestOutput()
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompositeTestOutput::~CompositeTestOutput__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testoutput.o(.constdata__ZTV19CompositeTestOutput)
</UL>
<P><STRONG><a name="[46c]"></a>CompositeTestOutput::~CompositeTestOutput__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, testoutput.o(i._ZN19CompositeTestOutputD1Ev), UNUSED)

<P><STRONG><a name="[2e9]"></a>DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&)</STRONG> (Thumb, 240 bytes, Stack size 88 bytes, testfailure.o(i._ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 496<LI>Call Chain = DoublesEqualFailure::DoublesEqualFailure(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&) &rArr; TestFailure::createButWasString(const SimpleString&, const SimpleString&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(double, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertDoublesEqual(double, double, double, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[46d]"></a>DoublesEqualFailure::DoublesEqualFailure__sub_object(UtestShell*, const char*, unsigned, double, double, double, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 88 bytes, testfailure.o(i._ZN19DoublesEqualFailureC1EP10UtestShellPKcjdddRK12SimpleString), UNUSED)

<P><STRONG><a name="[183]"></a>DoublesEqualFailure::~DoublesEqualFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN19DoublesEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = DoublesEqualFailure::~DoublesEqualFailure__deallocating() &rArr; DoublesEqualFailure::~DoublesEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::~DoublesEqualFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV19DoublesEqualFailure)
</UL>
<P><STRONG><a name="[182]"></a>DoublesEqualFailure::~DoublesEqualFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN19DoublesEqualFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = DoublesEqualFailure::~DoublesEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::~DoublesEqualFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV19DoublesEqualFailure)
</UL>
<P><STRONG><a name="[46e]"></a>DoublesEqualFailure::~DoublesEqualFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN19DoublesEqualFailureD1Ev), UNUSED)

<P><STRONG><a name="[331]"></a>JUnitTestOutputImpl::JUnitTestOutputImpl()</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN19JUnitTestOutputImplC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = JUnitTestOutputImpl::JUnitTestOutputImpl() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::JUnitTestOutput()
</UL>

<P><STRONG><a name="[46f]"></a>JUnitTestOutputImpl::JUnitTestOutputImpl__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, junittestoutput.o(i._ZN19JUnitTestOutputImplC1Ev), UNUSED)

<P><STRONG><a name="[186]"></a>TestMemoryAllocator::free_memory(char*, unsigned, const char*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, testmemoryallocator.o(i._ZN19TestMemoryAllocator11free_memoryEPcjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestMemoryAllocator::free_memory(char*, unsigned, const char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
</UL>
<P><STRONG><a name="[185]"></a>TestMemoryAllocator::alloc_memory(unsigned, const char*, unsigned)</STRONG> (Thumb, 22 bytes, Stack size 24 bytes, testmemoryallocator.o(i._ZN19TestMemoryAllocator12alloc_memoryEjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = TestMemoryAllocator::alloc_memory(unsigned, const char*, unsigned) &rArr; checkedMalloc(unsigned) &rArr; UtestShell::getCurrent() &rArr; OutsideTestRunnerUTest::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;checkedMalloc(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
</UL>
<P><STRONG><a name="[18a]"></a>TestMemoryAllocator::isOfEqualType(TestMemoryAllocator*)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, testmemoryallocator.o(i._ZN19TestMemoryAllocator13isOfEqualTypeEPS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestMemoryAllocator::isOfEqualType(TestMemoryAllocator*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrCmp(const char*, const char*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[18d]"></a>TestMemoryAllocator::actualAllocator()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, testmemoryallocator.o(i._ZN19TestMemoryAllocator15actualAllocatorEv))
<BR>[Address Reference Count : 2]<UL><LI> testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[340]"></a>TestMemoryAllocator::hasBeenDestroyed()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testmemoryallocator.o(i._ZN19TestMemoryAllocator16hasBeenDestroyedEv))
<BR><BR>[Called By]<UL><LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, unsigned, bool)
</UL>

<P><STRONG><a name="[18c]"></a>TestMemoryAllocator::freeMemoryLeakNode(char*)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, testmemoryallocator.o(i._ZN19TestMemoryAllocator18freeMemoryLeakNodeEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestMemoryAllocator::freeMemoryLeakNode(char*)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[18b]"></a>TestMemoryAllocator::allocMemoryLeakNode(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, testmemoryallocator.o(i._ZN19TestMemoryAllocator19allocMemoryLeakNodeEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TestMemoryAllocator::allocMemoryLeakNode(unsigned)
</UL>
<BR>[Address Reference Count : 2]<UL><LI> testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[2a6]"></a>TestMemoryAllocator::TestMemoryAllocator(const char*, const char*, const char*)</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, testmemoryallocator.o(i._ZN19TestMemoryAllocatorC1EPKcS1_S1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestMemoryAllocator::TestMemoryAllocator(const char*, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::NullUnknownAllocator()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultMallocAllocator()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewAllocator()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewArrayAllocator()
</UL>

<P><STRONG><a name="[470]"></a>TestMemoryAllocator::TestMemoryAllocator__sub_object(const char*, const char*, const char*)</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, testmemoryallocator.o(i._ZN19TestMemoryAllocatorC1EPKcS1_S1_), UNUSED)

<P><STRONG><a name="[184]"></a>TestMemoryAllocator::~TestMemoryAllocator__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testmemoryallocator.o(i._ZN19TestMemoryAllocatorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestMemoryAllocator::~TestMemoryAllocator__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::~TestMemoryAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
</UL>
<P><STRONG><a name="[8b]"></a>TestMemoryAllocator::~TestMemoryAllocator()</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, testmemoryallocator.o(i._ZN19TestMemoryAllocatorD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::~NullUnknownAllocator()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::~TestMemoryAllocator__deallocating()
</UL>
<BR>[Address Reference Count : 4]<UL><LI> testmemoryallocator.o(i._Z19defaultNewAllocatorv)
<LI> testmemoryallocator.o(i._Z22defaultMallocAllocatorv)
<LI> testmemoryallocator.o(i._Z24defaultNewArrayAllocatorv)
<LI> testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
</UL>
<P><STRONG><a name="[471]"></a>TestMemoryAllocator::~TestMemoryAllocator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, testmemoryallocator.o(i._ZN19TestMemoryAllocatorD1Ev), UNUSED)

<P><STRONG><a name="[366]"></a>CommandLineArguments::setShuffle(int, const char*const *, int&)</STRONG> (Thumb, 138 bytes, Stack size 40 bytes, commandlinearguments.o(i._ZN20CommandLineArguments10setShuffleEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CommandLineArguments::setShuffle(int, const char*const *, int&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[310]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::AtoU(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[367]"></a>CommandLineArguments::addNameFilter(int, const char*const *, int&)</STRONG> (Thumb, 120 bytes, Stack size 80 bytes, commandlinearguments.o(i._ZN20CommandLineArguments13addNameFilterEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CommandLineArguments::addNameFilter(int, const char*const *, int&) &rArr; CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[36a]"></a>CommandLineArguments::setOutputType(int, const char*const *, int&)</STRONG> (Thumb, 284 bytes, Stack size 72 bytes, commandlinearguments.o(i._ZN20CommandLineArguments13setOutputTypeEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = CommandLineArguments::setOutputType(int, const char*const *, int&) &rArr; CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[36b]"></a>CommandLineArguments::addGroupFilter(int, const char*const *, int&)</STRONG> (Thumb, 120 bytes, Stack size 80 bytes, commandlinearguments.o(i._ZN20CommandLineArguments14addGroupFilterEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CommandLineArguments::addGroupFilter(int, const char*const *, int&) &rArr; CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[36c]"></a>CommandLineArguments::setPackageName(int, const char*const *, int&)</STRONG> (Thumb, 86 bytes, Stack size 48 bytes, commandlinearguments.o(i._ZN20CommandLineArguments14setPackageNameEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 264<LI>Call Chain = CommandLineArguments::setPackageName(int, const char*const *, int&) &rArr; CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[36d]"></a>CommandLineArguments::setRepeatCount(int, const char*const *, int&)</STRONG> (Thumb, 104 bytes, Stack size 32 bytes, commandlinearguments.o(i._ZN20CommandLineArguments14setRepeatCountEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CommandLineArguments::setRepeatCount(int, const char*const *, int&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[30d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::AtoI(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[368]"></a>CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)</STRONG> (Thumb, 126 bytes, Stack size 40 bytes, commandlinearguments.o(i._ZN20CommandLineArguments17getParameterFieldEiPKPKcRiRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeGroupFilter(int, const char*const *, int&)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeNameFilter(int, const char*const *, int&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setPackageName(int, const char*const *, int&)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupFilter(int, const char*const *, int&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setOutputType(int, const char*const *, int&)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addNameFilter(int, const char*const *, int&)
</UL>

<P><STRONG><a name="[36e]"></a>CommandLineArguments::addStrictNameFilter(int, const char*const *, int&)</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, commandlinearguments.o(i._ZN20CommandLineArguments19addStrictNameFilterEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CommandLineArguments::addStrictNameFilter(int, const char*const *, int&) &rArr; CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::strictMatching()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[370]"></a>CommandLineArguments::addExcludeNameFilter(int, const char*const *, int&)</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, commandlinearguments.o(i._ZN20CommandLineArguments20addExcludeNameFilterEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CommandLineArguments::addExcludeNameFilter(int, const char*const *, int&) &rArr; CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::invertMatching()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[372]"></a>CommandLineArguments::addStrictGroupFilter(int, const char*const *, int&)</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, commandlinearguments.o(i._ZN20CommandLineArguments20addStrictGroupFilterEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CommandLineArguments::addStrictGroupFilter(int, const char*const *, int&) &rArr; CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::strictMatching()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[373]"></a>CommandLineArguments::addExcludeGroupFilter(int, const char*const *, int&)</STRONG> (Thumb, 126 bytes, Stack size 80 bytes, commandlinearguments.o(i._ZN20CommandLineArguments21addExcludeGroupFilterEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CommandLineArguments::addExcludeGroupFilter(int, const char*const *, int&) &rArr; CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::invertMatching()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[374]"></a>CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)</STRONG> (Thumb, 250 bytes, Stack size 96 bytes, commandlinearguments.o(i._ZN20CommandLineArguments21addGroupDotNameFilterEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 464 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&) &rArr; SimpleString::split(const SimpleString&, SimpleStringCollection&) const &rArr; SimpleStringCollection::allocate(unsigned) &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[377]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::size() const
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::operator [](unsigned)
<LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::~SimpleStringCollection()
<LI><a href="#[375]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::SimpleStringCollection()
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[37a]"></a>CommandLineArguments::addExcludeStrictNameFilter(int, const char*const *, int&)</STRONG> (Thumb, 132 bytes, Stack size 80 bytes, commandlinearguments.o(i._ZN20CommandLineArguments26addExcludeStrictNameFilterEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CommandLineArguments::addExcludeStrictNameFilter(int, const char*const *, int&) &rArr; CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::strictMatching()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::invertMatching()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[37b]"></a>CommandLineArguments::addExcludeStrictGroupFilter(int, const char*const *, int&)</STRONG> (Thumb, 132 bytes, Stack size 80 bytes, commandlinearguments.o(i._ZN20CommandLineArguments27addExcludeStrictGroupFilterEiPKPKcRi))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = CommandLineArguments::addExcludeStrictGroupFilter(int, const char*const *, int&) &rArr; CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::strictMatching()
<LI><a href="#[371]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::invertMatching()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[37c]"></a>CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)</STRONG> (Thumb, 218 bytes, Stack size 96 bytes, commandlinearguments.o(i._ZN20CommandLineArguments32addTestToRunBasedOnVerboseOutputEiPKPKcRiS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*) &rArr; SimpleString::subStringFromTill(char, char) const &rArr; SimpleString::subString(unsigned) const &rArr; SimpleString::subString(unsigned, unsigned) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned) const
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::at(unsigned) const
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subStringFromTill(char, char) const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::TestFilter(const SimpleString&)
<LI><a href="#[369]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::add(TestFilter*)
<LI><a href="#[36f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::strictMatching()
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>

<P><STRONG><a name="[37e]"></a>CommandLineArguments::parse(TestPlugin*)</STRONG> (Thumb, 1822 bytes, Stack size 368 bytes, commandlinearguments.o(i._ZN20CommandLineArguments5parseEP10TestPlugin))
<BR><BR>[Stack]<UL><LI>Max Depth = 832 + Unknown Stack Size
<LI>Call Chain = CommandLineArguments::parse(TestPlugin*) &rArr; CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&) &rArr; SimpleString::split(const SimpleString&, SimpleStringCollection&) const &rArr; SimpleStringCollection::allocate(unsigned) &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::startsWith(const SimpleString&) const
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeGroupFilter(int, const char*const *, int&)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeNameFilter(int, const char*const *, int&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setRepeatCount(int, const char*const *, int&)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setPackageName(int, const char*const *, int&)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupFilter(int, const char*const *, int&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setOutputType(int, const char*const *, int&)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addNameFilter(int, const char*const *, int&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setShuffle(int, const char*const *, int&)
</UL>
<BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[37f]"></a>CommandLineArguments::CommandLineArguments(int, const char*const *)</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, commandlinearguments.o(i._ZN20CommandLineArgumentsC1EiPKPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = CommandLineArguments::CommandLineArguments(int, const char*const *) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::CommandLineTestRunner(int, const char*const *, TestRegistry*)
</UL>

<P><STRONG><a name="[472]"></a>CommandLineArguments::CommandLineArguments__sub_object(int, const char*const *)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, commandlinearguments.o(i._ZN20CommandLineArgumentsC1EiPKPKc), UNUSED)

<P><STRONG><a name="[18f]"></a>CommandLineArguments::~CommandLineArguments__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, commandlinearguments.o(i._ZN20CommandLineArgumentsD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = CommandLineArguments::~CommandLineArguments__deallocating() &rArr; CommandLineArguments::~CommandLineArguments() &rArr; TestFilter::~TestFilter() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinearguments.o(.constdata__ZTV20CommandLineArguments)
</UL>
<P><STRONG><a name="[18e]"></a>CommandLineArguments::~CommandLineArguments()</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, commandlinearguments.o(i._ZN20CommandLineArgumentsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = CommandLineArguments::~CommandLineArguments() &rArr; TestFilter::~TestFilter() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::~TestFilter()
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::getNext() const
</UL>
<BR>[Called By]<UL><LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinearguments.o(.constdata__ZTV20CommandLineArguments)
</UL>
<P><STRONG><a name="[473]"></a>CommandLineArguments::~CommandLineArguments__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, commandlinearguments.o(i._ZN20CommandLineArgumentsD1Ev), UNUSED)

<P><STRONG><a name="[332]"></a>JUnitTestGroupResult::~JUnitTestGroupResult()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, junittestoutput.o(i._ZN20JUnitTestGroupResultD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = JUnitTestGroupResult::~JUnitTestGroupResult() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
</UL>
<BR>[Called By]<UL><LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput()
</UL>

<P><STRONG><a name="[474]"></a>JUnitTestGroupResult::~JUnitTestGroupResult__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, junittestoutput.o(i._ZN20JUnitTestGroupResultD1Ev), UNUSED)

<P><STRONG><a name="[381]"></a>NormalTestTerminator::NormalTestTerminator()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, utest.o(i._ZN20NormalTestTerminatorC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NormalTestTerminator::NormalTestTerminator()
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminator::TestTerminator__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sti___9_Utest_cpp_6cd647e5
</UL>

<P><STRONG><a name="[475]"></a>NormalTestTerminator::NormalTestTerminator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN20NormalTestTerminatorC1Ev), UNUSED)

<P><STRONG><a name="[191]"></a>NormalTestTerminator::~NormalTestTerminator__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZN20NormalTestTerminatorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NormalTestTerminator::~NormalTestTerminator__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::~NormalTestTerminator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV20NormalTestTerminator)
</UL>
<P><STRONG><a name="[a6]"></a>NormalTestTerminator::~NormalTestTerminator()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, utest.o(i._ZN20NormalTestTerminatorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NormalTestTerminator::~NormalTestTerminator()
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminator::~TestTerminator__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashingTestTerminator::~CrashingTestTerminator()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::~NormalTestTerminator__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> utest.o(i.__sti___9_Utest_cpp_6cd647e5)
<LI> utest.o(.constdata__ZTV20NormalTestTerminator)
</UL>
<P><STRONG><a name="[476]"></a>NormalTestTerminator::~NormalTestTerminator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, utest.o(i._ZN20NormalTestTerminatorD1Ev), UNUSED)

<P><STRONG><a name="[194]"></a>NullUnknownAllocator::free_memory(char*, unsigned, const char*, unsigned)</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, testmemoryallocator.o(i._ZN20NullUnknownAllocator11free_memoryEPcjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NullUnknownAllocator::free_memory(char*, unsigned, const char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[193]"></a>NullUnknownAllocator::alloc_memory(unsigned, const char*, unsigned)</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, testmemoryallocator.o(i._ZN20NullUnknownAllocator12alloc_memoryEjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NullUnknownAllocator::alloc_memory(unsigned, const char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[383]"></a>NullUnknownAllocator::defaultAllocator()</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, testmemoryallocator.o(i._ZN20NullUnknownAllocator16defaultAllocatorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = NullUnknownAllocator::defaultAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[384]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::NullUnknownAllocator()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>

<P><STRONG><a name="[384]"></a>NullUnknownAllocator::NullUnknownAllocator()</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, testmemoryallocator.o(i._ZN20NullUnknownAllocatorC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NullUnknownAllocator::NullUnknownAllocator() &rArr; TestMemoryAllocator::TestMemoryAllocator(const char*, const char*, const char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::TestMemoryAllocator(const char*, const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::defaultAllocator()
</UL>

<P><STRONG><a name="[477]"></a>NullUnknownAllocator::NullUnknownAllocator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, testmemoryallocator.o(i._ZN20NullUnknownAllocatorC1Ev), UNUSED)

<P><STRONG><a name="[192]"></a>NullUnknownAllocator::~NullUnknownAllocator__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testmemoryallocator.o(i._ZN20NullUnknownAllocatorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NullUnknownAllocator::~NullUnknownAllocator__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::~NullUnknownAllocator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[91]"></a>NullUnknownAllocator::~NullUnknownAllocator()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, testmemoryallocator.o(i._ZN20NullUnknownAllocatorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NullUnknownAllocator::~NullUnknownAllocator()
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::~TestMemoryAllocator()
</UL>
<BR>[Called By]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::~NullUnknownAllocator__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> testmemoryallocator.o(i._ZN20NullUnknownAllocator16defaultAllocatorEv)
<LI> testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[478]"></a>NullUnknownAllocator::~NullUnknownAllocator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, testmemoryallocator.o(i._ZN20NullUnknownAllocatorD1Ev), UNUSED)

<P><STRONG><a name="[385]"></a>CommandLineTestRunner::RunAllTests(int, const char*const *)</STRONG> (Thumb, 182 bytes, Stack size 112 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunner11RunAllTestsEiPKPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 1024 + Unknown Stack Size
<LI>Call Chain = CommandLineTestRunner::RunAllTests(int, const char*const *) &rArr; CommandLineTestRunner::runAllTestsMain() &rArr; CommandLineTestRunner::parseArguments(TestPlugin*) &rArr; CommandLineArguments::parse(TestPlugin*) &rArr; CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&) &rArr; SimpleString::split(const SimpleString&, SimpleStringCollection&) const &rArr; SimpleStringCollection::allocate(unsigned) &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[38a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator &lang;&lang;(TestOutput&, const char*)
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
<LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*)
<LI><a href="#[387]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool)
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::FinalReport(unsigned)
<LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::getCurrentRegistry()
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::~CommandLineTestRunner()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::CommandLineTestRunner(int, const char*const *, TestRegistry*)
<LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::~ConsoleTestOutput()
<LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::ConsoleTestOutput()
</UL>
<BR>[Called By]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[38b]"></a>CommandLineTestRunner::runAllTests()</STRONG> (Thumb, 338 bytes, Stack size 96 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunner11runAllTestsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = CommandLineTestRunner::runAllTests() &rArr; CommandLineTestRunner::initializeTestRun()
</UL>
<BR>[Calls]<UL><LI><a href="#[390]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isListingTestGroupAndCaseNames() const
<LI><a href="#[38e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isListingTestGroupNames() const
<LI><a href="#[391]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isListingTestLocations() const
<LI><a href="#[394]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getShuffleSeed() const
<LI><a href="#[38d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getRepeatCount() const
<LI><a href="#[393]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isShuffling() const
<LI><a href="#[392]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isReversing() const
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::~TestResult()
<LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::TestResult(TestOutput&)
<LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
</UL>

<P><STRONG><a name="[395]"></a>CommandLineTestRunner::parseArguments(TestPlugin*)</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunner14parseArgumentsEP10TestPlugin))
<BR><BR>[Stack]<UL><LI>Max Depth = 856 + Unknown Stack Size
<LI>Call Chain = CommandLineTestRunner::parseArguments(TestPlugin*) &rArr; CommandLineArguments::parse(TestPlugin*) &rArr; CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&) &rArr; SimpleString::split(const SimpleString&, SimpleStringCollection&) const &rArr; SimpleStringCollection::allocate(unsigned) &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isVerbose() const
<LI><a href="#[396]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::needHelp() const
<LI><a href="#[398]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::usage() const
<LI><a href="#[397]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::help() const
<LI><a href="#[39c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isTeamCityOutput() const
<LI><a href="#[39a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getPackageName() const
<LI><a href="#[399]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isJUnitOutput() const
<LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
</UL>
<BR>[Called By]<UL><LI><a href="#[389]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTestsMain()
</UL>

<P><STRONG><a name="[389]"></a>CommandLineTestRunner::runAllTestsMain()</STRONG> (Thumb, 118 bytes, Stack size 56 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunner15runAllTestsMainEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 912 + Unknown Stack Size
<LI>Call Chain = CommandLineTestRunner::runAllTestsMain() &rArr; CommandLineTestRunner::parseArguments(TestPlugin*) &rArr; CommandLineArguments::parse(TestPlugin*) &rArr; CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&) &rArr; SimpleString::split(const SimpleString&, SimpleStringCollection&) const &rArr; SimpleStringCollection::allocate(unsigned) &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[337]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointerPlugin::SetPointerPlugin(const SimpleString&)
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
<LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointerPlugin::~SetPointerPlugin()
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
</UL>

<P><STRONG><a name="[198]"></a>CommandLineTestRunner::createJUnitOutput(const SimpleString&)</STRONG> (Thumb, 46 bytes, Stack size 24 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunner17createJUnitOutputERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = CommandLineTestRunner::createJUnitOutput(const SimpleString&) &rArr; JUnitTestOutput::JUnitTestOutput() &rArr; JUnitTestOutputImpl::JUnitTestOutputImpl() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::JUnitTestOutput()
<LI><a href="#[32b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::setPackageName(const SimpleString&)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinetestrunner.o(.constdata__ZTV21CommandLineTestRunner)
</UL>
<P><STRONG><a name="[38c]"></a>CommandLineTestRunner::initializeTestRun()</STRONG> (Thumb, 144 bytes, Stack size 24 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunner17initializeTestRunEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CommandLineTestRunner::initializeTestRun()
</UL>
<BR>[Calls]<UL><LI><a href="#[39b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isVerbose() const
<LI><a href="#[3a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isColor() const
<LI><a href="#[3a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::runTestsInSeperateProcess() const
<LI><a href="#[3a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isCrashingOnFail() const
<LI><a href="#[39d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getGroupFilters() const
<LI><a href="#[39e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getNameFilters() const
<LI><a href="#[39f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isVeryVerbose() const
<LI><a href="#[3a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::isRunIgnored() const
<LI><a href="#[3a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::setRunIgnored()
<LI><a href="#[3a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::setCrashOnFail()
</UL>
<BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
</UL>

<P><STRONG><a name="[199]"></a>CommandLineTestRunner::createConsoleOutput()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunner19createConsoleOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CommandLineTestRunner::createConsoleOutput() &rArr; operator new(unsigned, const char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[339]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::ConsoleTestOutput()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinetestrunner.o(.constdata__ZTV21CommandLineTestRunner)
</UL>
<P><STRONG><a name="[197]"></a>CommandLineTestRunner::createTeamCityOutput()</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunner20createTeamCityOutputEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = CommandLineTestRunner::createTeamCityOutput() &rArr; TeamCityTestOutput::TeamCityTestOutput() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[364]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::TeamCityTestOutput()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinetestrunner.o(.constdata__ZTV21CommandLineTestRunner)
</UL>
<P><STRONG><a name="[19a]"></a>CommandLineTestRunner::createCompositeOutput(TestOutput*, TestOutput*)</STRONG> (Thumb, 58 bytes, Stack size 32 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunner21createCompositeOutputEP10TestOutputS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = CommandLineTestRunner::createCompositeOutput(TestOutput*, TestOutput*) &rArr; operator new(unsigned, const char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[365]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompositeTestOutput::CompositeTestOutput()
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinetestrunner.o(.constdata__ZTV21CommandLineTestRunner)
</UL>
<P><STRONG><a name="[388]"></a>CommandLineTestRunner::CommandLineTestRunner(int, const char*const *, TestRegistry*)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = CommandLineTestRunner::CommandLineTestRunner(int, const char*const *, TestRegistry*) &rArr; CommandLineArguments::CommandLineArguments(int, const char*const *) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[37f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::CommandLineArguments(int, const char*const *)
<LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
</UL>

<P><STRONG><a name="[479]"></a>CommandLineTestRunner::CommandLineTestRunner__sub_object(int, const char*const *, TestRegistry*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunnerC1EiPKPKcP12TestRegistry), UNUSED)

<P><STRONG><a name="[196]"></a>CommandLineTestRunner::~CommandLineTestRunner__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunnerD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CommandLineTestRunner::~CommandLineTestRunner__deallocating() &rArr; CommandLineTestRunner::~CommandLineTestRunner()
</UL>
<BR>[Calls]<UL><LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::~CommandLineTestRunner()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinetestrunner.o(.constdata__ZTV21CommandLineTestRunner)
</UL>
<P><STRONG><a name="[195]"></a>CommandLineTestRunner::~CommandLineTestRunner()</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunnerD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CommandLineTestRunner::~CommandLineTestRunner()
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::~CommandLineTestRunner__deallocating()
<LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> commandlinetestrunner.o(.constdata__ZTV21CommandLineTestRunner)
</UL>
<P><STRONG><a name="[47a]"></a>CommandLineTestRunner::~CommandLineTestRunner__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, commandlinetestrunner.o(i._ZN21CommandLineTestRunnerD1Ev), UNUSED)

<P><STRONG><a name="[2eb]"></a>LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)</STRONG> (Thumb, 274 bytes, Stack size 128 bytes, testfailure.o(i._ZN21LongLongsEqualFailureC1EP10UtestShellPKcjxxRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&) &rArr; BracketsFormattedHexStringFrom(long long) &rArr; HexStringFrom(long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(long long)
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertLongLongsEqual(long long, long long, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[47b]"></a>LongLongsEqualFailure::LongLongsEqualFailure__sub_object(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 128 bytes, testfailure.o(i._ZN21LongLongsEqualFailureC1EP10UtestShellPKcjxxRK12SimpleString), UNUSED)

<P><STRONG><a name="[19c]"></a>LongLongsEqualFailure::~LongLongsEqualFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN21LongLongsEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = LongLongsEqualFailure::~LongLongsEqualFailure__deallocating() &rArr; LongLongsEqualFailure::~LongLongsEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::~LongLongsEqualFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
</UL>
<P><STRONG><a name="[19b]"></a>LongLongsEqualFailure::~LongLongsEqualFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN21LongLongsEqualFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = LongLongsEqualFailure::~LongLongsEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::~LongLongsEqualFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
</UL>
<P><STRONG><a name="[47c]"></a>LongLongsEqualFailure::~LongLongsEqualFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN21LongLongsEqualFailureD1Ev), UNUSED)

<P><STRONG><a name="[19e]"></a>CrashingTestTerminator::~CrashingTestTerminator__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZN22CrashingTestTerminatorD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = CrashingTestTerminator::~CrashingTestTerminator__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashingTestTerminator::~CrashingTestTerminator()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV22CrashingTestTerminator)
</UL>
<P><STRONG><a name="[a7]"></a>CrashingTestTerminator::~CrashingTestTerminator()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, utest.o(i._ZN22CrashingTestTerminatorD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CrashingTestTerminator::~CrashingTestTerminator() &rArr; NormalTestTerminator::~NormalTestTerminator()
</UL>
<BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::~NormalTestTerminator()
</UL>
<BR>[Called By]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashingTestTerminator::~CrashingTestTerminator__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> utest.o(i.__sti___9_Utest_cpp_6cd647e5)
<LI> utest.o(.constdata__ZTV22CrashingTestTerminator)
</UL>
<P><STRONG><a name="[47d]"></a>CrashingTestTerminator::~CrashingTestTerminator__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, utest.o(i._ZN22CrashingTestTerminatorD1Ev), UNUSED)

<P><STRONG><a name="[3b5]"></a>MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode*)</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN22MemoryLeakDetectorList10addNewNodeEP22MemoryLeakDetectorNode))
<BR><BR>[Called By]<UL><LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode*)
</UL>

<P><STRONG><a name="[3a7]"></a>MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode*, MemLeakPeriod)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN22MemoryLeakDetectorList10isInPeriodEP22MemoryLeakDetectorNode13MemLeakPeriod))
<BR><BR>[Called By]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod)
<LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>

<P><STRONG><a name="[3b6]"></a>MemoryLeakDetectorList::removeNode(char*)</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, memoryleakdetector.o(i._ZN22MemoryLeakDetectorList10removeNodeEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryLeakDetectorList::removeNode(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::removeNode(char*)
</UL>

<P><STRONG><a name="[3a6]"></a>MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, memoryleakdetector.o(i._ZN22MemoryLeakDetectorList11getLeakFromEP22MemoryLeakDetectorNode13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>

<P><STRONG><a name="[3a8]"></a>MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN22MemoryLeakDetectorList11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod) &rArr; MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>

<P><STRONG><a name="[3a9]"></a>MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod)</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, memoryleakdetector.o(i._ZN22MemoryLeakDetectorList12getFirstLeakE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod) &rArr; MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[352]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>

<P><STRONG><a name="[3b7]"></a>MemoryLeakDetectorList::retrieveNode(char*)</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN22MemoryLeakDetectorList12retrieveNodeEPc))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::retrieveNode(char*)
</UL>

<P><STRONG><a name="[3aa]"></a>MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod)</STRONG> (Thumb, 36 bytes, Stack size 20 bytes, memoryleakdetector.o(i._ZN22MemoryLeakDetectorList13getTotalLeaksE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::isInPeriod(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[347]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod)
</UL>

<P><STRONG><a name="[90]"></a>MemoryLeakDetectorList::MemoryLeakDetectorList()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN22MemoryLeakDetectorListC1Ev))
<BR>[Address Reference Count : 1]<UL><LI> memoryleakdetector.o(i._ZN18MemoryLeakDetectorC1EP17MemoryLeakFailure)
</UL>
<P><STRONG><a name="[47e]"></a>MemoryLeakDetectorList::MemoryLeakDetectorList__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN22MemoryLeakDetectorListC1Ev), UNUSED)

<P><STRONG><a name="[34c]"></a>MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 20 bytes, memoryleakdetector.o(i._ZN22MemoryLeakDetectorNode4initEPcjjP19TestMemoryAllocator13MemLeakPeriodhPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned)
</UL>

<P><STRONG><a name="[1a0]"></a>OutsideTestRunnerUTest::getTestResult()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, utest.o(i._ZN22OutsideTestRunnerUTest13getTestResultEv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[2dd]"></a>OutsideTestRunnerUTest::instance()</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, utest.o(i._ZN22OutsideTestRunnerUTest8instanceEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = OutsideTestRunnerUTest::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::OutsideTestRunnerUTest()
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_guard_acquire
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Called By]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getTestResult()
</UL>

<P><STRONG><a name="[3ab]"></a>OutsideTestRunnerUTest::OutsideTestRunnerUTest()</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, utest.o(i._ZN22OutsideTestRunnerUTestC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = OutsideTestRunnerUTest::OutsideTestRunnerUTest() &rArr; UtestShell::UtestShell(const char*, const char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[38f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::TestResult(TestOutput&)
<LI><a href="#[330]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::TestOutput__sub_object()
<LI><a href="#[3ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::UtestShell(const char*, const char*, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::instance()
</UL>

<P><STRONG><a name="[47f]"></a>OutsideTestRunnerUTest::OutsideTestRunnerUTest__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, utest.o(i._ZN22OutsideTestRunnerUTestC1Ev), UNUSED)

<P><STRONG><a name="[19f]"></a>OutsideTestRunnerUTest::~OutsideTestRunnerUTest__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZN22OutsideTestRunnerUTestD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = OutsideTestRunnerUTest::~OutsideTestRunnerUTest__deallocating() &rArr; OutsideTestRunnerUTest::~OutsideTestRunnerUTest() &rArr; ConsoleTestOutput::~ConsoleTestOutput()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::~OutsideTestRunnerUTest()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[92]"></a>OutsideTestRunnerUTest::~OutsideTestRunnerUTest()</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, utest.o(i._ZN22OutsideTestRunnerUTestD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = OutsideTestRunnerUTest::~OutsideTestRunnerUTest() &rArr; ConsoleTestOutput::~ConsoleTestOutput()
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::~TestResult()
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::~ConsoleTestOutput()
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::~UtestShell()
</UL>
<BR>[Called By]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::~OutsideTestRunnerUTest__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> utest.o(i._ZN22OutsideTestRunnerUTest8instanceEv)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[480]"></a>OutsideTestRunnerUTest::~OutsideTestRunnerUTest__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN22OutsideTestRunnerUTestD1Ev), UNUSED)

<P><STRONG><a name="[3ad]"></a>SimpleStringCollection::allocate(unsigned)</STRONG> (Thumb, 94 bytes, Stack size 40 bytes, simplestring.o(i._ZN22SimpleStringCollection8allocateEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 296 + Unknown Stack Size
<LI>Call Chain = SimpleStringCollection::allocate(unsigned) &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const char*, int)
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
<LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_ctor
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
</UL>

<P><STRONG><a name="[375]"></a>SimpleStringCollection::SimpleStringCollection()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simplestring.o(i._ZN22SimpleStringCollectionC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = SimpleStringCollection::SimpleStringCollection() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
</UL>

<P><STRONG><a name="[481]"></a>SimpleStringCollection::SimpleStringCollection__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, simplestring.o(i._ZN22SimpleStringCollectionC1Ev), UNUSED)

<P><STRONG><a name="[378]"></a>SimpleStringCollection::~SimpleStringCollection()</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, simplestring.o(i._ZN22SimpleStringCollectionD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 264 + Unknown Stack Size
<LI>Call Chain = SimpleStringCollection::~SimpleStringCollection() &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
</UL>

<P><STRONG><a name="[482]"></a>SimpleStringCollection::~SimpleStringCollection__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, simplestring.o(i._ZN22SimpleStringCollectionD1Ev), UNUSED)

<P><STRONG><a name="[379]"></a>SimpleStringCollection::operator [](unsigned)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, simplestring.o(i._ZN22SimpleStringCollectionixEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SimpleStringCollection::operator [](unsigned) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
</UL>

<P><STRONG><a name="[3b2]"></a>UtestShellPointerArray::relinkTestsInOrder()</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, utest.o(i._ZN22UtestShellPointerArray18relinkTestsInOrderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UtestShellPointerArray::relinkTestsInOrder()
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::shuffle(unsigned)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::reverse()
</UL>

<P><STRONG><a name="[3b1]"></a>UtestShellPointerArray::swap(unsigned, unsigned)</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, utest.o(i._ZN22UtestShellPointerArray4swapEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = UtestShellPointerArray::swap(unsigned, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[320]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::shuffle(unsigned)
<LI><a href="#[31d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::reverse()
</UL>

<P><STRONG><a name="[31d]"></a>UtestShellPointerArray::reverse()</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, utest.o(i._ZN22UtestShellPointerArray7reverseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UtestShellPointerArray::reverse() &rArr; UtestShellPointerArray::relinkTestsInOrder()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::swap(unsigned, unsigned)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::relinkTestsInOrder()
</UL>
<BR>[Called By]<UL><LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::reverseTests()
</UL>

<P><STRONG><a name="[320]"></a>UtestShellPointerArray::shuffle(unsigned)</STRONG> (Thumb, 78 bytes, Stack size 24 bytes, utest.o(i._ZN22UtestShellPointerArray7shuffleEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UtestShellPointerArray::shuffle(unsigned) &rArr; UtestShellPointerArray::relinkTestsInOrder()
</UL>
<BR>[Calls]<UL><LI><a href="#[3b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::swap(unsigned, unsigned)
<LI><a href="#[3b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::relinkTestsInOrder()
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::shuffleTests(unsigned)
</UL>

<P><STRONG><a name="[31c]"></a>UtestShellPointerArray::UtestShellPointerArray(UtestShell*)</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, utest.o(i._ZN22UtestShellPointerArrayC1EP10UtestShell))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = UtestShellPointerArray::UtestShellPointerArray(UtestShell*) &rArr; operator new[] (unsigned, const char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[3af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new[] (unsigned, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::shuffleTests(unsigned)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::reverseTests()
</UL>

<P><STRONG><a name="[483]"></a>UtestShellPointerArray::UtestShellPointerArray__sub_object(UtestShell*)</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, utest.o(i._ZN22UtestShellPointerArrayC1EP10UtestShell), UNUSED)

<P><STRONG><a name="[31f]"></a>UtestShellPointerArray::~UtestShellPointerArray()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN22UtestShellPointerArrayD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = UtestShellPointerArray::~UtestShellPointerArray() &rArr; operator delete[] (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::shuffleTests(unsigned)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::reverseTests()
</UL>

<P><STRONG><a name="[484]"></a>UtestShellPointerArray::~UtestShellPointerArray__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN22UtestShellPointerArrayD1Ev), UNUSED)

<P><STRONG><a name="[32e]"></a>JUnitTestCaseResultNode::JUnitTestCaseResultNode()</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, junittestoutput.o(i._ZN23JUnitTestCaseResultNodeC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = JUnitTestCaseResultNode::JUnitTestCaseResultNode() &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
</UL>

<P><STRONG><a name="[485]"></a>JUnitTestCaseResultNode::JUnitTestCaseResultNode__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, junittestoutput.o(i._ZN23JUnitTestCaseResultNodeC1Ev), UNUSED)

<P><STRONG><a name="[34e]"></a>MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN23MemoryLeakDetectorTable10addNewNodeEP22MemoryLeakDetectorNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::hash(char*)
<LI><a href="#[3b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::addNewNode(MemoryLeakDetectorNode*)
</UL>
<BR>[Called By]<UL><LI><a href="#[33d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned)
</UL>

<P><STRONG><a name="[33e]"></a>MemoryLeakDetectorTable::removeNode(char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN23MemoryLeakDetectorTable10removeNodeEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MemoryLeakDetectorTable::removeNode(char*) &rArr; MemoryLeakDetectorList::removeNode(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::hash(char*)
<LI><a href="#[3b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::removeNode(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, unsigned, bool)
</UL>

<P><STRONG><a name="[355]"></a>MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, memoryleakdetector.o(i._ZN23MemoryLeakDetectorTable11getNextLeakEP22MemoryLeakDetectorNode13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod) &rArr; MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod) &rArr; MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::hash(char*)
<LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod)
<LI><a href="#[3a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
</UL>

<P><STRONG><a name="[352]"></a>MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod)</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, memoryleakdetector.o(i._ZN23MemoryLeakDetectorTable12getFirstLeakE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = MemoryLeakDetectorTable::getFirstLeak(MemLeakPeriod) &rArr; MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod) &rArr; MemoryLeakDetectorList::getLeakFrom(MemoryLeakDetectorNode*, MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[3a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getFirstLeak(MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
</UL>

<P><STRONG><a name="[345]"></a>MemoryLeakDetectorTable::retrieveNode(char*)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN23MemoryLeakDetectorTable12retrieveNodeEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakDetectorTable::retrieveNode(char*)
</UL>
<BR>[Calls]<UL><LI><a href="#[3b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::hash(char*)
<LI><a href="#[3b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::retrieveNode(char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::invalidateMemory(char*)
</UL>

<P><STRONG><a name="[347]"></a>MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod)</STRONG> (Thumb, 34 bytes, Stack size 20 bytes, memoryleakdetector.o(i._ZN23MemoryLeakDetectorTable13getTotalLeaksE13MemLeakPeriod))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = MemoryLeakDetectorTable::getTotalLeaks(MemLeakPeriod) &rArr; MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod)
</UL>
<BR>[Calls]<UL><LI><a href="#[3aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorList::getTotalLeaks(MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod)
</UL>

<P><STRONG><a name="[3b4]"></a>MemoryLeakDetectorTable::hash(char*)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memoryleakdetector.o(i._ZN23MemoryLeakDetectorTable4hashEPc))
<BR><BR>[Called By]<UL><LI><a href="#[345]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::retrieveNode(char*)
<LI><a href="#[355]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::getNextLeak(MemoryLeakDetectorNode*, MemLeakPeriod)
<LI><a href="#[33e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::removeNode(char*)
<LI><a href="#[34e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetectorTable::addNewNode(MemoryLeakDetectorNode*)
</UL>

<P><STRONG><a name="[1a5]"></a>MemoryLeakWarningPlugin::FinalReport(unsigned)</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin11FinalReportEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MemoryLeakWarningPlugin::FinalReport(unsigned) &rArr; MemoryLeakDetector::report(MemLeakPeriod) &rArr; MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod) &rArr; MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*) &rArr; SimpleStringBuffer::addMemoryDump(const void*, unsigned) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::report(MemLeakPeriod)
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod)
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
</UL>
<P><STRONG><a name="[1a3]"></a>MemoryLeakWarningPlugin::preTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin13preTestActionER10UtestShellR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = MemoryLeakWarningPlugin::preTestAction(UtestShell&, TestResult&) &rArr; MemoryLeakDetector::startChecking() &rArr; MemoryLeakOutputStringBuffer::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::startChecking()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
</UL>
<P><STRONG><a name="[1a4]"></a>MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)</STRONG> (Thumb, 172 bytes, Stack size 96 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin14postTestActionER10UtestShellR10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 472<LI>Call Chain = MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::report(MemLeakPeriod)
<LI><a href="#[359]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::markCheckingPeriodLeaksAsNonCheckingPeriod()
<LI><a href="#[346]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::totalMemoryLeaks(MemLeakPeriod)
<LI><a href="#[3b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::stopChecking()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[3b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::areNewDeleteOverloaded()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
</UL>
<P><STRONG><a name="[298]"></a>MemoryLeakWarningPlugin::getGlobalDetector()</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin17getGlobalDetectorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MemoryLeakWarningPlugin::getGlobalDetector() &rArr; MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*) &rArr; __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Calls]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)
<LI><a href="#[3bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned)
<LI><a href="#[3bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::MemoryLeakWarningReporter()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
<LI><a href="#[3bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::restoreNewDeleteOverloads()
</UL>
<BR>[Called By]<UL><LI><a href="#[386]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*)
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex()
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_array_nothrow(unsigned)
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_array_debug(unsigned, const char*, unsigned)
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;threadsafe_mem_leak_operator_new(unsigned)
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_delete_array(void*)
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_nothrow(unsigned)
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_debug(unsigned, const char*, unsigned)
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new_array(unsigned)
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_delete(void*)
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_operator_new(unsigned)
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_realloc(void*, unsigned, const char*, unsigned)
<LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_malloc(unsigned, const char*, unsigned)
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_leak_free(void*, const char*, unsigned)
</UL>

<P><STRONG><a name="[3be]"></a>MemoryLeakWarningPlugin::destroyGlobalDetector()</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin21destroyGlobalDetectorEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryLeakWarningPlugin::destroyGlobalDetector()
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
</UL>

<P><STRONG><a name="[3b9]"></a>MemoryLeakWarningPlugin::areNewDeleteOverloaded()</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
</UL>

<P><STRONG><a name="[3bd]"></a>MemoryLeakWarningPlugin::restoreNewDeleteOverloads()</STRONG> (Thumb, 108 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25restoreNewDeleteOverloadsEv))
<BR><BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>

<P><STRONG><a name="[3bf]"></a>MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()</STRONG> (Thumb, 68 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv))
<BR><BR>[Called By]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
<LI><a href="#[3ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::destroyGlobalDetector()
</UL>

<P><STRONG><a name="[3ba]"></a>MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()</STRONG> (Thumb, 114 bytes, Stack size 4 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin32saveAndDisableNewDeleteOverloadsEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MemoryLeakWarningPlugin::saveAndDisableNewDeleteOverloads()
</UL>
<BR>[Calls]<UL><LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>

<P><STRONG><a name="[387]"></a>MemoryLeakWarningPlugin::destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructor(bool)</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin62destroyGlobalDetectorAndTurnOffMemoryLeakDetectionInDestructorEb))
<BR><BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
</UL>

<P><STRONG><a name="[386]"></a>MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*)</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = MemoryLeakWarningPlugin::MemoryLeakWarningPlugin(const SimpleString&, MemoryLeakDetector*) &rArr; TestPlugin::TestPlugin(const SimpleString&) &rArr; NullTestPlugin::instance() &rArr; NullTestPlugin::NullTestPlugin() &rArr; TestPlugin::TestPlugin(TestPlugin*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::enable()
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::TestPlugin(const SimpleString&)
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
</UL>

<P><STRONG><a name="[486]"></a>MemoryLeakWarningPlugin::MemoryLeakWarningPlugin__sub_object(const SimpleString&, MemoryLeakDetector*)</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPluginC1ERK12SimpleStringP18MemoryLeakDetector), UNUSED)

<P><STRONG><a name="[1a2]"></a>MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPluginD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__deallocating() &rArr; MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin() &rArr; TestPlugin::~TestPlugin() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
</UL>
<P><STRONG><a name="[1a1]"></a>MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin()</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPluginD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin() &rArr; TestPlugin::~TestPlugin() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin()
<LI><a href="#[3bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::turnOffNewDeleteOverloads()
<LI><a href="#[3be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::destroyGlobalDetector()
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV23MemoryLeakWarningPlugin)
</UL>
<P><STRONG><a name="[487]"></a>MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPluginD1Ev), UNUSED)

<P><STRONG><a name="[2ee]"></a>SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)</STRONG> (Thumb, 268 bytes, Stack size 128 bytes, testfailure.o(i._ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 560<LI>Call Chain = SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&) &rArr; BracketsFormattedHexStringFrom(signed char) &rArr; HexStringFrom(signed char) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(signed char)
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(int)
</UL>
<BR>[Called By]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertSignedBytesEqual(signed char, signed char, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[488]"></a>SignedBytesEqualFailure::SignedBytesEqualFailure__sub_object(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 128 bytes, testfailure.o(i._ZN23SignedBytesEqualFailureC1EP10UtestShellPKcjaaRK12SimpleString), UNUSED)

<P><STRONG><a name="[1a7]"></a>SignedBytesEqualFailure::~SignedBytesEqualFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN23SignedBytesEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = SignedBytesEqualFailure::~SignedBytesEqualFailure__deallocating() &rArr; SignedBytesEqualFailure::~SignedBytesEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::~SignedBytesEqualFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
</UL>
<P><STRONG><a name="[1a6]"></a>SignedBytesEqualFailure::~SignedBytesEqualFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN23SignedBytesEqualFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = SignedBytesEqualFailure::~SignedBytesEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::~SignedBytesEqualFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
</UL>
<P><STRONG><a name="[489]"></a>SignedBytesEqualFailure::~SignedBytesEqualFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN23SignedBytesEqualFailureD1Ev), UNUSED)

<P><STRONG><a name="[2ec]"></a>StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)</STRONG> (Thumb, 238 bytes, Stack size 88 bytes, testfailure.o(i._ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&) &rArr; TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::at(unsigned) const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::ToLower(char)
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintableStringFromOrNull(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[48a]"></a>StringEqualNoCaseFailure::StringEqualNoCaseFailure__sub_object(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 88 bytes, testfailure.o(i._ZN24StringEqualNoCaseFailureC1EP10UtestShellPKcjS3_S3_RK12SimpleString), UNUSED)

<P><STRONG><a name="[1a9]"></a>StringEqualNoCaseFailure::~StringEqualNoCaseFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN24StringEqualNoCaseFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = StringEqualNoCaseFailure::~StringEqualNoCaseFailure__deallocating() &rArr; StringEqualNoCaseFailure::~StringEqualNoCaseFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::~StringEqualNoCaseFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
</UL>
<P><STRONG><a name="[1a8]"></a>StringEqualNoCaseFailure::~StringEqualNoCaseFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN24StringEqualNoCaseFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = StringEqualNoCaseFailure::~StringEqualNoCaseFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::~StringEqualNoCaseFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
</UL>
<P><STRONG><a name="[48b]"></a>StringEqualNoCaseFailure::~StringEqualNoCaseFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN24StringEqualNoCaseFailureD1Ev), UNUSED)

<P><STRONG><a name="[1ac]"></a>MemoryLeakWarningReporter::fail(char*)</STRONG> (Thumb, 122 bytes, Stack size 112 bytes, memoryleakwarningplugin.o(i._ZN25MemoryLeakWarningReporter4failEPc))
<BR><BR>[Stack]<UL><LI>Max Depth = 352<LI>Call Chain = MemoryLeakWarningReporter::fail(char*) &rArr; FailFailure::FailFailure(UtestShell*, const char*, unsigned, const SimpleString&) &rArr; TestFailure::TestFailure(UtestShell*, const char*, unsigned) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getName() const
<LI><a href="#[2fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getLineNumber() const
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::FailFailure(UtestShell*, const char*, unsigned, const SimpleString&)
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::TestTerminatorWithoutExceptions()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV25MemoryLeakWarningReporter)
</UL>
<P><STRONG><a name="[3bc]"></a>MemoryLeakWarningReporter::MemoryLeakWarningReporter()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZN25MemoryLeakWarningReporterC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = MemoryLeakWarningReporter::MemoryLeakWarningReporter()
</UL>
<BR>[Calls]<UL><LI><a href="#[3c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakFailure::MemoryLeakFailure__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>

<P><STRONG><a name="[48c]"></a>MemoryLeakWarningReporter::MemoryLeakWarningReporter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZN25MemoryLeakWarningReporterC1Ev), UNUSED)

<P><STRONG><a name="[1ab]"></a>MemoryLeakWarningReporter::~MemoryLeakWarningReporter__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._ZN25MemoryLeakWarningReporterD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = MemoryLeakWarningReporter::~MemoryLeakWarningReporter__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::~MemoryLeakWarningReporter()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV25MemoryLeakWarningReporter)
</UL>
<P><STRONG><a name="[1aa]"></a>MemoryLeakWarningReporter::~MemoryLeakWarningReporter()</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(i._ZN25MemoryLeakWarningReporterD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::~MemoryLeakWarningReporter__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV25MemoryLeakWarningReporter)
</UL>
<P><STRONG><a name="[48d]"></a>MemoryLeakWarningReporter::~MemoryLeakWarningReporter__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memoryleakwarningplugin.o(i._ZN25MemoryLeakWarningReporterD1Ev), UNUSED)

<P><STRONG><a name="[2f0]"></a>UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)</STRONG> (Thumb, 268 bytes, Stack size 128 bytes, testfailure.o(i._ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&) &rArr; BracketsFormattedHexStringFrom(unsigned long) &rArr; HexStringFrom(unsigned long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(unsigned long)
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(unsigned long)
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongsEqual(unsigned long, unsigned long, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[48e]"></a>UnsignedLongsEqualFailure::UnsignedLongsEqualFailure__sub_object(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 128 bytes, testfailure.o(i._ZN25UnsignedLongsEqualFailureC1EP10UtestShellPKcjmmRK12SimpleString), UNUSED)

<P><STRONG><a name="[1ae]"></a>UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN25UnsignedLongsEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure__deallocating() &rArr; UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
</UL>
<P><STRONG><a name="[1ad]"></a>UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN25UnsignedLongsEqualFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
</UL>
<P><STRONG><a name="[48f]"></a>UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN25UnsignedLongsEqualFailureD1Ev), UNUSED)

<P><STRONG><a name="[3c3]"></a>MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)</STRONG> (Thumb, 84 bytes, Stack size 40 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer13reportFailureEPKcS1_jjP19TestMemoryAllocatorS1_jS3_P17MemoryLeakFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[35b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::toString()
<LI><a href="#[3c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addDeallocationLocation(const char*, unsigned, TestMemoryAllocator*)
<LI><a href="#[3c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*)
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[349]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[33f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[34b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>

<P><STRONG><a name="[354]"></a>MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*)</STRONG> (Thumb, 94 bytes, Stack size 32 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer16reportMemoryLeakEP22MemoryLeakDetectorNode))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*) &rArr; SimpleStringBuffer::addMemoryDump(const void*, unsigned) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addMemoryLeakHeader()
<LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
<LI><a href="#[361]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::addMemoryDump(const void*, unsigned)
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrCmp(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)
</UL>

<P><STRONG><a name="[3c7]"></a>MemoryLeakOutputStringBuffer::addMemoryLeakFooter(unsigned)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer19addMemoryLeakFooterEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = MemoryLeakOutputStringBuffer::addMemoryLeakFooter(unsigned) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
</UL>

<P><STRONG><a name="[3c6]"></a>MemoryLeakOutputStringBuffer::addMemoryLeakHeader()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer19addMemoryLeakHeaderEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MemoryLeakOutputStringBuffer::addMemoryLeakHeader() &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[354]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportMemoryLeak(MemoryLeakDetectorNode*)
</UL>

<P><STRONG><a name="[3c4]"></a>MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*)</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer21addAllocationLocationEPKcjjP19TestMemoryAllocator))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>

<P><STRONG><a name="[3c5]"></a>MemoryLeakOutputStringBuffer::addDeallocationLocation(const char*, unsigned, TestMemoryAllocator*)</STRONG> (Thumb, 42 bytes, Stack size 32 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer23addDeallocationLocationEPKcjP19TestMemoryAllocator))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MemoryLeakOutputStringBuffer::addDeallocationLocation(const char*, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>

<P><STRONG><a name="[3c8]"></a>MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer23addNoMemoryLeaksMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage() &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
</UL>

<P><STRONG><a name="[356]"></a>MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer23stopMemoryLeakReportingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = MemoryLeakOutputStringBuffer::stopMemoryLeakReporting() &rArr; MemoryLeakOutputStringBuffer::addMemoryLeakFooter(unsigned) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[3cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()
<LI><a href="#[3cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()
<LI><a href="#[3c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addNoMemoryLeaksMessage()
<LI><a href="#[3c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::addMemoryLeakFooter(unsigned)
<LI><a href="#[3c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::reachedItsCapacity()
<LI><a href="#[3ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::resetWriteLimit()
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)
</UL>

<P><STRONG><a name="[3cc]"></a>MemoryLeakOutputStringBuffer::addWarningForUsingMalloc()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer24addWarningForUsingMallocEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MemoryLeakOutputStringBuffer::addWarningForUsingMalloc() &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
</UL>

<P><STRONG><a name="[353]"></a>MemoryLeakOutputStringBuffer::startMemoryLeakReporting()</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer24startMemoryLeakReportingEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = MemoryLeakOutputStringBuffer::startMemoryLeakReporting()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::setWriteLimit(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[351]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::ConstructMemoryLeakReport(MemLeakPeriod)
</UL>

<P><STRONG><a name="[34b]"></a>MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer29reportMemoryCorruptionFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MemoryLeakOutputStringBuffer::reportMemoryCorruptionFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool)
</UL>

<P><STRONG><a name="[3cb]"></a>MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks()</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer30addErrorMessageForTooMuchLeaksEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = MemoryLeakOutputStringBuffer::addErrorMessageForTooMuchLeaks() &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[362]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Called By]<UL><LI><a href="#[356]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::stopMemoryLeakReporting()
</UL>

<P><STRONG><a name="[33f]"></a>MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)</STRONG> (Thumb, 56 bytes, Stack size 56 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer41reportDeallocateNonAllocatedMemoryFailureEPKcjP19TestMemoryAllocatorP17MemoryLeakFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MemoryLeakOutputStringBuffer::reportDeallocateNonAllocatedMemoryFailure(const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::defaultAllocator()
<LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, unsigned, bool)
</UL>

<P><STRONG><a name="[349]"></a>MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)</STRONG> (Thumb, 52 bytes, Stack size 56 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer43reportAllocationDeallocationMismatchFailureEP22MemoryLeakDetectorNodePKcjP19TestMemoryAllocatorP17MemoryLeakFailure))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
</UL>
<BR>[Called By]<UL><LI><a href="#[341]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool)
</UL>

<P><STRONG><a name="[344]"></a>MemoryLeakOutputStringBuffer::clear()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer5clearEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MemoryLeakOutputStringBuffer::clear()
</UL>
<BR>[Calls]<UL><LI><a href="#[3ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::clear()
</UL>
<BR>[Called By]<UL><LI><a href="#[343]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::startChecking()
</UL>

<P><STRONG><a name="[35b]"></a>MemoryLeakOutputStringBuffer::toString()</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBuffer8toStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MemoryLeakOutputStringBuffer::toString()
</UL>
<BR>[Calls]<UL><LI><a href="#[3cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::toString()
</UL>
<BR>[Called By]<UL><LI><a href="#[3c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*)
<LI><a href="#[35a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::report(MemLeakPeriod)
</UL>

<P><STRONG><a name="[35d]"></a>MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()</STRONG> (Thumb, 26 bytes, Stack size 4 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBufferC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer()
</UL>
<BR>[Calls]<UL><LI><a href="#[3d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringBuffer::SimpleStringBuffer()
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)
</UL>

<P><STRONG><a name="[490]"></a>MemoryLeakOutputStringBuffer::MemoryLeakOutputStringBuffer__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, memoryleakdetector.o(i._ZN28MemoryLeakOutputStringBufferC1Ev), UNUSED)

<P><STRONG><a name="[2f3]"></a>UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)</STRONG> (Thumb, 274 bytes, Stack size 128 bytes, testfailure.o(i._ZN29UnsignedLongLongsEqualFailureC1EP10UtestShellPKcjyyRK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 544<LI>Call Chain = UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&) &rArr; BracketsFormattedHexStringFrom(unsigned long long) &rArr; HexStringFrom(unsigned long long) &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexStringFrom(unsigned long long)
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(unsigned long long)
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertUnsignedLongLongsEqual(unsigned long long, unsigned long long, const char*, const char*, unsigned, const TestTerminator&)
</UL>

<P><STRONG><a name="[491]"></a>UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure__sub_object(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)</STRONG> (Thumb, 0 bytes, Stack size 128 bytes, testfailure.o(i._ZN29UnsignedLongLongsEqualFailureC1EP10UtestShellPKcjyyRK12SimpleString), UNUSED)

<P><STRONG><a name="[1b0]"></a>UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZN29UnsignedLongLongsEqualFailureD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure__deallocating() &rArr; UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
</UL>
<P><STRONG><a name="[1af]"></a>UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._ZN29UnsignedLongLongsEqualFailureD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure() &rArr; TestFailure::~TestFailure() &rArr; SimpleString::~SimpleString() &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
</UL>
<P><STRONG><a name="[492]"></a>UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, utest.o(i._ZN29UnsignedLongLongsEqualFailureD1Ev), UNUSED)

<P><STRONG><a name="[3c1]"></a>TestTerminatorWithoutExceptions::TestTerminatorWithoutExceptions()</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZN31TestTerminatorWithoutExceptionsC1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestTerminatorWithoutExceptions::TestTerminatorWithoutExceptions()
</UL>
<BR>[Calls]<UL><LI><a href="#[382]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminator::TestTerminator__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::exitCurrentTest() const
</UL>

<P><STRONG><a name="[493]"></a>TestTerminatorWithoutExceptions::TestTerminatorWithoutExceptions__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZN31TestTerminatorWithoutExceptionsC1Ev), UNUSED)

<P><STRONG><a name="[1b3]"></a>TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZN31TestTerminatorWithoutExceptionsD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV31TestTerminatorWithoutExceptions)
</UL>
<P><STRONG><a name="[1b2]"></a>TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, utest.o(i._ZN31TestTerminatorWithoutExceptionsD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminator::~TestTerminator__sub_object()
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::exitCurrentTest() const
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV31TestTerminatorWithoutExceptions)
</UL>
<P><STRONG><a name="[494]"></a>TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 4 bytes, utest.o(i._ZN31TestTerminatorWithoutExceptionsD1Ev), UNUSED)

<P><STRONG><a name="[1b9]"></a>TEST_FirstTestGroup_FirstTest_Test::testBody()</STRONG> (Thumb, 38 bytes, Stack size 24 bytes, test.o(i._ZN34TEST_FirstTestGroup_FirstTest_Test8testBodyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = TEST_FirstTestGroup_FirstTest_Test::testBody() &rArr; UtestShell::getCurrent() &rArr; OutsideTestRunnerUTest::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrentTestTerminator()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.constdata__ZTV34TEST_FirstTestGroup_FirstTest_Test)
</UL>
<P><STRONG><a name="[1b5]"></a>TEST_FirstTestGroup_FirstTest_Test::~TEST_FirstTestGroup_FirstTest_Test__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, test.o(i._ZN34TEST_FirstTestGroup_FirstTest_TestD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = TEST_FirstTestGroup_FirstTest_Test::~TEST_FirstTestGroup_FirstTest_Test__deallocating() &rArr; TEST_FirstTestGroup_FirstTest_Test::~TEST_FirstTestGroup_FirstTest_Test() &rArr; TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup()
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FirstTestGroup_FirstTest_Test::~TEST_FirstTestGroup_FirstTest_Test()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.constdata__ZTV34TEST_FirstTestGroup_FirstTest_Test)
</UL>
<P><STRONG><a name="[1b4]"></a>TEST_FirstTestGroup_FirstTest_Test::~TEST_FirstTestGroup_FirstTest_Test()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, test.o(i._ZN34TEST_FirstTestGroup_FirstTest_TestD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = TEST_FirstTestGroup_FirstTest_Test::~TEST_FirstTestGroup_FirstTest_Test() &rArr; TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup()
</UL>
<BR>[Calls]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup()
</UL>
<BR>[Called By]<UL><LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FirstTestGroup_FirstTest_Test::~TEST_FirstTestGroup_FirstTest_Test__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.constdata__ZTV34TEST_FirstTestGroup_FirstTest_Test)
</UL>
<P><STRONG><a name="[495]"></a>TEST_FirstTestGroup_FirstTest_Test::~TEST_FirstTestGroup_FirstTest_Test__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, test.o(i._ZN34TEST_FirstTestGroup_FirstTest_TestD1Ev), UNUSED)

<P><STRONG><a name="[1b7]"></a>TEST_GROUP_CppUTestGroupFirstTestGroup::setup()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test.o(i._ZN38TEST_GROUP_CppUTestGroupFirstTestGroup5setupEv))
<BR>[Address Reference Count : 2]<UL><LI> test.o(.constdata__ZTV34TEST_FirstTestGroup_FirstTest_Test)
<LI> test.o(.constdata__ZTV38TEST_GROUP_CppUTestGroupFirstTestGroup)
</UL>
<P><STRONG><a name="[1b8]"></a>TEST_GROUP_CppUTestGroupFirstTestGroup::teardown()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, test.o(i._ZN38TEST_GROUP_CppUTestGroupFirstTestGroup8teardownEv))
<BR>[Address Reference Count : 2]<UL><LI> test.o(.constdata__ZTV34TEST_FirstTestGroup_FirstTest_Test)
<LI> test.o(.constdata__ZTV38TEST_GROUP_CppUTestGroupFirstTestGroup)
</UL>
<P><STRONG><a name="[1bb]"></a>TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, test.o(i._ZN38TEST_GROUP_CppUTestGroupFirstTestGroupD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.constdata__ZTV38TEST_GROUP_CppUTestGroupFirstTestGroup)
</UL>
<P><STRONG><a name="[1ba]"></a>TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, test.o(i._ZN38TEST_GROUP_CppUTestGroupFirstTestGroupD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup()
</UL>
<BR>[Calls]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::~Utest()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup__deallocating()
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FirstTestGroup_FirstTest_Test::~TEST_FirstTestGroup_FirstTest_Test()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.constdata__ZTV38TEST_GROUP_CppUTestGroupFirstTestGroup)
</UL>
<P><STRONG><a name="[496]"></a>TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, test.o(i._ZN38TEST_GROUP_CppUTestGroupFirstTestGroupD1Ev), UNUSED)

<P><STRONG><a name="[1be]"></a>TEST_FirstTestGroup_FirstTest_TestShell::createTest()</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, test.o(i._ZN39TEST_FirstTestGroup_FirstTest_TestShell10createTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TEST_FirstTestGroup_FirstTest_TestShell::createTest() &rArr; operator new(unsigned, const char*, int)
</UL>
<BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator new(unsigned, const char*, int)
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::Utest()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
</UL>
<P><STRONG><a name="[1bd]"></a>TEST_FirstTestGroup_FirstTest_TestShell::~TEST_FirstTestGroup_FirstTest_TestShell__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, test.o(i._ZN39TEST_FirstTestGroup_FirstTest_TestShellD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TEST_FirstTestGroup_FirstTest_TestShell::~TEST_FirstTestGroup_FirstTest_TestShell__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FirstTestGroup_FirstTest_TestShell::~TEST_FirstTestGroup_FirstTest_TestShell()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
</UL>
<P><STRONG><a name="[a4]"></a>TEST_FirstTestGroup_FirstTest_TestShell::~TEST_FirstTestGroup_FirstTest_TestShell()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, test.o(i._ZN39TEST_FirstTestGroup_FirstTest_TestShellD1Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEST_FirstTestGroup_FirstTest_TestShell::~TEST_FirstTestGroup_FirstTest_TestShell()
</UL>
<BR>[Calls]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::~UtestShell()
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FirstTestGroup_FirstTest_TestShell::~TEST_FirstTestGroup_FirstTest_TestShell__deallocating()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> test.o(i.__sti___8_test_cpp_fe8858fa)
<LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
</UL>
<P><STRONG><a name="[497]"></a>TEST_FirstTestGroup_FirstTest_TestShell::~TEST_FirstTestGroup_FirstTest_TestShell__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, test.o(i._ZN39TEST_FirstTestGroup_FirstTest_TestShellD1Ev), UNUSED)

<P><STRONG><a name="[1b6]"></a>Utest::run()</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, utest.o(i._ZN5Utest3runEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Utest::run()
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV34TEST_FirstTestGroup_FirstTest_Test)
<LI> test.o(.constdata__ZTV38TEST_GROUP_CppUTestGroupFirstTestGroup)
<LI> utest.o(.constdata__ZTV5Utest)
</UL>
<P><STRONG><a name="[1c1]"></a>Utest::setup()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(i._ZN5Utest5setupEv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV5Utest)
</UL>
<P><STRONG><a name="[1c2]"></a>Utest::teardown()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(i._ZN5Utest8teardownEv))
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV5Utest)
</UL>
<P><STRONG><a name="[1bc]"></a>Utest::testBody()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(i._ZN5Utest8testBodyEv))
<BR>[Address Reference Count : 2]<UL><LI> test.o(.constdata__ZTV38TEST_GROUP_CppUTestGroupFirstTestGroup)
<LI> utest.o(.constdata__ZTV5Utest)
</UL>
<P><STRONG><a name="[2dc]"></a>Utest::Utest()</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(i._ZN5UtestC1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FirstTestGroup_FirstTest_TestShell::createTest()
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::createTest()
</UL>

<P><STRONG><a name="[498]"></a>Utest::Utest__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, utest.o(i._ZN5UtestC1Ev), UNUSED)

<P><STRONG><a name="[1c0]"></a>Utest::~Utest__deallocating()</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZN5UtestD0Ev))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Utest::~Utest__deallocating() &rArr; operator delete (void*)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete (void*)
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::~Utest()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV5Utest)
</UL>
<P><STRONG><a name="[1bf]"></a>Utest::~Utest()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utest.o(i._ZN5UtestD1Ev))
<BR><BR>[Called By]<UL><LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::~Utest__deallocating()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV5Utest)
</UL>
<P><STRONG><a name="[499]"></a>Utest::~Utest__sub_object()</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, utest.o(i._ZN5UtestD1Ev), UNUSED)

<P><STRONG><a name="[3d1]"></a>TestFilter::match(const SimpleString&) const</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, testfilter.o(i._ZNK10TestFilter5matchERK12SimpleString))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = TestFilter::match(const SimpleString&) const &rArr; SimpleString::contains(const SimpleString&) const &rArr; SimpleString::StrStr(const char*, const char*) &rArr; SimpleString::StrNCmp(const char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::match(const char*, const TestFilter*) const
</UL>

<P><STRONG><a name="[380]"></a>TestFilter::getNext() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testfilter.o(i._ZNK10TestFilter7getNextEv))
<BR><BR>[Called By]<UL><LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments()
<LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::match(const char*, const TestFilter*) const
</UL>

<P><STRONG><a name="[2cb]"></a>TestResult::getTotalExecutionTime() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testresult.o(i._ZNK10TestResult21getTotalExecutionTimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printTestsEnded(const TestResult&)
</UL>

<P><STRONG><a name="[2cf]"></a>TestResult::getCurrentTestTotalExecutionTime() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testresult.o(i._ZNK10TestResult32getCurrentTestTotalExecutionTimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestEnded(const TestResult&)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestEnded(const TestResult&)
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printCurrentTestEnded(const TestResult&)
</UL>

<P><STRONG><a name="[32d]"></a>TestResult::getCurrentGroupTotalExecutionTime() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testresult.o(i._ZNK10TestResult33getCurrentGroupTotalExecutionTimeEv))
<BR><BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentGroupEnded(const TestResult&)
</UL>

<P><STRONG><a name="[105]"></a>UtestShell::getMacroName() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZNK10UtestShell12getMacroNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UtestShell::getMacroName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[2fe]"></a>UtestShell::getLineNumber() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(i._ZNK10UtestShell13getLineNumberEv))
<BR><BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestLocations(TestResult&)
</UL>

<P><STRONG><a name="[e2]"></a>UtestShell::getFormattedName() const</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, utest.o(i._ZNK10UtestShell16getFormattedNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UtestShell::getFormattedName() const &rArr; SimpleString::operator +=(const char*) &rArr; SimpleString::setInternalBufferTo(char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
</UL>
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[fc]"></a>UtestShell::isRunInSeperateProcess() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(i._ZNK10UtestShell22isRunInSeperateProcessEv))
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[3d2]"></a>UtestShell::match(const char*, const TestFilter*) const</STRONG> (Thumb, 78 bytes, Stack size 40 bytes, utest.o(i._ZNK10UtestShell5matchEPKcPK10TestFilter))
<BR><BR>[Stack]<UL><LI>Max Depth = 216<LI>Call Chain = UtestShell::match(const char*, const TestFilter*) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[380]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::getNext() const
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::match(const SimpleString&) const
</UL>
<BR>[Called By]<UL><LI><a href="#[321]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::shouldRun(const TestFilter*, const TestFilter*) const
</UL>

<P><STRONG><a name="[2fd]"></a>UtestShell::getFile() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZNK10UtestShell7getFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UtestShell::getFile() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestLocations(TestResult&)
</UL>

<P><STRONG><a name="[2fc]"></a>UtestShell::getName() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZNK10UtestShell7getNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[2f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const char*, unsigned)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestEnded(const TestResult&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestLocations(TestResult&)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithName(const SimpleString&)
</UL>

<P><STRONG><a name="[e0]"></a>UtestShell::getNext() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(i._ZNK10UtestShell7getNextEv))
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[e3]"></a>UtestShell::willRun() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(i._ZNK10UtestShell7willRunEv))
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[319]"></a>UtestShell::getGroup() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utest.o(i._ZNK10UtestShell8getGroupEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = UtestShell::getGroup() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestLocations(TestResult&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithGroup(const SimpleString&)
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::endOfGroup(UtestShell*)
</UL>

<P><STRONG><a name="[e4]"></a>UtestShell::hasFailed() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utest.o(i._ZNK10UtestShell9hasFailedEv))
<BR>[Address Reference Count : 3]<UL><LI> test.o(.constdata__ZTV39TEST_FirstTestGroup_FirstTest_TestShell)
<LI> utest.o(.constdata__ZTV10UtestShell)
<LI> utest.o(.constdata__ZTV22OutsideTestRunnerUTest)
</UL>
<P><STRONG><a name="[321]"></a>UtestShell::shouldRun(const TestFilter*, const TestFilter*) const</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utest.o(i._ZNK10UtestShell9shouldRunEPK10TestFilterS2_))
<BR><BR>[Stack]<UL><LI>Max Depth = 232<LI>Call Chain = UtestShell::shouldRun(const TestFilter*, const TestFilter*) const &rArr; UtestShell::match(const char*, const TestFilter*) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::match(const char*, const TestFilter*) const
</UL>
<BR>[Called By]<UL><LI><a href="#[31b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::testShouldRun(UtestShell*, TestResult&)
</UL>

<P><STRONG><a name="[10c]"></a>TestFailure::getMessage() const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, testfailure.o(i._ZNK11TestFailure10getMessageEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TestFailure::getMessage() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.constdata__ZTV11TestFailure)
<LI> testfailure.o(.constdata__ZTV13EqualsFailure)
<LI> testfailure.o(.constdata__ZTV19DoublesEqualFailure)
<LI> testfailure.o(.constdata__ZTV17CheckEqualFailure)
<LI> testfailure.o(.constdata__ZTV17ComparisonFailure)
<LI> testfailure.o(.constdata__ZTV15ContainsFailure)
<LI> testfailure.o(.constdata__ZTV12CheckFailure)
<LI> testfailure.o(.constdata__ZTV11FailFailure)
<LI> testfailure.o(.constdata__ZTV17LongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.constdata__ZTV18StringEqualFailure)
<LI> testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.constdata__ZTV18BinaryEqualFailure)
<LI> testfailure.o(.constdata__ZTV16BitsEqualFailure)
</UL>
<P><STRONG><a name="[108]"></a>TestFailure::getFileName() const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, testfailure.o(i._ZNK11TestFailure11getFileNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TestFailure::getFileName() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.constdata__ZTV11TestFailure)
<LI> testfailure.o(.constdata__ZTV13EqualsFailure)
<LI> testfailure.o(.constdata__ZTV19DoublesEqualFailure)
<LI> testfailure.o(.constdata__ZTV17CheckEqualFailure)
<LI> testfailure.o(.constdata__ZTV17ComparisonFailure)
<LI> testfailure.o(.constdata__ZTV15ContainsFailure)
<LI> testfailure.o(.constdata__ZTV12CheckFailure)
<LI> testfailure.o(.constdata__ZTV11FailFailure)
<LI> testfailure.o(.constdata__ZTV17LongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.constdata__ZTV18StringEqualFailure)
<LI> testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.constdata__ZTV18BinaryEqualFailure)
<LI> testfailure.o(.constdata__ZTV16BitsEqualFailure)
</UL>
<P><STRONG><a name="[109]"></a>TestFailure::getTestName() const</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, testfailure.o(i._ZNK11TestFailure11getTestNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TestFailure::getTestName() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.constdata__ZTV11TestFailure)
<LI> testfailure.o(.constdata__ZTV13EqualsFailure)
<LI> testfailure.o(.constdata__ZTV19DoublesEqualFailure)
<LI> testfailure.o(.constdata__ZTV17CheckEqualFailure)
<LI> testfailure.o(.constdata__ZTV17ComparisonFailure)
<LI> testfailure.o(.constdata__ZTV15ContainsFailure)
<LI> testfailure.o(.constdata__ZTV12CheckFailure)
<LI> testfailure.o(.constdata__ZTV11FailFailure)
<LI> testfailure.o(.constdata__ZTV17LongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.constdata__ZTV18StringEqualFailure)
<LI> testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.constdata__ZTV18BinaryEqualFailure)
<LI> testfailure.o(.constdata__ZTV16BitsEqualFailure)
</UL>
<P><STRONG><a name="[10d]"></a>TestFailure::getTestFileName() const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, testfailure.o(i._ZNK11TestFailure15getTestFileNameEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TestFailure::getTestFileName() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.constdata__ZTV11TestFailure)
<LI> testfailure.o(.constdata__ZTV13EqualsFailure)
<LI> testfailure.o(.constdata__ZTV19DoublesEqualFailure)
<LI> testfailure.o(.constdata__ZTV17CheckEqualFailure)
<LI> testfailure.o(.constdata__ZTV17ComparisonFailure)
<LI> testfailure.o(.constdata__ZTV15ContainsFailure)
<LI> testfailure.o(.constdata__ZTV12CheckFailure)
<LI> testfailure.o(.constdata__ZTV11FailFailure)
<LI> testfailure.o(.constdata__ZTV17LongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.constdata__ZTV18StringEqualFailure)
<LI> testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.constdata__ZTV18BinaryEqualFailure)
<LI> testfailure.o(.constdata__ZTV16BitsEqualFailure)
</UL>
<P><STRONG><a name="[10a]"></a>TestFailure::getTestNameOnly() const</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, testfailure.o(i._ZNK11TestFailure15getTestNameOnlyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = TestFailure::getTestNameOnly() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
</UL>
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.constdata__ZTV11TestFailure)
<LI> testfailure.o(.constdata__ZTV13EqualsFailure)
<LI> testfailure.o(.constdata__ZTV19DoublesEqualFailure)
<LI> testfailure.o(.constdata__ZTV17CheckEqualFailure)
<LI> testfailure.o(.constdata__ZTV17ComparisonFailure)
<LI> testfailure.o(.constdata__ZTV15ContainsFailure)
<LI> testfailure.o(.constdata__ZTV12CheckFailure)
<LI> testfailure.o(.constdata__ZTV11FailFailure)
<LI> testfailure.o(.constdata__ZTV17LongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.constdata__ZTV18StringEqualFailure)
<LI> testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.constdata__ZTV18BinaryEqualFailure)
<LI> testfailure.o(.constdata__ZTV16BitsEqualFailure)
</UL>
<P><STRONG><a name="[10e]"></a>TestFailure::getTestLineNumber() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testfailure.o(i._ZNK11TestFailure17getTestLineNumberEv))
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.constdata__ZTV11TestFailure)
<LI> testfailure.o(.constdata__ZTV13EqualsFailure)
<LI> testfailure.o(.constdata__ZTV19DoublesEqualFailure)
<LI> testfailure.o(.constdata__ZTV17CheckEqualFailure)
<LI> testfailure.o(.constdata__ZTV17ComparisonFailure)
<LI> testfailure.o(.constdata__ZTV15ContainsFailure)
<LI> testfailure.o(.constdata__ZTV12CheckFailure)
<LI> testfailure.o(.constdata__ZTV11FailFailure)
<LI> testfailure.o(.constdata__ZTV17LongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.constdata__ZTV18StringEqualFailure)
<LI> testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.constdata__ZTV18BinaryEqualFailure)
<LI> testfailure.o(.constdata__ZTV16BitsEqualFailure)
</UL>
<P><STRONG><a name="[2c6]"></a>TestFailure::isOutsideTestFile() const</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, testfailure.o(i._ZNK11TestFailure17isOutsideTestFileEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = TestFailure::isOutsideTestFile() const &rArr; operator !=(const SimpleString&, const SimpleString&) &rArr; operator ==(const SimpleString&, const SimpleString&) &rArr; SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !=(const SimpleString&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printFailure(const TestFailure&)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[2c7]"></a>TestFailure::isInHelperFunction() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, testfailure.o(i._ZNK11TestFailure18isInHelperFunctionEv))
<BR><BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printFailure(const TestFailure&)
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailure(const TestFailure&)
</UL>

<P><STRONG><a name="[10b]"></a>TestFailure::getFailureLineNumber() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testfailure.o(i._ZNK11TestFailure20getFailureLineNumberEv))
<BR>[Address Reference Count : 17]<UL><LI> testfailure.o(.constdata__ZTV11TestFailure)
<LI> testfailure.o(.constdata__ZTV13EqualsFailure)
<LI> testfailure.o(.constdata__ZTV19DoublesEqualFailure)
<LI> testfailure.o(.constdata__ZTV17CheckEqualFailure)
<LI> testfailure.o(.constdata__ZTV17ComparisonFailure)
<LI> testfailure.o(.constdata__ZTV15ContainsFailure)
<LI> testfailure.o(.constdata__ZTV12CheckFailure)
<LI> testfailure.o(.constdata__ZTV11FailFailure)
<LI> testfailure.o(.constdata__ZTV17LongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV25UnsignedLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV21LongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV29UnsignedLongLongsEqualFailure)
<LI> testfailure.o(.constdata__ZTV23SignedBytesEqualFailure)
<LI> testfailure.o(.constdata__ZTV18StringEqualFailure)
<LI> testfailure.o(.constdata__ZTV24StringEqualNoCaseFailure)
<LI> testfailure.o(.constdata__ZTV18BinaryEqualFailure)
<LI> testfailure.o(.constdata__ZTV16BitsEqualFailure)
</UL>
<P><STRONG><a name="[2f8]"></a>SimpleString::startsWith(const SimpleString&) const</STRONG> (Thumb, 72 bytes, Stack size 20 bytes, simplestring.o(i._ZNK12SimpleString10startsWithERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SimpleString::startsWith(const SimpleString&) const &rArr; SimpleString::StrStr(const char*, const char*) &rArr; SimpleString::StrNCmp(const char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrStr(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>

<P><STRONG><a name="[2c5]"></a>SimpleString::asCharString() const</STRONG> (Thumb, 12 bytes, Stack size 4 bytes, simplestring.o(i._ZNK12SimpleString12asCharStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const SimpleString&, const char*, unsigned)
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::print(const char*, const char*, unsigned)
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printVisualStudioErrorInFileOnLine(SimpleString, unsigned)
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printEclipseErrorInFileOnLine(SimpleString, unsigned)
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printDouble(double)
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestSuiteSummary()
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::openFileForWrite(const SimpleString&)
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestCases()
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::encodeXmlText(const SimpleString&)
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeFailure(JUnitTestCaseResultNode*)
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeToFile(const SimpleString&)
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::fail(char*)
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::postTestAction(UtestShell&, TestResult&)
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::ContainsFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[2f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createButWasString(const SimpleString&, const SimpleString&)
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::print(long)
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::print(unsigned)
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupStarted(const UtestShell&)
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentTestEnded(const TestResult&)
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printFailure(const TestFailure&)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::printable() const
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestLocations(TestResult&)
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailureMessage(SimpleString)
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::printFailureInTest(SimpleString)
</UL>

<P><STRONG><a name="[2ed]"></a>SimpleString::equalsNoCase(const SimpleString&) const</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, simplestring.o(i._ZNK12SimpleString12equalsNoCaseERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SimpleString::equalsNoCase(const SimpleString&) const &rArr; SimpleString::lowerCase() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::lowerCase() const
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseEqual(const char*, const char*, const char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[2ef]"></a>SimpleString::containsNoCase(const SimpleString&) const</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, simplestring.o(i._ZNK12SimpleString14containsNoCaseERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 240<LI>Call Chain = SimpleString::containsNoCase(const SimpleString&) const &rArr; SimpleString::lowerCase() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::lowerCase() const
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrNoCaseContains(const char*, const char*, const char*, const char*, unsigned)
</UL>

<P><STRONG><a name="[30c]"></a>SimpleString::getEmptyString() const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, simplestring.o(i._ZNK12SimpleString14getEmptyStringEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = SimpleString::getEmptyString() const &rArr; SimpleString::allocStringBuffer(unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::allocStringBuffer(unsigned, const char*, unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[30b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::setInternalBufferAsEmptyString()
</UL>

<P><STRONG><a name="[3d4]"></a>SimpleString::getPrintableSize() const</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, simplestring.o(i._ZNK12SimpleString16getPrintableSizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SimpleString::getPrintableSize() const &rArr; SimpleString::size() const
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isControl(char)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isControlWithShortEscapeSequence(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::printable() const
</UL>

<P><STRONG><a name="[37d]"></a>SimpleString::subStringFromTill(char, char) const</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, simplestring.o(i._ZNK12SimpleString17subStringFromTillEcc))
<BR><BR>[Stack]<UL><LI>Max Depth = 256<LI>Call Chain = SimpleString::subStringFromTill(char, char) const &rArr; SimpleString::subString(unsigned) const &rArr; SimpleString::subString(unsigned, unsigned) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned) const
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::findFrom(unsigned, char) const
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::find(char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)
</UL>

<P><STRONG><a name="[338]"></a>SimpleString::at(unsigned) const</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, simplestring.o(i._ZNK12SimpleString2atEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SimpleString::at(unsigned) const
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
</UL>
<BR>[Called By]<UL><LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)
<LI><a href="#[2ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::StringEqualNoCaseFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::StringEqualFailure(UtestShell*, const char*, unsigned, const char*, const char*, const SimpleString&)
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::CheckEqualFailure(UtestShell*, const char*, unsigned, const SimpleString&, const SimpleString&, const SimpleString&)
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::findFrom(unsigned, char) const
</UL>

<P><STRONG><a name="[3d7]"></a>SimpleString::find(char) const</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, simplestring.o(i._ZNK12SimpleString4findEc))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SimpleString::find(char) const &rArr; SimpleString::findFrom(unsigned, char) const &rArr; SimpleString::size() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::findFrom(unsigned, char) const
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subStringFromTill(char, char) const
</UL>

<P><STRONG><a name="[28c]"></a>SimpleString::size() const</STRONG> (Thumb, 18 bytes, Stack size 12 bytes, simplestring.o(i._ZNK12SimpleString4sizeEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SimpleString::size() const
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
<LI><a href="#[308]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrLen(const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[2f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isEmpty() const
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(char, char)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::startsWith(const SimpleString&) const
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
<LI><a href="#[368]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::getParameterField(int, const char*const *, int&, const SimpleString&)
<LI><a href="#[36d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setRepeatCount(int, const char*const *, int&)
<LI><a href="#[36c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setPackageName(int, const char*const *, int&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setOutputType(int, const char*const *, int&)
<LI><a href="#[366]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setShuffle(int, const char*const *, int&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::printable() const
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::lowerCase() const
<LI><a href="#[3d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::findFrom(unsigned, char) const
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::endsWith(const SimpleString&) const
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getPrintableSize() const
<LI><a href="#[30a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::copyBufferToNewInternalBuffer(const SimpleString&)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[315]"></a>SimpleString::count(const SimpleString&) const</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, simplestring.o(i._ZNK12SimpleString5countERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SimpleString::count(const SimpleString&) const &rArr; SimpleString::StrStr(const char*, const char*) &rArr; SimpleString::StrNCmp(const char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrStr(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
</UL>

<P><STRONG><a name="[376]"></a>SimpleString::split(const SimpleString&, SimpleStringCollection&) const</STRONG> (Thumb, 180 bytes, Stack size 72 bytes, simplestring.o(i._ZNK12SimpleString5splitERKS_R22SimpleStringCollection))
<BR><BR>[Stack]<UL><LI>Max Depth = 368 + Unknown Stack Size
<LI>Call Chain = SimpleString::split(const SimpleString&, SimpleStringCollection&) const &rArr; SimpleStringCollection::allocate(unsigned) &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[379]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::operator [](unsigned)
<LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator =(const SimpleString&)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::endsWith(const SimpleString&) const
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::count(const SimpleString&) const
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::allocate(unsigned)
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrStr(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
</UL>

<P><STRONG><a name="[2f7]"></a>SimpleString::isEmpty() const</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, simplestring.o(i._ZNK12SimpleString7isEmptyEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SimpleString::isEmpty() const &rArr; SimpleString::size() const
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
</UL>
<BR>[Called By]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::writeTestCases()
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::createFileName(const SimpleString&)
<LI><a href="#[2f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createUserText(const SimpleString&)
</UL>

<P><STRONG><a name="[2e8]"></a>SimpleString::contains(const SimpleString&) const</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, simplestring.o(i._ZNK12SimpleString8containsERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = SimpleString::contains(const SimpleString&) const &rArr; SimpleString::StrStr(const char*, const char*) &rArr; SimpleString::StrNCmp(const char*, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
<LI><a href="#[311]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrStr(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::assertCstrContains(const char*, const char*, const char*, const char*, unsigned)
<LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::containsNoCase(const SimpleString&) const
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::match(const SimpleString&) const
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[324]"></a>SimpleString::endsWith(const SimpleString&) const</STRONG> (Thumb, 82 bytes, Stack size 28 bytes, simplestring.o(i._ZNK12SimpleString8endsWithERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = SimpleString::endsWith(const SimpleString&) const &rArr; SimpleString::size() const
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrCmp(const char*, const char*)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
</UL>
<BR>[Called By]<UL><LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[3d8]"></a>SimpleString::findFrom(unsigned, char) const</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, simplestring.o(i._ZNK12SimpleString8findFromEjc))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SimpleString::findFrom(unsigned, char) const &rArr; SimpleString::size() const
</UL>
<BR>[Calls]<UL><LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::at(unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subStringFromTill(char, char) const
<LI><a href="#[3d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::find(char) const
</UL>

<P><STRONG><a name="[316]"></a>SimpleString::getBuffer() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, simplestring.o(i._ZNK12SimpleString9getBufferEv))
<BR><BR>[Called By]<UL><LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +(const SimpleString&) const
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
<LI><a href="#[317]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(char, char)
<LI><a href="#[314]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::replace(const char*, const char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[338]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::at(unsigned) const
<LI><a href="#[2f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::startsWith(const SimpleString&) const
<LI><a href="#[2e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::contains(const SimpleString&) const
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const SimpleString&)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[3d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::lowerCase() const
<LI><a href="#[324]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::endsWith(const SimpleString&) const
<LI><a href="#[315]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::count(const SimpleString&) const
</UL>

<P><STRONG><a name="[3d3]"></a>SimpleString::lowerCase() const</STRONG> (Thumb, 58 bytes, Stack size 24 bytes, simplestring.o(i._ZNK12SimpleString9lowerCaseEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SimpleString::lowerCase() const &rArr; SimpleString::SimpleString(const SimpleString&) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
<LI><a href="#[312]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::ToLower(char)
</UL>
<BR>[Called By]<UL><LI><a href="#[2ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::containsNoCase(const SimpleString&) const
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::equalsNoCase(const SimpleString&) const
</UL>

<P><STRONG><a name="[2b3]"></a>SimpleString::printable() const</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, simplestring.o(i._ZNK12SimpleString9printableEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 416<LI>Call Chain = SimpleString::printable() const &rArr; StringFromFormat(const char*, ...) &rArr; VStringFromFormat(const char*, std::__va_list) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromFormat(const char*, ...)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[3d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getPrintableSize() const
<LI><a href="#[3d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isControl(char)
<LI><a href="#[301]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrNCpy(char*, const char*, unsigned)
<LI><a href="#[3d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::isControlWithShortEscapeSequence(char)
<LI><a href="#[306]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::setInternalBufferToNewBuffer(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PrintableStringFromOrNull(const char*)
</UL>

<P><STRONG><a name="[28d]"></a>SimpleString::subString(unsigned) const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, simplestring.o(i._ZNK12SimpleString9subStringEj))
<BR><BR>[Stack]<UL><LI>Max Depth = 224<LI>Call Chain = SimpleString::subString(unsigned) const &rArr; SimpleString::subString(unsigned, unsigned) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned, unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subStringFromTill(char, char) const
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HexStringFrom(signed char)
</UL>

<P><STRONG><a name="[29f]"></a>SimpleString::subString(unsigned, unsigned) const</STRONG> (Thumb, 90 bytes, Stack size 32 bytes, simplestring.o(i._ZNK12SimpleString9subStringEjj))
<BR><BR>[Stack]<UL><LI>Max Depth = 208<LI>Call Chain = SimpleString::subString(unsigned, unsigned) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const SimpleString&)
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::size() const
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subString(unsigned) const
<LI><a href="#[376]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::split(const SimpleString&, SimpleStringCollection&) const
<LI><a href="#[37d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::subStringFromTill(char, char) const
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFromBinary(const unsigned char*, unsigned)
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupAndCaseNames(TestResult&)
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::listTestGroupNames(TestResult&)
</UL>

<P><STRONG><a name="[27e]"></a>SimpleString::operator +(const SimpleString&) const</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, simplestring.o(i._ZNK12SimpleStringplERKS_))
<BR><BR>[Stack]<UL><LI>Max Depth = 200<LI>Call Chain = SimpleString::operator +(const SimpleString&) const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::operator +=(const char*)
<LI><a href="#[316]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::getBuffer() const
</UL>
<BR>[Called By]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::createFileName(const SimpleString&)
<LI><a href="#[2f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::UnsignedLongLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long long, unsigned long long, const SimpleString&)
<LI><a href="#[2f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::UnsignedLongsEqualFailure(UtestShell*, const char*, unsigned, unsigned long, unsigned long, const SimpleString&)
<LI><a href="#[2ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::SignedBytesEqualFailure(UtestShell*, const char*, unsigned, signed char, signed char, const SimpleString&)
<LI><a href="#[2eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::LongLongsEqualFailure(UtestShell*, const char*, unsigned, long long, long long, const SimpleString&)
<LI><a href="#[2e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::LongsEqualFailure(UtestShell*, const char*, unsigned, long, long, const SimpleString&)
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(const void*)
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringFrom(void(*)())
<LI><a href="#[2fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::createDifferenceAtPosString(const SimpleString&, unsigned, unsigned)
<LI><a href="#[305]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::padStringsToSameLength(SimpleString&, SimpleString&, char)
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BracketsFormattedHexString(SimpleString)
</UL>

<P><STRONG><a name="[188]"></a>TestMemoryAllocator::alloc_name() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testmemoryallocator.o(i._ZNK19TestMemoryAllocator10alloc_nameEv))
<BR>[Address Reference Count : 2]<UL><LI> testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[187]"></a>TestMemoryAllocator::name() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testmemoryallocator.o(i._ZNK19TestMemoryAllocator4nameEv))
<BR>[Address Reference Count : 2]<UL><LI> testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[189]"></a>TestMemoryAllocator::free_name() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, testmemoryallocator.o(i._ZNK19TestMemoryAllocator9free_nameEv))
<BR>[Address Reference Count : 2]<UL><LI> testmemoryallocator.o(.constdata__ZTV19TestMemoryAllocator)
<LI> testmemoryallocator.o(.constdata__ZTV20NullUnknownAllocator)
</UL>
<P><STRONG><a name="[392]"></a>CommandLineArguments::isReversing() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments11isReversingEv))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
</UL>

<P><STRONG><a name="[393]"></a>CommandLineArguments::isShuffling() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments11isShufflingEv))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
</UL>

<P><STRONG><a name="[3a2]"></a>CommandLineArguments::isRunIgnored() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments12isRunIgnoredEv))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[399]"></a>CommandLineArguments::isJUnitOutput() const</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments13isJUnitOutputEv))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[39f]"></a>CommandLineArguments::isVeryVerbose() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments13isVeryVerboseEv))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[39e]"></a>CommandLineArguments::getNameFilters() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments14getNameFiltersEv))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[39a]"></a>CommandLineArguments::getPackageName() const</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments14getPackageNameEv))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[38d]"></a>CommandLineArguments::getRepeatCount() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments14getRepeatCountEv))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
</UL>

<P><STRONG><a name="[394]"></a>CommandLineArguments::getShuffleSeed() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments14getShuffleSeedEv))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
</UL>

<P><STRONG><a name="[39d]"></a>CommandLineArguments::getGroupFilters() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments15getGroupFiltersEv))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[3a4]"></a>CommandLineArguments::isCrashingOnFail() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments16isCrashingOnFailEv))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[39c]"></a>CommandLineArguments::isTeamCityOutput() const</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments16isTeamCityOutputEv))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[391]"></a>CommandLineArguments::isListingTestLocations() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments22isListingTestLocationsEv))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
</UL>

<P><STRONG><a name="[38e]"></a>CommandLineArguments::isListingTestGroupNames() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments23isListingTestGroupNamesEv))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
</UL>

<P><STRONG><a name="[3a1]"></a>CommandLineArguments::runTestsInSeperateProcess() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments25runTestsInSeperateProcessEv))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[390]"></a>CommandLineArguments::isListingTestGroupAndCaseNames() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments30isListingTestGroupAndCaseNamesEv))
<BR><BR>[Called By]<UL><LI><a href="#[38b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::runAllTests()
</UL>

<P><STRONG><a name="[397]"></a>CommandLineArguments::help() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments4helpEv))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[398]"></a>CommandLineArguments::usage() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments5usageEv))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[3a0]"></a>CommandLineArguments::isColor() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments7isColorEv))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
</UL>

<P><STRONG><a name="[396]"></a>CommandLineArguments::needHelp() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments8needHelpEv))
<BR><BR>[Called By]<UL><LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[39b]"></a>CommandLineArguments::isVerbose() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, commandlinearguments.o(i._ZNK20CommandLineArguments9isVerboseEv))
<BR><BR>[Called By]<UL><LI><a href="#[38c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::initializeTestRun()
<LI><a href="#[395]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::parseArguments(TestPlugin*)
</UL>

<P><STRONG><a name="[190]"></a>NormalTestTerminator::exitCurrentTest() const</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, utest.o(i._ZNK20NormalTestTerminator15exitCurrentTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NormalTestTerminator::exitCurrentTest() const &rArr; TestTerminatorWithoutExceptions::TestTerminatorWithoutExceptions()
</UL>
<BR>[Calls]<UL><LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions()
<LI><a href="#[3c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::TestTerminatorWithoutExceptions()
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::exitCurrentTest() const
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashingTestTerminator::exitCurrentTest() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV20NormalTestTerminator)
</UL>
<P><STRONG><a name="[19d]"></a>CrashingTestTerminator::exitCurrentTest() const</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, utest.o(i._ZNK22CrashingTestTerminator15exitCurrentTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = CrashingTestTerminator::exitCurrentTest() const &rArr; NormalTestTerminator::exitCurrentTest() const &rArr; TestTerminatorWithoutExceptions::TestTerminatorWithoutExceptions()
</UL>
<BR>[Calls]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::exitCurrentTest() const
<LI><a href="#[3d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::crash()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV22CrashingTestTerminator)
</UL>
<P><STRONG><a name="[377]"></a>SimpleStringCollection::size() const</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, simplestring.o(i._ZNK22SimpleStringCollection4sizeEv))
<BR><BR>[Called By]<UL><LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
</UL>

<P><STRONG><a name="[31e]"></a>UtestShellPointerArray::getFirstTest() const</STRONG> (Thumb, 14 bytes, Stack size 4 bytes, utest.o(i._ZNK22UtestShellPointerArray12getFirstTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = UtestShellPointerArray::getFirstTest() const
</UL>
<BR>[Calls]<UL><LI><a href="#[3da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::get(unsigned) const
</UL>
<BR>[Called By]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::shuffleTests(unsigned)
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::reverseTests()
</UL>

<P><STRONG><a name="[3da]"></a>UtestShellPointerArray::get(unsigned) const</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, utest.o(i._ZNK22UtestShellPointerArray3getEj))
<BR><BR>[Called By]<UL><LI><a href="#[31e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::getFirstTest() const
</UL>

<P><STRONG><a name="[1b1]"></a>TestTerminatorWithoutExceptions::exitCurrentTest() const</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, utest.o(i._ZNK31TestTerminatorWithoutExceptions15exitCurrentTestEv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TestTerminatorWithoutExceptions::exitCurrentTest() const
</UL>
<BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::exitCurrentTest() const
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.constdata__ZTV31TestTerminatorWithoutExceptions)
</UL>
<P><STRONG><a name="[3b3]"></a>operator delete[] (void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZdaPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = operator delete[] (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[31f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::~UtestShellPointerArray()
<LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>

<P><STRONG><a name="[2d2]"></a>operator delete (void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._ZdlPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = operator delete (void*)
</UL>
<BR>[Called By]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::~CommandLineTestRunner__deallocating()
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FirstTestGroup_FirstTest_TestShell::~TEST_FirstTestGroup_FirstTest_TestShell__deallocating()
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_GROUP_CppUTestGroupFirstTestGroup::~TEST_GROUP_CppUTestGroupFirstTestGroup__deallocating()
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FirstTestGroup_FirstTest_Test::~TEST_FirstTestGroup_FirstTest_Test__deallocating()
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::~MemoryLeakDetector()
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::~MemoryLeakDetector__deallocating()
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput()
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::~JUnitTestOutput__deallocating()
<LI><a href="#[32c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::resetTestGroupResult()
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningReporter::~MemoryLeakWarningReporter__deallocating()
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::~MemoryLeakWarningPlugin__deallocating()
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakFailure::~MemoryLeakFailure__deallocating()
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments()
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::~CommandLineArguments__deallocating()
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Utest::~Utest__deallocating()
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminatorWithoutExceptions::~TestTerminatorWithoutExceptions__deallocating()
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::~OutsideTestRunnerUTest__deallocating()
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CrashingTestTerminator::~CrashingTestTerminator__deallocating()
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::~NormalTestTerminator__deallocating()
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestTerminator::~TestTerminator__deallocating()
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInstaller::~TestInstaller__deallocating()
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::~UtestShell__deallocating()
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::~NullUnknownAllocator__deallocating()
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::~TestMemoryAllocator__deallocating()
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongLongsEqualFailure::~UnsignedLongLongsEqualFailure__deallocating()
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UnsignedLongsEqualFailure::~UnsignedLongsEqualFailure__deallocating()
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualNoCaseFailure::~StringEqualNoCaseFailure__deallocating()
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SignedBytesEqualFailure::~SignedBytesEqualFailure__deallocating()
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongLongsEqualFailure::~LongLongsEqualFailure__deallocating()
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DoublesEqualFailure::~DoublesEqualFailure__deallocating()
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;StringEqualFailure::~StringEqualFailure__deallocating()
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinaryEqualFailure::~BinaryEqualFailure__deallocating()
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LongsEqualFailure::~LongsEqualFailure__deallocating()
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ComparisonFailure::~ComparisonFailure__deallocating()
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckEqualFailure::~CheckEqualFailure__deallocating()
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BitsEqualFailure::~BitsEqualFailure__deallocating()
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ContainsFailure::~ContainsFailure__deallocating()
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EqualsFailure::~EqualsFailure__deallocating()
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckFailure::~CheckFailure__deallocating()
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure__deallocating()
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FailFailure::~FailFailure__deallocating()
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::~TeamCityTestOutput__deallocating()
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestResult::~TestResult__deallocating()
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::~TestRegistry__deallocating()
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetPointerPlugin::~SetPointerPlugin__deallocating()
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::~NullTestPlugin__deallocating()
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::~TestPlugin__deallocating()
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CompositeTestOutput::~CompositeTestOutput__deallocating()
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ConsoleTestOutput::~ConsoleTestOutput__deallocating()
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestOutput::~TestOutput__deallocating()
</UL>

<P><STRONG><a name="[2d4]"></a>operator ==(const SimpleString&, const SimpleString&)</STRONG> (Thumb, 38 bytes, Stack size 20 bytes, simplestring.o(i._ZeqRK12SimpleStringS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = operator ==(const SimpleString&, const SimpleString&) &rArr; SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::asCharString() const
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::StrCmp(const char*, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[37e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::parse(TestPlugin*)
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::removePluginByName(const SimpleString&)
<LI><a href="#[36a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::setOutputType(int, const char*const *, int&)
<LI><a href="#[2ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::equalsNoCase(const SimpleString&) const
<LI><a href="#[3d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFilter::match(const SimpleString&) const
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TeamCityTestOutput::printCurrentGroupEnded(const TestResult&)
<LI><a href="#[31a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator !=(const SimpleString&, const SimpleString&)
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::removePluginByName(const SimpleString&)
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithGroup(const SimpleString&)
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::findTestWithName(const SimpleString&)
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestPlugin::getPluginByName(const SimpleString&)
</UL>

<P><STRONG><a name="[38a]"></a>operator &lang;&lang;(TestOutput&, const char*)</STRONG> (Thumb, 20 bytes, Stack size 16 bytes, testoutput.o(i._ZlsR10TestOutputPKc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator &lang;&lang;(TestOutput&, const char*)
</UL>
<BR>[Called By]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
</UL>

<P><STRONG><a name="[3af]"></a>operator new[] (unsigned, const char*, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._ZnajPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator new[] (unsigned, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[31c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShellPointerArray::UtestShellPointerArray(UtestShell*)
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::allocate(unsigned)
</UL>

<P><STRONG><a name="[31a]"></a>operator !=(const SimpleString&, const SimpleString&)</STRONG> (Thumb, 20 bytes, Stack size 12 bytes, simplestring.o(i._ZneRK12SimpleStringS1_))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = operator !=(const SimpleString&, const SimpleString&) &rArr; operator ==(const SimpleString&, const SimpleString&) &rArr; SimpleString::asCharString() const
</UL>
<BR>[Calls]<UL><LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator ==(const SimpleString&, const SimpleString&)
</UL>
<BR>[Called By]<UL><LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::isOutsideTestFile() const
<LI><a href="#[318]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::endOfGroup(UtestShell*)
</UL>

<P><STRONG><a name="[3bb]"></a>operator new(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._Znwj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = operator new(unsigned)
</UL>
<BR>[Called By]<UL><LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>

<P><STRONG><a name="[2db]"></a>operator new(unsigned, const char*, int)</STRONG> (Thumb, 22 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._ZnwjPKci))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = operator new(unsigned, const char*, int)
</UL>
<BR>[Called By]<UL><LI><a href="#[32f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::JUnitTestOutput()
<LI><a href="#[388]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::CommandLineTestRunner(int, const char*const *, TestRegistry*)
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createCompositeOutput(TestOutput*, TestOutput*)
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createTeamCityOutput()
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createConsoleOutput()
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::createJUnitOutput(const SimpleString&)
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEST_FirstTestGroup_FirstTest_TestShell::createTest()
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printCurrentTestStarted(const UtestShell&)
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;JUnitTestOutput::printFailure(const TestFailure&)
<LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)
<LI><a href="#[37c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addTestToRunBasedOnVerboseOutput(int, const char*const *, int&, const char*)
<LI><a href="#[37b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[37a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[374]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&)
<LI><a href="#[373]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeGroupFilter(int, const char*const *, int&)
<LI><a href="#[372]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictGroupFilter(int, const char*const *, int&)
<LI><a href="#[370]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addExcludeNameFilter(int, const char*const *, int&)
<LI><a href="#[36e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addStrictNameFilter(int, const char*const *, int&)
<LI><a href="#[36b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addGroupFilter(int, const char*const *, int&)
<LI><a href="#[367]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineArguments::addNameFilter(int, const char*const *, int&)
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::createTest()
</UL>

<P><STRONG><a name="[258]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
<LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[3db]"></a>__ARM_vec_cleanup_rethrow</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, ARM_vec_cleanup_rethrow.o(i.__ARM_vec_cleanup_rethrow))
<BR><BR>[Stack]<UL><LI>Max Depth = 200 + Unknown Stack Size
<LI>Call Chain = __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;std::terminate()
</UL>
<BR>[Called By]<UL><LI><a href="#[3b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_vec_ctor
<LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>

<P><STRONG><a name="[35e]"></a>__aeabi_vec_ctor_nocookie_nodtor</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, aeabi_vec_ctor_nocookie_nodtor.o(i.__aeabi_vec_ctor_nocookie_nodtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_vec_ctor_nocookie_nodtor
</UL>
<BR>[Called By]<UL><LI><a href="#[35c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::MemoryLeakDetector(MemoryLeakFailure*)
</UL>

<P><STRONG><a name="[3ae]"></a>__aeabi_vec_delete</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, aeabi_vec_delete.o(i.__aeabi_vec_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 256 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;operator delete[] (void*)
<LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_rethrow
<LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>
<BR>[Called By]<UL><LI><a href="#[378]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::~SimpleStringCollection()
<LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::allocate(unsigned)
</UL>

<P><STRONG><a name="[3dd]"></a>__aeabi_vec_dtor</STRONG> (Thumb, 58 bytes, Stack size 40 bytes, aeabi_vec_dtor.o(i.__aeabi_vec_dtor))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup_rethrow
</UL>
<BR>[Called By]<UL><LI><a href="#[3dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor_cookie
</UL>

<P><STRONG><a name="[3dc]"></a>__aeabi_vec_dtor_cookie</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, aeabi_vec_dtor_cookie.o(i.__aeabi_vec_dtor_cookie))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[3dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_dtor
</UL>
<BR>[Called By]<UL><LI><a href="#[3ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_vec_delete
</UL>

<P><STRONG><a name="[2a5]"></a>__cxa_guard_acquire</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, cxa_guard_acquire.o(i.__cxa_guard_acquire))
<BR><BR>[Called By]<UL><LI><a href="#[322]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestRegistry::getCurrentRegistry()
<LI><a href="#[383]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullUnknownAllocator::defaultAllocator()
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OutsideTestRunnerUTest::instance()
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultMallocAllocator()
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewAllocator()
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;defaultNewArrayAllocator()
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NullTestPlugin::instance()
</UL>

<P><STRONG><a name="[b2]"></a>__cxa_pure_virtual</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, pure_virt.o(i.__cxa_pure_virtual))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __cxa_pure_virtual &rArr; __rt_SIGPVFN &rArr; __rt_SIGPVFN_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGPVFN
</UL>
<BR>[Address Reference Count : 3]<UL><LI> memoryleakwarningplugin.o(.constdata__ZTV17MemoryLeakFailure)
<LI> utest.o(.constdata__ZTV14TestTerminator)
<LI> testoutput.o(.constdata__ZTV10TestOutput)
</UL>
<P><STRONG><a name="[3b0]"></a>__cxa_vec_ctor</STRONG> (Thumb, 62 bytes, Stack size 48 bytes, cxa_vec_ctor.o(i.__cxa_vec_ctor))
<BR><BR>[Stack]<UL><LI>Max Depth = 248 + Unknown Stack Size
<LI>Call Chain = __cxa_vec_ctor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_begin_catch
<LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__cxa_end_catch
<LI><a href="#[3db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_vec_cleanup_rethrow
</UL>
<BR>[Called By]<UL><LI><a href="#[3ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleStringCollection::allocate(unsigned)
</UL>

<P><STRONG><a name="[21c]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[33]"></a>fabs</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, fabs.o(i.fabs))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[87]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[3df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[209]"></a>main</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, alltests.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 1048 + Unknown Stack Size
<LI>Call Chain = main &rArr; CommandLineTestRunner::RunAllTests(int, const char*const *) &rArr; CommandLineTestRunner::runAllTestsMain() &rArr; CommandLineTestRunner::parseArguments(TestPlugin*) &rArr; CommandLineArguments::parse(TestPlugin*) &rArr; CommandLineArguments::addGroupDotNameFilter(int, const char*const *, int&) &rArr; SimpleString::split(const SimpleString&, SimpleStringCollection&) const &rArr; SimpleStringCollection::allocate(unsigned) &rArr; __aeabi_vec_delete &rArr; __aeabi_vec_dtor_cookie &rArr; __aeabi_vec_dtor &rArr; __ARM_vec_cleanup_rethrow &rArr; __cxa_rethrow &rArr; __cxa_call_terminate &rArr; __cxa_begin_catch &rArr; __ARM::get_foreign_intermediary(__cxa_exception*, _Unwind_Control_Block*) &rArr; __cxa_allocate_exception &rArr; __ARM::call_terminate_handler(_Unwind_Control_Block*) &rArr; std::terminate() &rArr; __cxa_get_globals &rArr; __ARM_exceptions_buffer_init &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[385]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CommandLineTestRunner::RunAllTests(int, const char*const *)
</UL>
<BR>[Called By]<UL><LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[2c]"></a>putchar</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utestplatform.o(i.putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = putchar &rArr; putc &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;putc
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[1f8]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_numeric
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[1fa]"></a>_get_lc_time</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_time_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_time
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_time_2
</UL>

<P><STRONG><a name="[89]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _get_lc_ctype
</UL>
<BR>[Calls]<UL><LI><a href="#[3e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[49a]"></a>__aeabi_dadd</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)

<P><STRONG><a name="[3e1]"></a>_dadd</STRONG> (Thumb, 332 bytes, Stack size 16 bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub1
<LI><a href="#[3e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[3e6]"></a>__fpl_dcmp_Inf</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, dcmpi.o(x$fpl$dcmpinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
</UL>

<P><STRONG><a name="[297]"></a>__aeabi_cdcmple</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_cdcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubles_equal(double, double, double)
</UL>

<P><STRONG><a name="[3e5]"></a>_dcmple</STRONG> (Thumb, 120 bytes, Stack size 32 bytes, dleqf.o(x$fpl$dleqf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
<LI><a href="#[3e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dcmp_Inf
</UL>

<P><STRONG><a name="[49b]"></a>__fpl_dcmple_InfNaN</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, dleqf.o(x$fpl$dleqf), UNUSED)

<P><STRONG><a name="[3e4]"></a>__fpl_dnaninf</STRONG> (Thumb, 156 bytes, Stack size 16 bytes, dnaninf.o(x$fpl$dnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dcmple
<LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
<LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[3e3]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[296]"></a>__aeabi_dsub</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __aeabi_dsub
</UL>
<BR>[Called By]<UL><LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;doubles_equal(double, double, double)
</UL>

<P><STRONG><a name="[3e7]"></a>_dsub</STRONG> (Thumb, 464 bytes, Stack size 32 bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[3e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd1
<LI><a href="#[3e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dnaninf
</UL>

<P><STRONG><a name="[1d3]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_g
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_e
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>

<P><STRONG><a name="[1d7]"></a>_printf_fp_hex</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf2.o(x$fpl$printf2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = _printf_fp_hex &rArr; _printf_fp_hex_real &rArr; _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_hex_real
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_a
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1c7]"></a>__sti___8_test_cpp_fe8858fa</STRONG> (Thumb, 60 bytes, Stack size 24 bytes, test.o(i.__sti___8_test_cpp_fe8858fa))
<BR><BR>[Stack]<UL><LI>Max Depth = 288<LI>Call Chain = __sti___8_test_cpp_fe8858fa &rArr; TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, unsigned) &rArr; TestRegistry::getCurrentRegistry() &rArr; TestRegistry::TestRegistry() &rArr; NullTestPlugin::instance() &rArr; NullTestPlugin::NullTestPlugin() &rArr; TestPlugin::TestPlugin(TestPlugin*) &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[325]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestInstaller::TestInstaller(UtestShell&, const char*, const char*, const char*, unsigned)
<LI><a href="#[3de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::UtestShell()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> test.o(.init_array)
</UL>
<P><STRONG><a name="[a0]"></a>normal_free(void*, const char*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._Z11normal_freePvPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = normal_free(void*, const char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[15]"></a>mem_leak_free(void*, const char*, unsigned)</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, memoryleakwarningplugin.o(i._Z13mem_leak_freePvPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 304<LI>Call Chain = mem_leak_free(void*, const char*, unsigned) &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, unsigned, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::invalidateMemory(char*)
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, unsigned, bool)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMallocAllocator()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.data)
</UL>
<P><STRONG><a name="[9e]"></a>normal_malloc(unsigned, const char*, unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._Z13normal_mallocjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = normal_malloc(unsigned, const char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[9f]"></a>normal_realloc(void*, unsigned, const char*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(i._Z14normal_reallocPvjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = normal_realloc(void*, unsigned, const char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[14]"></a>mem_leak_malloc(unsigned, const char*, unsigned)</STRONG> (Thumb, 44 bytes, Stack size 32 bytes, memoryleakwarningplugin.o(i._Z15mem_leak_mallocjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = mem_leak_malloc(unsigned, const char*, unsigned) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned) &rArr; MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMallocAllocator()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.data)
</UL>
<P><STRONG><a name="[16]"></a>mem_leak_realloc(void*, unsigned, const char*, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, memoryleakwarningplugin.o(i._Z16mem_leak_reallocPvjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = mem_leak_realloc(void*, unsigned, const char*, unsigned) &rArr; MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::reallocMemory(TestMemoryAllocator*, char*, unsigned, const char*, unsigned, bool)
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentMallocAllocator()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.data)
</UL>
<P><STRONG><a name="[96]"></a>normal_operator_new(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._Z19normal_operator_newj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = normal_operator_new(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[17]"></a>mem_leak_operator_new(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(i._Z21mem_leak_operator_newj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mem_leak_operator_new(unsigned) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned) &rArr; MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Address Reference Count : 2]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv)
<LI> memoryleakwarningplugin.o(.data)
</UL>
<P><STRONG><a name="[9c]"></a>normal_operator_delete(void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._Z22normal_operator_deletePv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = normal_operator_delete(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[1d]"></a>mem_leak_operator_delete(void*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._Z24mem_leak_operator_deletePv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mem_leak_operator_delete(void*) &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool) &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, unsigned, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::invalidateMemory(char*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.data)
</UL>
<P><STRONG><a name="[99]"></a>normal_operator_new_array(unsigned)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._Z25normal_operator_new_arrayj))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = normal_operator_new_array(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[98]"></a>normal_operator_new_debug(unsigned, const char*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(i._Z25normal_operator_new_debugjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = normal_operator_new_debug(unsigned, const char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[1a]"></a>mem_leak_operator_new_array(unsigned)</STRONG> (Thumb, 36 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(i._Z27mem_leak_operator_new_arrayj))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = mem_leak_operator_new_array(unsigned) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned) &rArr; MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.data)
</UL>
<P><STRONG><a name="[19]"></a>mem_leak_operator_new_debug(unsigned, const char*, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, memoryleakwarningplugin.o(i._Z27mem_leak_operator_new_debugjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mem_leak_operator_new_debug(unsigned, const char*, unsigned) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned) &rArr; MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.data)
</UL>
<P><STRONG><a name="[97]"></a>normal_operator_new_nothrow(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._Z27normal_operator_new_nothrowj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = normal_operator_new_nothrow(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[9d]"></a>normal_operator_delete_array(void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._Z28normal_operator_delete_arrayPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = normal_operator_delete_array(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[18]"></a>mem_leak_operator_new_nothrow(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._Z29mem_leak_operator_new_nothrowj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mem_leak_operator_new_nothrow(unsigned) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned) &rArr; MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.data)
</UL>
<P><STRONG><a name="[1e]"></a>mem_leak_operator_delete_array(void*)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._Z30mem_leak_operator_delete_arrayPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = mem_leak_operator_delete_array(void*) &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool) &rArr; MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, const char*, unsigned, bool) &rArr; MemoryLeakDetector::checkForCorruption(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, bool) &rArr; MemoryLeakOutputStringBuffer::reportAllocationDeallocationMismatchFailure(MemoryLeakDetectorNode*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::reportFailure(const char*, const char*, unsigned, unsigned, TestMemoryAllocator*, const char*, unsigned, TestMemoryAllocator*, MemoryLeakFailure*) &rArr; MemoryLeakOutputStringBuffer::addAllocationLocation(const char*, unsigned, unsigned, TestMemoryAllocator*) &rArr; SimpleStringBuffer::add(const char*, ...)
</UL>
<BR>[Calls]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::invalidateMemory(char*)
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::deallocMemory(TestMemoryAllocator*, void*, bool)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.data)
</UL>
<P><STRONG><a name="[9b]"></a>normal_operator_new_array_debug(unsigned, const char*, unsigned)</STRONG> (Thumb, 26 bytes, Stack size 24 bytes, memoryleakwarningplugin.o(i._Z31normal_operator_new_array_debugjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = normal_operator_new_array_debug(unsigned, const char*, unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[95]"></a>threadsafe_mem_leak_operator_new(unsigned)</STRONG> (Thumb, 50 bytes, Stack size 32 bytes, memoryleakwarningplugin.o(i._Z32threadsafe_mem_leak_operator_newj))
<BR><BR>[Stack]<UL><LI>Max Depth = 184<LI>Call Chain = threadsafe_mem_leak_operator_new(unsigned) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned) &rArr; MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewAllocator()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::~MemLeakScopedMutex()
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemLeakScopedMutex::MemLeakScopedMutex()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin22areNewDeleteOverloadedEv)
</UL>
<P><STRONG><a name="[1c]"></a>mem_leak_operator_new_array_debug(unsigned, const char*, unsigned)</STRONG> (Thumb, 48 bytes, Stack size 40 bytes, memoryleakwarningplugin.o(i._Z33mem_leak_operator_new_array_debugjPKcj))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = mem_leak_operator_new_array_debug(unsigned, const char*, unsigned) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned) &rArr; MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.data)
</UL>
<P><STRONG><a name="[9a]"></a>normal_operator_new_array_nothrow(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, memoryleakwarningplugin.o(i._Z33normal_operator_new_array_nothrowj))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = normal_operator_new_array_nothrow(unsigned)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(i._ZN23MemoryLeakWarningPlugin25turnOffNewDeleteOverloadsEv)
</UL>
<P><STRONG><a name="[1b]"></a>mem_leak_operator_new_array_nothrow(unsigned)</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, memoryleakwarningplugin.o(i._Z35mem_leak_operator_new_array_nothrowj))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = mem_leak_operator_new_array_nothrow(unsigned) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool) &rArr; MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, const char*, unsigned, bool) &rArr; MemoryLeakDetector::storeLeakInformation(MemoryLeakDetectorNode*, char*, unsigned, TestMemoryAllocator*, const char*, unsigned) &rArr; MemoryLeakDetectorNode::init(char*, unsigned, unsigned, TestMemoryAllocator*, MemLeakPeriod, unsigned char, const char*, unsigned)
</UL>
<BR>[Calls]<UL><LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::allocMemory(TestMemoryAllocator*, unsigned, bool)
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;getCurrentNewArrayAllocator()
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakWarningPlugin::getGlobalDetector()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> memoryleakwarningplugin.o(.data)
</UL>
<P><STRONG><a name="[a2]"></a>helperDoTestBody(void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._Z16helperDoTestBodyPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = helperDoTestBody(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(i._ZN5Utest3runEv)
</UL>
<P><STRONG><a name="[a1]"></a>helperDoTestSetup(void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._Z17helperDoTestSetupPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = helperDoTestSetup(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(i._ZN5Utest3runEv)
</UL>
<P><STRONG><a name="[1f]"></a>defaultCrashMethod()</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._Z18defaultCrashMethodv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = defaultCrashMethod()
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.data)
</UL>
<P><STRONG><a name="[a3]"></a>helperDoTestTeardown(void*)</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, utest.o(i._Z20helperDoTestTeardownPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = helperDoTestTeardown(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(i._ZN5Utest3runEv)
</UL>
<P><STRONG><a name="[8c]"></a>helperDoRunOneTestSeperateProcess(void*)</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, utest.o(i._Z33helperDoRunOneTestSeperateProcessPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = helperDoRunOneTestSeperateProcess(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(i._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult)
</UL>
<P><STRONG><a name="[8d]"></a>helperDoRunOneTestInCurrentProcess(void*)</STRONG> (Thumb, 34 bytes, Stack size 24 bytes, utest.o(i._Z34helperDoRunOneTestInCurrentProcessPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = helperDoRunOneTestInCurrentProcess(void*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(i._ZN10UtestShell10runOneTestEP10TestPluginR10TestResult)
</UL>
<P><STRONG><a name="[1c8]"></a>__sti___9_Utest_cpp_6cd647e5</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, utest.o(i.__sti___9_Utest_cpp_6cd647e5))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = __sti___9_Utest_cpp_6cd647e5 &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[381]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NormalTestTerminator::NormalTestTerminator()
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_atexit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utest.o(.init_array)
</UL>
<P><STRONG><a name="[357]"></a>calculateVoidPointerAlignedSize(unsigned)</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memoryleakdetector.o(i._Z31calculateVoidPointerAlignedSizej))
<BR><BR>[Called By]<UL><LI><a href="#[350]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemoryLeakDetector::sizeOfMemoryWithCorruptionInfo(unsigned)
</UL>

<P><STRONG><a name="[94]"></a>&lang;Func64&rang;</STRONG> (Thumb, 16 bytes, Stack size 16 bytes, simplestring.o(i.<Func64>))
<BR><BR>[Stack]<UL><LI>Max Depth = 192<LI>Call Chain = &lang;Func64&rang; &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> simplestring.o(i._ZN22SimpleStringCollection8allocateEj)
</UL>
<P><STRONG><a name="[292]"></a>checkedMalloc(unsigned)</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, testmemoryallocator.o(i._Z13checkedMallocj))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = checkedMalloc(unsigned) &rArr; UtestShell::getCurrent() &rArr; OutsideTestRunnerUTest::instance() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrentTestTerminator()
<LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UtestShell::getCurrent()
</UL>
<BR>[Called By]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestMemoryAllocator::alloc_memory(unsigned, const char*, unsigned)
</UL>

<P><STRONG><a name="[38]"></a>DummyMutexLock(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utestplatform.o(i._Z14DummyMutexLockPv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[37]"></a>DummyMutexCreate()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utestplatform.o(i._Z16DummyMutexCreatev))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[39]"></a>DummyMutexUnlock(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utestplatform.o(i._Z16DummyMutexUnlockPv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[3a]"></a>DummyMutexDestroy(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utestplatform.o(i._Z17DummyMutexDestroyPv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[35]"></a>IsInfImplementation(double)</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, utestplatform.o(i._Z19IsInfImplementationd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsInfImplementation(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[34]"></a>IsNanImplementation(double)</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, utestplatform.o(i._Z19IsNanImplementationd))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IsNanImplementation(double)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[27]"></a>TimeStringImplementation()</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, utestplatform.o(i._Z24TimeStringImplementationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = TimeStringImplementation() &rArr; ctime &rArr; asctime &rArr; _asctime_r &rArr; sprintf &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ctime
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
<LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[21]"></a>DummyPlatformSpecificFork()</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, utestplatform.o(i._Z25DummyPlatformSpecificForkv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[26]"></a>TimeInMillisImplementation()</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, utestplatform.o(i._Z26TimeInMillisImplementationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TimeInMillisImplementation()
</UL>
<BR>[Calls]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;clock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[22]"></a>DummyPlatformSpecificWaitPid(int, int*, int)</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, utestplatform.o(i._Z28DummyPlatformSpecificWaitPidiPii))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[29]"></a>PlatformSpecificFOpenImplementation(const char*, const char*)</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, utestplatform.o(i._Z35PlatformSpecificFOpenImplementationPKcS0_))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[2a]"></a>PlatformSpecificFPutsImplementation(const char*, void*)</STRONG> (Thumb, 18 bytes, Stack size 16 bytes, utestplatform.o(i._Z35PlatformSpecificFPutsImplementationPKcPv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160 + Unknown Stack Size
<LI>Call Chain = PlatformSpecificFPutsImplementation(const char*, void*) &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[2d]"></a>PlatformSpecificFlushImplementation()</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utestplatform.o(i._Z35PlatformSpecificFlushImplementationv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[2b]"></a>PlatformSpecificFCloseImplementation(void*)</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, utestplatform.o(i._Z36PlatformSpecificFCloseImplementationPv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[24]"></a>PlatformSpecificSetJmpImplementation(void(*)(void*), void*)</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, utestplatform.o(i._Z36PlatformSpecificSetJmpImplementationPFYvPvES_))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PlatformSpecificSetJmpImplementation(void(*)(void*), void*) &rArr; setjmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setjmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[23]"></a>PlatformSpecificLongJmpImplementation()</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, utestplatform.o(i._Z37PlatformSpecificLongJmpImplementationv))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PlatformSpecificLongJmpImplementation()
</UL>
<BR>[Calls]<UL><LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;longjmp
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[20]"></a>DummyPlatformSpecificRunTestInASeperateProcess(UtestShell*, TestPlugin*, TestResult*)</STRONG> (Thumb, 64 bytes, Stack size 88 bytes, utestplatform.o(i._Z46DummyPlatformSpecificRunTestInASeperateProcessP10UtestShellP10TestPluginP10TestResult))
<BR><BR>[Stack]<UL><LI>Max Depth = 296<LI>Call Chain = DummyPlatformSpecificRunTestInASeperateProcess(UtestShell*, TestPlugin*, TestResult*) &rArr; TestFailure::TestFailure(UtestShell*, const SimpleString&) &rArr; UtestShell::getName() const &rArr; SimpleString::SimpleString(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*) &rArr; SimpleString::copyBufferToNewInternalBuffer(const char*, unsigned) &rArr; SimpleString::deallocateInternalBuffer() &rArr; SimpleString::deallocStringBuffer(char*, unsigned, const char*, unsigned) &rArr; SimpleString::getStringAllocator() &rArr; defaultNewArrayAllocator() &rArr; __aeabi_atexit &rArr; malloc &rArr; __Heap_Full &rArr; __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::~SimpleString()
<LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SimpleString::SimpleString(const char*)
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::~TestFailure()
<LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TestFailure::TestFailure(UtestShell*, const SimpleString&)
</UL>
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[25]"></a>PlatformSpecificRestoreJumpBufferImplementation()</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, utestplatform.o(i._Z47PlatformSpecificRestoreJumpBufferImplementationv))
<BR>[Address Reference Count : 1]<UL><LI> utestplatform.o(.data)
</UL>
<P><STRONG><a name="[3e8]"></a>_dadd1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dadd), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsub
</UL>

<P><STRONG><a name="[3e2]"></a>_dsub1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, daddsub_clz.o(x$fpl$dsub), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[3e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dadd
</UL>

<P><STRONG><a name="[86]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL>
<P><STRONG><a name="[88]"></a>[local to arm_exceptions_c]::__default_terminate_handler()</STRONG> (Thumb, 6 bytes, Stack size 8 bytes, arm_exceptions_globs.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56 + Unknown Stack Size
<LI>Call Chain = [local to arm_exceptions_c]::__default_terminate_handler() &rArr; abort &rArr; __rt_SIGABRT &rArr; __rt_SIGABRT_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;abort
</UL>
<BR>[Address Reference Count : 1]<UL><LI> arm_exceptions_globs.o(.text)
</UL>
<P><STRONG><a name="[252]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
<LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
</UL>
<BR>[Called By]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
